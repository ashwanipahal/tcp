// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AddEditPersonalInformationForm component should renders correctly in initial state 1`] = `
<form
  className=""
  name="AddEditPersonalInformationForm"
  noValidate={true}
>
  <Styled(Row)
    className="elem-mt-XXL"
    fullBleed={true}
  >
    <Styled(Col)
      colSize={
        Object {
          "large": 6,
          "medium": 4,
          "small": 6,
        }
      }
      ignoreGutter={
        Object {
          "small": true,
        }
      }
    >
      <Field
        component={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-gzVnrw",
              "isStatic": false,
              "rules": Array [
                "
  ",
                "
  position: relative;
  display: block;

  .TextBox__label {
    font-size: ",
                [Function],
                "px;
    padding: 0;
    position: absolute;
    top: ",
                [Function],
                ";
    ",
                [Function],
                "
  }

  .TextBox__input {
    margin: 0;
    outline: 0;
    font-size: ",
                [Function],
                "px;
    color: ",
                [Function],
                ";
    width: 100%;
    background-position: left top;
    background-repeat: no-repeat;
    background-size: contain;
    border: 0 solid transparent;
    border-bottom: 1px solid ",
                [Function],
                ";
    padding-bottom: ",
                [Function],
                ";
    margin-bottom: ",
                [Function],
                ";
    padding-top: ",
                [Function],
                ";

    ",
                [Function],
                "

    ",
                [Function],
                ";

    &:focus + .TextBox__label {
      font-size: ",
                [Function],
                "px;
      font-weight: ",
                [Function],
                ";
      top: ",
                [Function],
                ";
    }
  }
  .success__checkmark {
    display: none;
  }
  &.textbox_validation_success .TextBox__input {
    border-bottom: 1px solid ",
                [Function],
                ";
  }

  &.textbox_validation_success .success__checkmark {
    display: ",
                [Function],
                ";
    width: 15px;
    height: 8px;
    margin-left: ",
                [Function],
                ";
    transform: rotate(-45deg);
    transform-origin: left;
    position: absolute;
    right: 0;
    top: 30px;

    &:before {
      content: '';
      position: absolute;
      width: 3px;
      height: 100%;
      background-color: ",
                [Function],
                ";
    }

    &:after {
      content: '';
      position: absolute;
      width: 100%;
      height: 3px;
      background-color: ",
                [Function],
                ";
      bottom: 0;
    }
  }

  ",
                [Function],
                ";

  .TextBox__error {
    display: flex;
    flex-direction: row;
    padding-bottom: ",
                [Function],
                ";
  }
  .warning-icon {
    background: transparent url('/static/images/circle-alert-fill.svg') no-repeat 0 0;
    background-size: contain;
    border: none;
    height: 14px;
    width: 16px;
    margin-right: 7px;
  }
",
                ";
",
              ],
            },
            "displayName": "Styled(TextBox)",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-gzVnrw",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        dataLocator="editPersonalInfo-firstname"
        id="firstName"
        name="firstName"
        placeholder="lbl_profile_personal_info_firstName"
        type="text"
      />
    </Styled(Col)>
    <Styled(Col)
      className="addEditPersonallastName"
      colSize={
        Object {
          "large": 6,
          "medium": 4,
          "small": 6,
        }
      }
    >
      <Field
        component={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-gzVnrw",
              "isStatic": false,
              "rules": Array [
                "
  ",
                "
  position: relative;
  display: block;

  .TextBox__label {
    font-size: ",
                [Function],
                "px;
    padding: 0;
    position: absolute;
    top: ",
                [Function],
                ";
    ",
                [Function],
                "
  }

  .TextBox__input {
    margin: 0;
    outline: 0;
    font-size: ",
                [Function],
                "px;
    color: ",
                [Function],
                ";
    width: 100%;
    background-position: left top;
    background-repeat: no-repeat;
    background-size: contain;
    border: 0 solid transparent;
    border-bottom: 1px solid ",
                [Function],
                ";
    padding-bottom: ",
                [Function],
                ";
    margin-bottom: ",
                [Function],
                ";
    padding-top: ",
                [Function],
                ";

    ",
                [Function],
                "

    ",
                [Function],
                ";

    &:focus + .TextBox__label {
      font-size: ",
                [Function],
                "px;
      font-weight: ",
                [Function],
                ";
      top: ",
                [Function],
                ";
    }
  }
  .success__checkmark {
    display: none;
  }
  &.textbox_validation_success .TextBox__input {
    border-bottom: 1px solid ",
                [Function],
                ";
  }

  &.textbox_validation_success .success__checkmark {
    display: ",
                [Function],
                ";
    width: 15px;
    height: 8px;
    margin-left: ",
                [Function],
                ";
    transform: rotate(-45deg);
    transform-origin: left;
    position: absolute;
    right: 0;
    top: 30px;

    &:before {
      content: '';
      position: absolute;
      width: 3px;
      height: 100%;
      background-color: ",
                [Function],
                ";
    }

    &:after {
      content: '';
      position: absolute;
      width: 100%;
      height: 3px;
      background-color: ",
                [Function],
                ";
      bottom: 0;
    }
  }

  ",
                [Function],
                ";

  .TextBox__error {
    display: flex;
    flex-direction: row;
    padding-bottom: ",
                [Function],
                ";
  }
  .warning-icon {
    background: transparent url('/static/images/circle-alert-fill.svg') no-repeat 0 0;
    background-size: contain;
    border: none;
    height: 14px;
    width: 16px;
    margin-right: 7px;
  }
",
                ";
",
              ],
            },
            "displayName": "Styled(TextBox)",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-gzVnrw",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        dataLocator="editPersonalInfo-lastname"
        id="lastName"
        name="lastName"
        placeholder="lbl_profile_personal_info_lastName"
      />
    </Styled(Col)>
  </Styled(Row)>
  <Styled(Row)
    className="elem-mt-MED"
    fullBleed={true}
  >
    <Styled(Col)
      colSize={
        Object {
          "large": 6,
          "medium": 4,
          "small": 6,
        }
      }
      ignoreGutter={
        Object {
          "small": true,
        }
      }
    >
      <Field
        component={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-gzVnrw",
              "isStatic": false,
              "rules": Array [
                "
  ",
                "
  position: relative;
  display: block;

  .TextBox__label {
    font-size: ",
                [Function],
                "px;
    padding: 0;
    position: absolute;
    top: ",
                [Function],
                ";
    ",
                [Function],
                "
  }

  .TextBox__input {
    margin: 0;
    outline: 0;
    font-size: ",
                [Function],
                "px;
    color: ",
                [Function],
                ";
    width: 100%;
    background-position: left top;
    background-repeat: no-repeat;
    background-size: contain;
    border: 0 solid transparent;
    border-bottom: 1px solid ",
                [Function],
                ";
    padding-bottom: ",
                [Function],
                ";
    margin-bottom: ",
                [Function],
                ";
    padding-top: ",
                [Function],
                ";

    ",
                [Function],
                "

    ",
                [Function],
                ";

    &:focus + .TextBox__label {
      font-size: ",
                [Function],
                "px;
      font-weight: ",
                [Function],
                ";
      top: ",
                [Function],
                ";
    }
  }
  .success__checkmark {
    display: none;
  }
  &.textbox_validation_success .TextBox__input {
    border-bottom: 1px solid ",
                [Function],
                ";
  }

  &.textbox_validation_success .success__checkmark {
    display: ",
                [Function],
                ";
    width: 15px;
    height: 8px;
    margin-left: ",
                [Function],
                ";
    transform: rotate(-45deg);
    transform-origin: left;
    position: absolute;
    right: 0;
    top: 30px;

    &:before {
      content: '';
      position: absolute;
      width: 3px;
      height: 100%;
      background-color: ",
                [Function],
                ";
    }

    &:after {
      content: '';
      position: absolute;
      width: 100%;
      height: 3px;
      background-color: ",
                [Function],
                ";
      bottom: 0;
    }
  }

  ",
                [Function],
                ";

  .TextBox__error {
    display: flex;
    flex-direction: row;
    padding-bottom: ",
                [Function],
                ";
  }
  .warning-icon {
    background: transparent url('/static/images/circle-alert-fill.svg') no-repeat 0 0;
    background-size: contain;
    border: none;
    height: 14px;
    width: 16px;
    margin-right: 7px;
  }
",
                ";
",
              ],
            },
            "displayName": "Styled(TextBox)",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-gzVnrw",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        dataLocator="editPersonalInfo-email"
        id="Email"
        name="Email"
        placeholder="lbl_profile_personal_info_email"
        type="email"
      />
      <Styled(BodyCopy)
        className={null}
        color="text.primary"
        component="p"
        fontFamily="secondary"
        fontSize="fs12"
        fontWeight="regular"
        letterSpacing="normal"
        lineHeight="normal"
        link={null}
        textAlign="left"
      >
        lbl_profile_email_used_login
      </Styled(BodyCopy)>
    </Styled(Col)>
    <Styled(Col)
      className="addEditPersonalPhoneNumber"
      colSize={
        Object {
          "large": 6,
          "medium": 4,
          "small": 6,
        }
      }
    >
      <Field
        component={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-gzVnrw",
              "isStatic": false,
              "rules": Array [
                "
  ",
                "
  position: relative;
  display: block;

  .TextBox__label {
    font-size: ",
                [Function],
                "px;
    padding: 0;
    position: absolute;
    top: ",
                [Function],
                ";
    ",
                [Function],
                "
  }

  .TextBox__input {
    margin: 0;
    outline: 0;
    font-size: ",
                [Function],
                "px;
    color: ",
                [Function],
                ";
    width: 100%;
    background-position: left top;
    background-repeat: no-repeat;
    background-size: contain;
    border: 0 solid transparent;
    border-bottom: 1px solid ",
                [Function],
                ";
    padding-bottom: ",
                [Function],
                ";
    margin-bottom: ",
                [Function],
                ";
    padding-top: ",
                [Function],
                ";

    ",
                [Function],
                "

    ",
                [Function],
                ";

    &:focus + .TextBox__label {
      font-size: ",
                [Function],
                "px;
      font-weight: ",
                [Function],
                ";
      top: ",
                [Function],
                ";
    }
  }
  .success__checkmark {
    display: none;
  }
  &.textbox_validation_success .TextBox__input {
    border-bottom: 1px solid ",
                [Function],
                ";
  }

  &.textbox_validation_success .success__checkmark {
    display: ",
                [Function],
                ";
    width: 15px;
    height: 8px;
    margin-left: ",
                [Function],
                ";
    transform: rotate(-45deg);
    transform-origin: left;
    position: absolute;
    right: 0;
    top: 30px;

    &:before {
      content: '';
      position: absolute;
      width: 3px;
      height: 100%;
      background-color: ",
                [Function],
                ";
    }

    &:after {
      content: '';
      position: absolute;
      width: 100%;
      height: 3px;
      background-color: ",
                [Function],
                ";
      bottom: 0;
    }
  }

  ",
                [Function],
                ";

  .TextBox__error {
    display: flex;
    flex-direction: row;
    padding-bottom: ",
                [Function],
                ";
  }
  .warning-icon {
    background: transparent url('/static/images/circle-alert-fill.svg') no-repeat 0 0;
    background-size: contain;
    border: none;
    height: 14px;
    width: 16px;
    margin-right: 7px;
  }
",
                ";
",
              ],
            },
            "displayName": "Styled(TextBox)",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-gzVnrw",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        dataLocator="editPersonalInfo-phnumber"
        id="phoneNumber"
        name="phoneNumber"
        placeholder="lbl_profile_personal_info_phoneNumber"
        type="tel"
      />
    </Styled(Col)>
  </Styled(Row)>
  <Styled(Row)
    className="elem-mt-XL addEditPersonalBirthday"
    fullBleed={true}
  >
    <Styled(Col)
      colSize={
        Object {
          "large": 12,
          "medium": 8,
          "small": 6,
        }
      }
    >
      <Styled(BodyCopy)
        className={null}
        color="text.primary"
        component="div"
        fontFamily="primary"
        fontSize="fs12"
        fontWeight="extrabold"
        letterSpacing="normal"
        lineHeight="normal"
        link={null}
        textAlign="left"
      >
        lbl_profile_personal_info_birthday
      </Styled(BodyCopy)>
    </Styled(Col)>
  </Styled(Row)>
  <Styled(Row)
    className="elem-mt-MED"
    fullBleed={true}
  >
    <Styled(Col)
      colSize={
        Object {
          "large": 6,
          "medium": 4,
          "small": 6,
        }
      }
    >
      <Styled(Row)
        fullBleed={true}
      >
        <Styled(Col)
          colSize={
            Object {
              "large": 6,
              "medium": 4,
              "small": 3,
            }
          }
        >
          <Field
            className="field"
            component={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-dnqmqq",
                  "isStatic": false,
                  "rules": Array [
                    "
  ",
                    "
  position: relative;
  display: block;
  height: 70px;

  .select__input {
    appearance: none;
    background: url(",
                    "/static/images/carrot-small-down.png",
                    ") no-repeat right 0px bottom
      ",
                    [Function],
                    ";
    border: 0;
    border-bottom: 1px solid ",
                    [Function],
                    ";
    ",
                    [Function],
                    ";
    border-radius: 0;
    color: ",
                    [Function],
                    ";
    font-size: ",
                    [Function],
                    ";
    margin: 0;
    margin-bottom: ",
                    [Function],
                    ";
    outline: 0;
    padding: ",
                    "26px",
                    " 0 ",
                    [Function],
                    ";
    width: 100%;

    ",
                    [Function],
                    ";
  }

  .select__label {
    font-size: ",
                    [Function],
                    "px;
    font-weight: ",
                    [Function],
                    ";
    padding: 0;
    position: absolute;
    top: 0;
  }

  .SelectBox__error {
    display: flex;
    flex-direction: row;
    padding-bottom: ",
                    [Function],
                    ";
  }

  .warning-icon {
    background: transparent url('/static/images/circle-alert-fill.svg') no-repeat 0 0;
    background-size: contain;
    border: none;
    height: 14px;
    width: 16px;
    margin-right: 7px;
  }

  ",
                    [Function],
                    ";
",
                    ";
",
                  ],
                },
                "displayName": "Styled(SelectBox)",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-dnqmqq",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            dataLocator="editPersonalInfo-userBirthMonth"
            enableSuccessCheck={false}
            id="userBirthMonth"
            name="userBirthMonth"
            options={Array []}
            placeholder="lbl_profile_personal_info_month"
          />
        </Styled(Col)>
        <Styled(Col)
          colSize={
            Object {
              "large": 6,
              "medium": 4,
              "small": 3,
            }
          }
        >
          <Field
            className="field"
            component={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-dnqmqq",
                  "isStatic": false,
                  "rules": Array [
                    "
  ",
                    "
  position: relative;
  display: block;
  height: 70px;

  .select__input {
    appearance: none;
    background: url(",
                    "/static/images/carrot-small-down.png",
                    ") no-repeat right 0px bottom
      ",
                    [Function],
                    ";
    border: 0;
    border-bottom: 1px solid ",
                    [Function],
                    ";
    ",
                    [Function],
                    ";
    border-radius: 0;
    color: ",
                    [Function],
                    ";
    font-size: ",
                    [Function],
                    ";
    margin: 0;
    margin-bottom: ",
                    [Function],
                    ";
    outline: 0;
    padding: ",
                    "26px",
                    " 0 ",
                    [Function],
                    ";
    width: 100%;

    ",
                    [Function],
                    ";
  }

  .select__label {
    font-size: ",
                    [Function],
                    "px;
    font-weight: ",
                    [Function],
                    ";
    padding: 0;
    position: absolute;
    top: 0;
  }

  .SelectBox__error {
    display: flex;
    flex-direction: row;
    padding-bottom: ",
                    [Function],
                    ";
  }

  .warning-icon {
    background: transparent url('/static/images/circle-alert-fill.svg') no-repeat 0 0;
    background-size: contain;
    border: none;
    height: 14px;
    width: 16px;
    margin-right: 7px;
  }

  ",
                    [Function],
                    ";
",
                    ";
",
                  ],
                },
                "displayName": "Styled(SelectBox)",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-dnqmqq",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            dataLocator="editPersonalInfo-userBirthYear"
            enableSuccessCheck={false}
            id="userBirthYear"
            name="userBirthYear"
            options={Array []}
            placeholder="lbl_profile_personal_info_year"
          />
        </Styled(Col)>
      </Styled(Row)>
      <Styled(BodyCopy)
        className="elem-mt-XS"
        color="text.primary"
        component="p"
        fontFamily="secondary"
        fontSize="fs12"
        fontWeight="regular"
        letterSpacing="normal"
        lineHeight="normal"
        link={null}
        textAlign="left"
      >
        lbl_profile_celebration_birthday
      </Styled(BodyCopy)>
    </Styled(Col)>
    <Styled(Col)
      colSize={
        Object {
          "large": 6,
          "medium": 4,
          "small": 6,
        }
      }
    />
  </Styled(Row)>
  <Styled(Row)
    className="elem-mt-LRG"
    fullBleed={true}
  >
    <Styled(Col)
      className="dropdown-text"
      colSize={
        Object {
          "large": 6,
          "medium": 4,
          "small": 6,
        }
      }
    >
      <Field
        className="AddPersonalInfo-isEmployee"
        component={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-gZMcBi",
              "isStatic": false,
              "rules": Array [
                "
  ",
                "
  display: block;
  align-items: ",
                [Function],
                ";

  & .CheckBox__input {
    flex: 0 0 auto;
    position: relative;
    top: 0;
    appearance: none;
    outline: 0;
    border: 0;
    height: ",
                "25px",
                ";
    width: ",
                "25px",
                ";
    margin: 0;
    margin-right: ",
                [Function],
                ";
    display: inline-block;
    vertical-align: top;
  }

  & .CheckBox__input:before {
    content: '';
    position: absolute;
    height: 100%;
    width: 100%;
    left: 0;
    border: 1px solid ",
                [Function],
                ";
  }

  & .CheckBox__input:checked:before {
    background: ",
                [Function],
                ";
    border: 1px solid ",
                [Function],
                ";
  }

  & .CheckBox__input:checked:after {
    transform: rotate(225deg);
    content: '';
    border: 2px solid ",
                [Function],
                ";
    font-size: ",
                [Function],
                "px;
    width: ",
                [Function],
                ";
    height: 10px;
    border-right: 0;
    border-bottom: 0;
    left: 10px;
    top: 5px;
    position: absolute;
  }

  & .CheckBox__text {
    width: calc(100% - 45px);
    display: inline-block;
  }

  & .CheckBox__text a {
    color: ",
                [Function],
                ";
  }

  & .disabled {
    opacity: ",
                [Function],
                ";
  }

  & .Checkbox__error {
    display: flex;
    flex-direction: row;
    padding-left: ",
                [Function],
                ";
  }
  & .warning-icon {
    background: transparent url('/static/images/circle-alert-fill.svg') no-repeat 0 0;
    background-size: contain;
    border: none;
    height: ",
                [Function],
                ";
    width: ",
                [Function],
                ";
    margin-right: 4px;
    margin-top: 2px;
  }
",
                ";
",
              ],
            },
            "displayName": "Styled(InputCheckbox)",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-gZMcBi",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        dataLocator="editPersonalInfo-isEmployee"
        name="isEmployee"
      >
        lbl_profile_personal_info_tcp_employee
      </Field>
    </Styled(Col)>
  </Styled(Row)>
  <Styled(Row)
    className="elem-mb-LRG elem-mt-XXL"
  >
    <Styled(Col)
      className="AddEditPersonalInformationForm_cancel"
      colSize={
        Object {
          "large": 3,
          "medium": 2,
          "small": 6,
        }
      }
      offsetLeft={
        Object {
          "large": 3,
          "medium": 1,
        }
      }
    >
      <Styled(Anchor)
        asPath="/account/profile"
        to="/account?id=profile"
      >
        <Styled(Button)
          buttonVariation="fixed-width"
          className="elem-mb-XS"
          dataLocator="cancelBtn"
          fullWidth={true}
          type="button"
        >
          lbl_profile_personal_info_cancelCta
        </Styled(Button)>
      </Styled(Anchor)>
    </Styled(Col)>
    <Styled(Col)
      className="AddEditPersonalInformationForm_update"
      colSize={
        Object {
          "large": 3,
          "medium": 2,
          "small": 6,
        }
      }
    >
      <Styled(Button)
        buttonVariation="fixed-width"
        className="elem-mb-XS"
        dataLocator="UpdateBtn"
        disabled={false}
        fill="BLUE"
        fullWidth={true}
        type="submit"
      >
        lbl_profile_personal_info_updateCta
      </Styled(Button)>
    </Styled(Col)>
  </Styled(Row)>
</form>
`;

exports[`AddEditPersonalInformationForm component should renders correctly with success and error 1`] = `
<form
  className=""
  name="AddEditPersonalInformationForm"
  noValidate={true}
>
  <Styled(Row)
    className="elem-mt-XXL"
    fullBleed={true}
  >
    <Styled(Col)
      colSize={
        Object {
          "large": 6,
          "medium": 4,
          "small": 6,
        }
      }
      ignoreGutter={
        Object {
          "small": true,
        }
      }
    >
      <Field
        component={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-gzVnrw",
              "isStatic": false,
              "rules": Array [
                "
  ",
                "
  position: relative;
  display: block;

  .TextBox__label {
    font-size: ",
                [Function],
                "px;
    padding: 0;
    position: absolute;
    top: ",
                [Function],
                ";
    ",
                [Function],
                "
  }

  .TextBox__input {
    margin: 0;
    outline: 0;
    font-size: ",
                [Function],
                "px;
    color: ",
                [Function],
                ";
    width: 100%;
    background-position: left top;
    background-repeat: no-repeat;
    background-size: contain;
    border: 0 solid transparent;
    border-bottom: 1px solid ",
                [Function],
                ";
    padding-bottom: ",
                [Function],
                ";
    margin-bottom: ",
                [Function],
                ";
    padding-top: ",
                [Function],
                ";

    ",
                [Function],
                "

    ",
                [Function],
                ";

    &:focus + .TextBox__label {
      font-size: ",
                [Function],
                "px;
      font-weight: ",
                [Function],
                ";
      top: ",
                [Function],
                ";
    }
  }
  .success__checkmark {
    display: none;
  }
  &.textbox_validation_success .TextBox__input {
    border-bottom: 1px solid ",
                [Function],
                ";
  }

  &.textbox_validation_success .success__checkmark {
    display: ",
                [Function],
                ";
    width: 15px;
    height: 8px;
    margin-left: ",
                [Function],
                ";
    transform: rotate(-45deg);
    transform-origin: left;
    position: absolute;
    right: 0;
    top: 30px;

    &:before {
      content: '';
      position: absolute;
      width: 3px;
      height: 100%;
      background-color: ",
                [Function],
                ";
    }

    &:after {
      content: '';
      position: absolute;
      width: 100%;
      height: 3px;
      background-color: ",
                [Function],
                ";
      bottom: 0;
    }
  }

  ",
                [Function],
                ";

  .TextBox__error {
    display: flex;
    flex-direction: row;
    padding-bottom: ",
                [Function],
                ";
  }
  .warning-icon {
    background: transparent url('/static/images/circle-alert-fill.svg') no-repeat 0 0;
    background-size: contain;
    border: none;
    height: 14px;
    width: 16px;
    margin-right: 7px;
  }
",
                ";
",
              ],
            },
            "displayName": "Styled(TextBox)",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-gzVnrw",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        dataLocator="editPersonalInfo-firstname"
        id="firstName"
        name="firstName"
        placeholder="lbl_profile_personal_info_firstName"
        type="text"
      />
    </Styled(Col)>
    <Styled(Col)
      className="addEditPersonallastName"
      colSize={
        Object {
          "large": 6,
          "medium": 4,
          "small": 6,
        }
      }
    >
      <Field
        component={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-gzVnrw",
              "isStatic": false,
              "rules": Array [
                "
  ",
                "
  position: relative;
  display: block;

  .TextBox__label {
    font-size: ",
                [Function],
                "px;
    padding: 0;
    position: absolute;
    top: ",
                [Function],
                ";
    ",
                [Function],
                "
  }

  .TextBox__input {
    margin: 0;
    outline: 0;
    font-size: ",
                [Function],
                "px;
    color: ",
                [Function],
                ";
    width: 100%;
    background-position: left top;
    background-repeat: no-repeat;
    background-size: contain;
    border: 0 solid transparent;
    border-bottom: 1px solid ",
                [Function],
                ";
    padding-bottom: ",
                [Function],
                ";
    margin-bottom: ",
                [Function],
                ";
    padding-top: ",
                [Function],
                ";

    ",
                [Function],
                "

    ",
                [Function],
                ";

    &:focus + .TextBox__label {
      font-size: ",
                [Function],
                "px;
      font-weight: ",
                [Function],
                ";
      top: ",
                [Function],
                ";
    }
  }
  .success__checkmark {
    display: none;
  }
  &.textbox_validation_success .TextBox__input {
    border-bottom: 1px solid ",
                [Function],
                ";
  }

  &.textbox_validation_success .success__checkmark {
    display: ",
                [Function],
                ";
    width: 15px;
    height: 8px;
    margin-left: ",
                [Function],
                ";
    transform: rotate(-45deg);
    transform-origin: left;
    position: absolute;
    right: 0;
    top: 30px;

    &:before {
      content: '';
      position: absolute;
      width: 3px;
      height: 100%;
      background-color: ",
                [Function],
                ";
    }

    &:after {
      content: '';
      position: absolute;
      width: 100%;
      height: 3px;
      background-color: ",
                [Function],
                ";
      bottom: 0;
    }
  }

  ",
                [Function],
                ";

  .TextBox__error {
    display: flex;
    flex-direction: row;
    padding-bottom: ",
                [Function],
                ";
  }
  .warning-icon {
    background: transparent url('/static/images/circle-alert-fill.svg') no-repeat 0 0;
    background-size: contain;
    border: none;
    height: 14px;
    width: 16px;
    margin-right: 7px;
  }
",
                ";
",
              ],
            },
            "displayName": "Styled(TextBox)",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-gzVnrw",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        dataLocator="editPersonalInfo-lastname"
        id="lastName"
        name="lastName"
        placeholder="lbl_profile_personal_info_lastName"
      />
    </Styled(Col)>
  </Styled(Row)>
  <Styled(Row)
    className="elem-mt-MED"
    fullBleed={true}
  >
    <Styled(Col)
      colSize={
        Object {
          "large": 6,
          "medium": 4,
          "small": 6,
        }
      }
      ignoreGutter={
        Object {
          "small": true,
        }
      }
    >
      <Field
        component={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-gzVnrw",
              "isStatic": false,
              "rules": Array [
                "
  ",
                "
  position: relative;
  display: block;

  .TextBox__label {
    font-size: ",
                [Function],
                "px;
    padding: 0;
    position: absolute;
    top: ",
                [Function],
                ";
    ",
                [Function],
                "
  }

  .TextBox__input {
    margin: 0;
    outline: 0;
    font-size: ",
                [Function],
                "px;
    color: ",
                [Function],
                ";
    width: 100%;
    background-position: left top;
    background-repeat: no-repeat;
    background-size: contain;
    border: 0 solid transparent;
    border-bottom: 1px solid ",
                [Function],
                ";
    padding-bottom: ",
                [Function],
                ";
    margin-bottom: ",
                [Function],
                ";
    padding-top: ",
                [Function],
                ";

    ",
                [Function],
                "

    ",
                [Function],
                ";

    &:focus + .TextBox__label {
      font-size: ",
                [Function],
                "px;
      font-weight: ",
                [Function],
                ";
      top: ",
                [Function],
                ";
    }
  }
  .success__checkmark {
    display: none;
  }
  &.textbox_validation_success .TextBox__input {
    border-bottom: 1px solid ",
                [Function],
                ";
  }

  &.textbox_validation_success .success__checkmark {
    display: ",
                [Function],
                ";
    width: 15px;
    height: 8px;
    margin-left: ",
                [Function],
                ";
    transform: rotate(-45deg);
    transform-origin: left;
    position: absolute;
    right: 0;
    top: 30px;

    &:before {
      content: '';
      position: absolute;
      width: 3px;
      height: 100%;
      background-color: ",
                [Function],
                ";
    }

    &:after {
      content: '';
      position: absolute;
      width: 100%;
      height: 3px;
      background-color: ",
                [Function],
                ";
      bottom: 0;
    }
  }

  ",
                [Function],
                ";

  .TextBox__error {
    display: flex;
    flex-direction: row;
    padding-bottom: ",
                [Function],
                ";
  }
  .warning-icon {
    background: transparent url('/static/images/circle-alert-fill.svg') no-repeat 0 0;
    background-size: contain;
    border: none;
    height: 14px;
    width: 16px;
    margin-right: 7px;
  }
",
                ";
",
              ],
            },
            "displayName": "Styled(TextBox)",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-gzVnrw",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        dataLocator="editPersonalInfo-email"
        id="Email"
        name="Email"
        placeholder="lbl_profile_personal_info_email"
        type="email"
      />
      <Styled(BodyCopy)
        className={null}
        color="text.primary"
        component="p"
        fontFamily="secondary"
        fontSize="fs12"
        fontWeight="regular"
        letterSpacing="normal"
        lineHeight="normal"
        link={null}
        textAlign="left"
      >
        lbl_profile_email_used_login
      </Styled(BodyCopy)>
    </Styled(Col)>
    <Styled(Col)
      className="addEditPersonalPhoneNumber"
      colSize={
        Object {
          "large": 6,
          "medium": 4,
          "small": 6,
        }
      }
    >
      <Field
        component={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-gzVnrw",
              "isStatic": false,
              "rules": Array [
                "
  ",
                "
  position: relative;
  display: block;

  .TextBox__label {
    font-size: ",
                [Function],
                "px;
    padding: 0;
    position: absolute;
    top: ",
                [Function],
                ";
    ",
                [Function],
                "
  }

  .TextBox__input {
    margin: 0;
    outline: 0;
    font-size: ",
                [Function],
                "px;
    color: ",
                [Function],
                ";
    width: 100%;
    background-position: left top;
    background-repeat: no-repeat;
    background-size: contain;
    border: 0 solid transparent;
    border-bottom: 1px solid ",
                [Function],
                ";
    padding-bottom: ",
                [Function],
                ";
    margin-bottom: ",
                [Function],
                ";
    padding-top: ",
                [Function],
                ";

    ",
                [Function],
                "

    ",
                [Function],
                ";

    &:focus + .TextBox__label {
      font-size: ",
                [Function],
                "px;
      font-weight: ",
                [Function],
                ";
      top: ",
                [Function],
                ";
    }
  }
  .success__checkmark {
    display: none;
  }
  &.textbox_validation_success .TextBox__input {
    border-bottom: 1px solid ",
                [Function],
                ";
  }

  &.textbox_validation_success .success__checkmark {
    display: ",
                [Function],
                ";
    width: 15px;
    height: 8px;
    margin-left: ",
                [Function],
                ";
    transform: rotate(-45deg);
    transform-origin: left;
    position: absolute;
    right: 0;
    top: 30px;

    &:before {
      content: '';
      position: absolute;
      width: 3px;
      height: 100%;
      background-color: ",
                [Function],
                ";
    }

    &:after {
      content: '';
      position: absolute;
      width: 100%;
      height: 3px;
      background-color: ",
                [Function],
                ";
      bottom: 0;
    }
  }

  ",
                [Function],
                ";

  .TextBox__error {
    display: flex;
    flex-direction: row;
    padding-bottom: ",
                [Function],
                ";
  }
  .warning-icon {
    background: transparent url('/static/images/circle-alert-fill.svg') no-repeat 0 0;
    background-size: contain;
    border: none;
    height: 14px;
    width: 16px;
    margin-right: 7px;
  }
",
                ";
",
              ],
            },
            "displayName": "Styled(TextBox)",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-gzVnrw",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        dataLocator="editPersonalInfo-phnumber"
        id="phoneNumber"
        name="phoneNumber"
        placeholder="lbl_profile_personal_info_phoneNumber"
        type="tel"
      />
    </Styled(Col)>
  </Styled(Row)>
  <Styled(Row)
    className="elem-mt-XL addEditPersonalBirthday"
    fullBleed={true}
  >
    <Styled(Col)
      colSize={
        Object {
          "large": 12,
          "medium": 8,
          "small": 6,
        }
      }
    >
      <Styled(BodyCopy)
        className={null}
        color="text.primary"
        component="div"
        fontFamily="primary"
        fontSize="fs12"
        fontWeight="extrabold"
        letterSpacing="normal"
        lineHeight="normal"
        link={null}
        textAlign="left"
      >
        lbl_profile_personal_info_birthday
      </Styled(BodyCopy)>
    </Styled(Col)>
  </Styled(Row)>
  <Styled(Row)
    className="elem-mt-MED"
    fullBleed={true}
  >
    <Styled(Col)
      colSize={
        Object {
          "large": 6,
          "medium": 4,
          "small": 6,
        }
      }
    >
      <Styled(Row)
        fullBleed={true}
      >
        <Styled(Col)
          colSize={
            Object {
              "large": 6,
              "medium": 4,
              "small": 3,
            }
          }
        >
          <Field
            className="field"
            component={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-dnqmqq",
                  "isStatic": false,
                  "rules": Array [
                    "
  ",
                    "
  position: relative;
  display: block;
  height: 70px;

  .select__input {
    appearance: none;
    background: url(",
                    "/static/images/carrot-small-down.png",
                    ") no-repeat right 0px bottom
      ",
                    [Function],
                    ";
    border: 0;
    border-bottom: 1px solid ",
                    [Function],
                    ";
    ",
                    [Function],
                    ";
    border-radius: 0;
    color: ",
                    [Function],
                    ";
    font-size: ",
                    [Function],
                    ";
    margin: 0;
    margin-bottom: ",
                    [Function],
                    ";
    outline: 0;
    padding: ",
                    "26px",
                    " 0 ",
                    [Function],
                    ";
    width: 100%;

    ",
                    [Function],
                    ";
  }

  .select__label {
    font-size: ",
                    [Function],
                    "px;
    font-weight: ",
                    [Function],
                    ";
    padding: 0;
    position: absolute;
    top: 0;
  }

  .SelectBox__error {
    display: flex;
    flex-direction: row;
    padding-bottom: ",
                    [Function],
                    ";
  }

  .warning-icon {
    background: transparent url('/static/images/circle-alert-fill.svg') no-repeat 0 0;
    background-size: contain;
    border: none;
    height: 14px;
    width: 16px;
    margin-right: 7px;
  }

  ",
                    [Function],
                    ";
",
                    ";
",
                  ],
                },
                "displayName": "Styled(SelectBox)",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-dnqmqq",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            dataLocator="editPersonalInfo-userBirthMonth"
            enableSuccessCheck={false}
            id="userBirthMonth"
            name="userBirthMonth"
            placeholder="lbl_profile_personal_info_month"
          />
        </Styled(Col)>
        <Styled(Col)
          colSize={
            Object {
              "large": 6,
              "medium": 4,
              "small": 3,
            }
          }
        >
          <Field
            className="field"
            component={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-dnqmqq",
                  "isStatic": false,
                  "rules": Array [
                    "
  ",
                    "
  position: relative;
  display: block;
  height: 70px;

  .select__input {
    appearance: none;
    background: url(",
                    "/static/images/carrot-small-down.png",
                    ") no-repeat right 0px bottom
      ",
                    [Function],
                    ";
    border: 0;
    border-bottom: 1px solid ",
                    [Function],
                    ";
    ",
                    [Function],
                    ";
    border-radius: 0;
    color: ",
                    [Function],
                    ";
    font-size: ",
                    [Function],
                    ";
    margin: 0;
    margin-bottom: ",
                    [Function],
                    ";
    outline: 0;
    padding: ",
                    "26px",
                    " 0 ",
                    [Function],
                    ";
    width: 100%;

    ",
                    [Function],
                    ";
  }

  .select__label {
    font-size: ",
                    [Function],
                    "px;
    font-weight: ",
                    [Function],
                    ";
    padding: 0;
    position: absolute;
    top: 0;
  }

  .SelectBox__error {
    display: flex;
    flex-direction: row;
    padding-bottom: ",
                    [Function],
                    ";
  }

  .warning-icon {
    background: transparent url('/static/images/circle-alert-fill.svg') no-repeat 0 0;
    background-size: contain;
    border: none;
    height: 14px;
    width: 16px;
    margin-right: 7px;
  }

  ",
                    [Function],
                    ";
",
                    ";
",
                  ],
                },
                "displayName": "Styled(SelectBox)",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-dnqmqq",
                "target": [Function],
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              }
            }
            dataLocator="editPersonalInfo-userBirthYear"
            enableSuccessCheck={false}
            id="userBirthYear"
            name="userBirthYear"
            placeholder="lbl_profile_personal_info_year"
          />
        </Styled(Col)>
      </Styled(Row)>
      <Styled(BodyCopy)
        className="elem-mt-XS"
        color="text.primary"
        component="p"
        fontFamily="secondary"
        fontSize="fs12"
        fontWeight="regular"
        letterSpacing="normal"
        lineHeight="normal"
        link={null}
        textAlign="left"
      >
        lbl_profile_celebration_birthday
      </Styled(BodyCopy)>
    </Styled(Col)>
    <Styled(Col)
      colSize={
        Object {
          "large": 6,
          "medium": 4,
          "small": 6,
        }
      }
    />
  </Styled(Row)>
  <Styled(Row)
    className="elem-mt-LRG"
    fullBleed={true}
  >
    <Styled(Col)
      className="dropdown-text"
      colSize={
        Object {
          "large": 6,
          "medium": 4,
          "small": 6,
        }
      }
    >
      <Field
        className="AddPersonalInfo-isEmployee"
        component={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-gZMcBi",
              "isStatic": false,
              "rules": Array [
                "
  ",
                "
  display: block;
  align-items: ",
                [Function],
                ";

  & .CheckBox__input {
    flex: 0 0 auto;
    position: relative;
    top: 0;
    appearance: none;
    outline: 0;
    border: 0;
    height: ",
                "25px",
                ";
    width: ",
                "25px",
                ";
    margin: 0;
    margin-right: ",
                [Function],
                ";
    display: inline-block;
    vertical-align: top;
  }

  & .CheckBox__input:before {
    content: '';
    position: absolute;
    height: 100%;
    width: 100%;
    left: 0;
    border: 1px solid ",
                [Function],
                ";
  }

  & .CheckBox__input:checked:before {
    background: ",
                [Function],
                ";
    border: 1px solid ",
                [Function],
                ";
  }

  & .CheckBox__input:checked:after {
    transform: rotate(225deg);
    content: '';
    border: 2px solid ",
                [Function],
                ";
    font-size: ",
                [Function],
                "px;
    width: ",
                [Function],
                ";
    height: 10px;
    border-right: 0;
    border-bottom: 0;
    left: 10px;
    top: 5px;
    position: absolute;
  }

  & .CheckBox__text {
    width: calc(100% - 45px);
    display: inline-block;
  }

  & .CheckBox__text a {
    color: ",
                [Function],
                ";
  }

  & .disabled {
    opacity: ",
                [Function],
                ";
  }

  & .Checkbox__error {
    display: flex;
    flex-direction: row;
    padding-left: ",
                [Function],
                ";
  }
  & .warning-icon {
    background: transparent url('/static/images/circle-alert-fill.svg') no-repeat 0 0;
    background-size: contain;
    border: none;
    height: ",
                [Function],
                ";
    width: ",
                [Function],
                ";
    margin-right: 4px;
    margin-top: 2px;
  }
",
                ";
",
              ],
            },
            "displayName": "Styled(InputCheckbox)",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-gZMcBi",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        dataLocator="editPersonalInfo-isEmployee"
        name="isEmployee"
      >
        lbl_profile_personal_info_tcp_employee
      </Field>
    </Styled(Col)>
  </Styled(Row)>
  <Styled(Row)
    className="elem-mb-LRG elem-mt-XXL"
  >
    <Styled(Col)
      className="AddEditPersonalInformationForm_cancel"
      colSize={
        Object {
          "large": 3,
          "medium": 2,
          "small": 6,
        }
      }
      offsetLeft={
        Object {
          "large": 3,
          "medium": 1,
        }
      }
    >
      <Styled(Anchor)
        asPath="/account/profile"
        to="/account?id=profile"
      >
        <Styled(Button)
          buttonVariation="fixed-width"
          className="elem-mb-XS"
          dataLocator="cancelBtn"
          fullWidth={true}
          type="button"
        >
          lbl_profile_personal_info_cancelCta
        </Styled(Button)>
      </Styled(Anchor)>
    </Styled(Col)>
    <Styled(Col)
      className="AddEditPersonalInformationForm_update"
      colSize={
        Object {
          "large": 3,
          "medium": 2,
          "small": 6,
        }
      }
    >
      <Styled(Button)
        buttonVariation="fixed-width"
        className="elem-mb-XS"
        dataLocator="UpdateBtn"
        disabled={false}
        fill="BLUE"
        fullWidth={true}
        type="submit"
      >
        lbl_profile_personal_info_updateCta
      </Styled(Button)>
    </Styled(Col)>
  </Styled(Row)>
</form>
`;
