// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ResetPasswordForm component should renders correctly in initial state 1`] = `
<form
  className=""
  name="ResetPasswordForm"
  noValidate={true}
  onSubmit={[Function]}
>
  <Field
    className="elem-mb-SM"
    component={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-bZQynM",
          "isStatic": false,
          "rules": Array [
            "
  ",
            "
  position: relative;

  .rightAlignedContent {
    position: absolute;
    right: 0;
    top: ",
            [Function],
            ";
    width: 30px;

    a {
      display: block;
    }

    .tooltip-bubble {
      li {
        text-align: left;
      }

      @media ",
            [Function],
            " {
        min-width: 350px;
      }
    }

    .tooltip-bubble li:before {
      content: '-';
      text-indent: -5px;
    }

    .tooltip {
      width: 10px;
      height: 10px;
    }
  }
",
            ";
",
          ],
        },
        "displayName": "Styled(PasswordField)",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-bZQynM",
        "target": [Function],
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    dataLocator="login-passwordfield"
    enableSuccessCheck={false}
    errorDataLocator="login-passworderror"
    id="password"
    name="password"
    showSuccessCheck={false}
    tooltipContent={
      <PasswordRequirement
        labels={Object {}}
      />
    }
  />
  <Field
    className="elem-mb-SM"
    component={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-bZQynM",
          "isStatic": false,
          "rules": Array [
            "
  ",
            "
  position: relative;

  .rightAlignedContent {
    position: absolute;
    right: 0;
    top: ",
            [Function],
            ";
    width: 30px;

    a {
      display: block;
    }

    .tooltip-bubble {
      li {
        text-align: left;
      }

      @media ",
            [Function],
            " {
        min-width: 350px;
      }
    }

    .tooltip-bubble li:before {
      content: '-';
      text-indent: -5px;
    }

    .tooltip {
      width: 10px;
      height: 10px;
    }
  }
",
            ";
",
          ],
        },
        "displayName": "Styled(PasswordField)",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-bZQynM",
        "target": [Function],
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    dataLocator="login-passwordfield"
    enableSuccessCheck={false}
    errorDataLocator="login-passworderror"
    id="confirmPassword"
    name="confirmPassword"
    showSuccessCheck={false}
  />
  <Styled(BodyCopy)
    className="elem-mb-LRG"
    color="text.primary"
    component="div"
    fontFamily="primary"
    fontSize={12}
    fontWeight="regular"
    letterSpacing="normal"
    lineHeight="normal"
    textAlign="center"
  >
    <Styled(Button)
      buttonVariation="fixed-width"
      className="elem-mb-XS"
      dataLocator="login-logincta"
      disabled={false}
      fill="BLUE"
      fullWidth={true}
      type="submit"
    />
  </Styled(BodyCopy)>
</form>
`;

exports[`ResetPasswordForm component should renders correctly with success and error 1`] = `
<form
  className=""
  name="ResetPasswordForm"
  noValidate={true}
  onSubmit={[Function]}
>
  <Styled(BodyCopy)
    className="elem-mb-XL"
    color="green.500"
    component="p"
    fontFamily="primary"
    fontSize="fs12"
    fontWeight="semibold"
    letterSpacing="normal"
    lineHeight="normal"
    textAlign="left"
  />
  <Field
    className="elem-mb-SM"
    component={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-bZQynM",
          "isStatic": false,
          "rules": Array [
            "
  ",
            "
  position: relative;

  .rightAlignedContent {
    position: absolute;
    right: 0;
    top: ",
            [Function],
            ";
    width: 30px;

    a {
      display: block;
    }

    .tooltip-bubble {
      li {
        text-align: left;
      }

      @media ",
            [Function],
            " {
        min-width: 350px;
      }
    }

    .tooltip-bubble li:before {
      content: '-';
      text-indent: -5px;
    }

    .tooltip {
      width: 10px;
      height: 10px;
    }
  }
",
            ";
",
          ],
        },
        "displayName": "Styled(PasswordField)",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-bZQynM",
        "target": [Function],
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    dataLocator="login-passwordfield"
    enableSuccessCheck={false}
    errorDataLocator="login-passworderror"
    id="password"
    name="password"
    showSuccessCheck={false}
    tooltipContent={
      <PasswordRequirement
        labels={Object {}}
      />
    }
  />
  <Field
    className="elem-mb-SM"
    component={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-bZQynM",
          "isStatic": false,
          "rules": Array [
            "
  ",
            "
  position: relative;

  .rightAlignedContent {
    position: absolute;
    right: 0;
    top: ",
            [Function],
            ";
    width: 30px;

    a {
      display: block;
    }

    .tooltip-bubble {
      li {
        text-align: left;
      }

      @media ",
            [Function],
            " {
        min-width: 350px;
      }
    }

    .tooltip-bubble li:before {
      content: '-';
      text-indent: -5px;
    }

    .tooltip {
      width: 10px;
      height: 10px;
    }
  }
",
            ";
",
          ],
        },
        "displayName": "Styled(PasswordField)",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-bZQynM",
        "target": [Function],
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    dataLocator="login-passwordfield"
    enableSuccessCheck={false}
    errorDataLocator="login-passworderror"
    id="confirmPassword"
    name="confirmPassword"
    showSuccessCheck={false}
  />
  <Styled(BodyCopy)
    className="elem-mb-LRG"
    color="text.primary"
    component="div"
    fontFamily="primary"
    fontSize={12}
    fontWeight="regular"
    letterSpacing="normal"
    lineHeight="normal"
    textAlign="center"
  >
    <Styled(Button)
      buttonVariation="fixed-width"
      className="elem-mb-XS"
      dataLocator="login-logincta"
      disabled={false}
      fill="BLUE"
      fullWidth={true}
      type="submit"
    />
  </Styled(BodyCopy)>
</form>
`;
