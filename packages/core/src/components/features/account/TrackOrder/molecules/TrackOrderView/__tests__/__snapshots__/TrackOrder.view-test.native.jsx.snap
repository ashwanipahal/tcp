// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TrackOrderView component should renders correctly 1`] = `
<Styled(View)>
  <TrackOrderTopSection
    labels={
      Object {
        "trackOrder": Object {},
      }
    }
    onRequestClose={[MockFunction]}
  />
  <ReduxForm
    destroyOnUnmount={true}
    enableReinitialize={true}
    forceUnregisterOnUnmount={false}
    form="TrackOrderForm"
    getFormState={[Function]}
    handleSubmit={[MockFunction]}
    keepDirtyOnReinitialize={false}
    labels={
      Object {
        "trackOrder": Object {},
      }
    }
    onChangeForm={[MockFunction]}
    persistentSubmitErrors={false}
    pure={true}
    shouldAsyncValidate={[Function]}
    shouldError={[Function]}
    shouldValidate={[Function]}
    shouldWarn={[Function]}
    submitAsSideEffect={false}
    touchOnBlur={true}
    touchOnChange={false}
    updateUnregisteredFields={false}
    validate={[Function]}
  />
  <TrackOrderBottomSection
    labels={
      Object {
        "trackOrder": Object {},
      }
    }
  />
</Styled(View)>
`;

exports[`TrackOrderView component should renders correctly with generic error message 1`] = `
<Styled(View)>
  <TrackOrderTopSection
    labels={
      Object {
        "trackOrder": Object {},
      }
    }
    onRequestClose={[MockFunction]}
  />
  <Styled(Notification)
    colSize={
      Object {
        "large": 12,
        "medium": 8,
        "small": 6,
      }
    }
    disableSpace={false}
    message={null}
    status="error"
  >
    <Styled(View)>
      <Styled(BodyCopy)
        accessibilityText=""
        dataLocator=""
        fontSize="fs14"
        margin={null}
        mobilefontFamily={
          Array [
            "secondary",
          ]
        }
        numberOfLines={null}
        text="lbl_trackOrder_genericErrorTryAgain"
        textDecoration={null}
      />
      <Styled(View)>
        <Styled(Anchor)
          accessibilityLabel=""
          anchorVariation="primary"
          colorName={null}
          customStyle={Object {}}
          data-locator="contact_us_form_help"
          justifyContent=""
          locator=""
          margins={null}
          onPress={null}
          openWebView={false}
          text="lbl_trackOrder_genericErrorLinkText"
          underline={true}
          url="lbl_trackOrder_genericErrorLinkHref"
          visible={false}
        />
      </Styled(View)>
      <Styled(BodyCopy)
        accessibilityText=""
        dataLocator=""
        fontSize="fs14"
        margin={null}
        mobilefontFamily={
          Array [
            "secondary",
          ]
        }
        numberOfLines={null}
        text="lbl_trackOrder_genericErrorAssistance"
        textDecoration={null}
      />
    </Styled(View)>
  </Styled(Notification)>
  <ReduxForm
    destroyOnUnmount={true}
    enableReinitialize={true}
    forceUnregisterOnUnmount={false}
    form="TrackOrderForm"
    getFormState={[Function]}
    handleSubmit={[MockFunction]}
    keepDirtyOnReinitialize={false}
    labels={
      Object {
        "trackOrder": Object {},
      }
    }
    onChangeForm={[MockFunction]}
    persistentSubmitErrors={false}
    pure={true}
    shouldAsyncValidate={[Function]}
    shouldError={[Function]}
    shouldValidate={[Function]}
    shouldWarn={[Function]}
    submitAsSideEffect={false}
    touchOnBlur={true}
    touchOnChange={false}
    updateUnregisteredFields={false}
    validate={[Function]}
  />
  <TrackOrderBottomSection
    labels={
      Object {
        "trackOrder": Object {},
      }
    }
  />
</Styled(View)>
`;

exports[`TrackOrderView component should renders correctly with notification component 1`] = `
<Styled(View)>
  <TrackOrderTopSection
    labels={
      Object {
        "trackOrder": Object {},
      }
    }
    onRequestClose={[MockFunction]}
  />
  <Styled(Notification)
    colSize={
      Object {
        "large": 12,
        "medium": 8,
        "small": 6,
      }
    }
    disableSpace={false}
    message="Please enter valid values"
    status="error"
  />
  <ReduxForm
    destroyOnUnmount={true}
    enableReinitialize={true}
    forceUnregisterOnUnmount={false}
    form="TrackOrderForm"
    getFormState={[Function]}
    handleSubmit={[MockFunction]}
    keepDirtyOnReinitialize={false}
    labels={
      Object {
        "trackOrder": Object {},
      }
    }
    onChangeForm={[MockFunction]}
    persistentSubmitErrors={false}
    pure={true}
    shouldAsyncValidate={[Function]}
    shouldError={[Function]}
    shouldValidate={[Function]}
    shouldWarn={[Function]}
    submitAsSideEffect={false}
    touchOnBlur={true}
    touchOnChange={false}
    updateUnregisteredFields={false}
    validate={[Function]}
  />
  <TrackOrderBottomSection
    labels={
      Object {
        "trackOrder": Object {},
      }
    }
  />
</Styled(View)>
`;
