// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CreditCardForm component should renders correctly in mailingAddress view 1`] = `
<ScrollViewMock
  addressLabels={Object {}}
  addressList={
    Immutable.List [
      Object {
        "addressId": "12345",
        "firstName": "test",
        "lastName": "test",
        "primary": "true",
      },
    ]
  }
  className=""
  dispatch={[MockFunction]}
  dto={Object {}}
  expMonthOptionsMap={
    Array [
      Object {
        "label": "01 (Jan.)",
        "value": "1",
      },
      Object {
        "label": "02 (Feb.)",
        "value": "2",
      },
      Object {
        "label": "03 (Mar.)",
        "value": "3",
      },
      Object {
        "label": "04 (Apr.)",
        "value": "4",
      },
      Object {
        "label": "05 (May.)",
        "value": "5",
      },
      Object {
        "label": "06 (Jun.)",
        "value": "6",
      },
      Object {
        "label": "07 (Jul.)",
        "value": "7",
      },
      Object {
        "label": "08 (Aug.)",
        "value": "8",
      },
      Object {
        "label": "09 (Sep.)",
        "value": "9",
      },
      Object {
        "label": "10 (Oct.)",
        "value": "10",
      },
      Object {
        "label": "11 (Nov.)",
        "value": "11",
      },
      Object {
        "label": "12 (Dec.)",
        "value": "12",
      },
    ]
  }
  expYearOptionsMap={
    Array [
      Object {
        "label": "2019",
        "value": "2019",
      },
      Object {
        "label": "2020",
        "value": "2020",
      },
      Object {
        "label": "2021",
        "value": "2021",
      },
      Object {
        "label": "2022",
        "value": "2022",
      },
      Object {
        "label": "2023",
        "value": "2023",
      },
      Object {
        "label": "2024",
        "value": "2024",
      },
      Object {
        "label": "2025",
        "value": "2025",
      },
      Object {
        "label": "2026",
        "value": "2026",
      },
      Object {
        "label": "2027",
        "value": "2027",
      },
      Object {
        "label": "2028",
        "value": "2028",
      },
      Object {
        "label": "2029",
        "value": "2029",
      },
    ]
  }
  handleSubmit={[MockFunction]}
  initialValues={Object {}}
  isEdit={false}
  keyboardShouldPersistTaps="handled"
  labels={
    Object {
      "common": Object {},
      "paymentGC": Object {},
    }
  }
  mailingAddress={true}
  onFileAddressKey=""
  pristine={true}
  selectedCard={null}
  showCreditCardFields={true}
  showEmailAddress={true}
  showUserName={true}
  showsVerticalScrollIndicator={false}
  subHeading={null}
>
  <Styled(View)>
    <CreditCardFields
      addressLabels={Object {}}
      addressList={
        Immutable.List [
          Object {
            "addressId": "12345",
            "firstName": "test",
            "lastName": "test",
            "primary": "true",
          },
        ]
      }
      cardType=""
      cardTypeImgUrl=""
      className=""
      dispatch={[MockFunction]}
      dto={Object {}}
      expMonthOptionsMap={
        Array [
          Object {
            "label": "01 (Jan.)",
            "value": "1",
          },
          Object {
            "label": "02 (Feb.)",
            "value": "2",
          },
          Object {
            "label": "03 (Mar.)",
            "value": "3",
          },
          Object {
            "label": "04 (Apr.)",
            "value": "4",
          },
          Object {
            "label": "05 (May.)",
            "value": "5",
          },
          Object {
            "label": "06 (Jun.)",
            "value": "6",
          },
          Object {
            "label": "07 (Jul.)",
            "value": "7",
          },
          Object {
            "label": "08 (Aug.)",
            "value": "8",
          },
          Object {
            "label": "09 (Sep.)",
            "value": "9",
          },
          Object {
            "label": "10 (Oct.)",
            "value": "10",
          },
          Object {
            "label": "11 (Nov.)",
            "value": "11",
          },
          Object {
            "label": "12 (Dec.)",
            "value": "12",
          },
        ]
      }
      expYearOptionsMap={
        Array [
          Object {
            "label": "2019",
            "value": "2019",
          },
          Object {
            "label": "2020",
            "value": "2020",
          },
          Object {
            "label": "2021",
            "value": "2021",
          },
          Object {
            "label": "2022",
            "value": "2022",
          },
          Object {
            "label": "2023",
            "value": "2023",
          },
          Object {
            "label": "2024",
            "value": "2024",
          },
          Object {
            "label": "2025",
            "value": "2025",
          },
          Object {
            "label": "2026",
            "value": "2026",
          },
          Object {
            "label": "2027",
            "value": "2027",
          },
          Object {
            "label": "2028",
            "value": "2028",
          },
          Object {
            "label": "2029",
            "value": "2029",
          },
        ]
      }
      handleSubmit={[MockFunction]}
      initialValues={Object {}}
      isEdit={false}
      isPLCCEnabled={true}
      labels={
        Object {
          "common": Object {},
          "paymentGC": Object {},
        }
      }
      mailingAddress={true}
      onFileAddressKey=""
      pristine={true}
      selectedCard={null}
      showCreditCardFields={true}
      showEmailAddress={true}
      showUserName={true}
      subHeading={null}
      updateExpiryDate={[Function]}
    />
    <Styled(View)>
      <Styled(Heading)
        fontSize="fs14"
        fontWeight="black"
        letterSpacing="ls167"
        locator=""
        mobilefontFamily="secondary"
        text=""
        textAlign="left"
      />
      <Styled(View)>
        <Styled(BodyCopy)
          fontFamily="secondary"
          fontSize="fs12"
          fontWeight="black"
          marginTop="10"
          textAlign="left"
        />
      </Styled(View)>
      <Field
        addAddress={[Function]}
        component={[Function]}
        data={
          Array [
            Object {
              "content": Object {
                "addressId": "12345",
                "firstName": "test",
                "lastName": "test",
                "primary": "true",
              },
              "id": "12345",
              "label": "test test (Default)",
              "primary": true,
            },
            Object {
              "content": "",
              "id": "",
              "label": undefined,
              "primary": false,
            },
          ]
        }
        dataLocator="payment-billingaddressdd"
        dropDownStyle={
          Object {
            "borderBottomWidth": 1,
            "height": 30,
            "marginTop": 25,
          }
        }
        id="onFileAddressKey"
        itemStyle={
          Object {
            "height": 90,
          }
        }
        labels={
          Object {
            "common": Object {},
            "paymentGC": Object {},
          }
        }
        name="onFileAddressKey"
        onValueChange={[Function]}
        variation="secondary"
      />
      <Styled(View)
        spacingStyles="margin-top-LRG"
      >
        <FormSection
          name="address"
        >
          <AddressFields
            disableCountry={false}
            dispatch={[MockFunction]}
            formName="addEditCreditCard"
            formSection="address"
            initialValues={Object {}}
            isGuest={true}
            labels={Object {}}
            showDefaultCheckbox={false}
            showEmailAddress={true}
            showPhoneNumber={false}
            showUserName={true}
            state=""
          />
        </FormSection>
      </Styled(View)>
    </Styled(View)>
    <Styled(View)>
      <Styled(WithTheme(CustomButton))
        buttonVariation="variable-width"
        fill="BLUE"
        onPress={[MockFunction]}
        style={
          Object {
            "color": "white",
            "fontWeight": "normal",
            "marginTop": 48,
          }
        }
        text="lbl_common_saveCTA"
      />
      <Styled(WithTheme(CustomButton))
        buttonVariation="variable-width"
        fill="WHITE"
        style={
          Object {
            "border": 1,
            "color": "black",
            "fontWeight": "normal",
            "marginTop": 15,
          }
        }
      />
    </Styled(View)>
  </Styled(View)>
</ScrollViewMock>
`;

exports[`CreditCardForm component should renders correctly with address dropdown 1`] = `
<ScrollViewMock
  addressLabels={Object {}}
  addressList={
    Immutable.List [
      Object {
        "addressId": "12345",
        "firstName": "test",
        "lastName": "test",
        "primary": "true",
      },
    ]
  }
  className=""
  dispatch={
    [MockFunction] {
      "calls": Array [
        Array [
          Object {
            "meta": Object {
              "field": "onFileAddressKey",
              "form": "addEditCreditCard",
              "persistentSubmitErrors": undefined,
              "touch": undefined,
            },
            "payload": "12345",
            "type": "@@redux-form/CHANGE",
          },
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  dto={Object {}}
  expMonthOptionsMap={
    Array [
      Object {
        "label": "01 (Jan.)",
        "value": "1",
      },
      Object {
        "label": "02 (Feb.)",
        "value": "2",
      },
      Object {
        "label": "03 (Mar.)",
        "value": "3",
      },
      Object {
        "label": "04 (Apr.)",
        "value": "4",
      },
      Object {
        "label": "05 (May.)",
        "value": "5",
      },
      Object {
        "label": "06 (Jun.)",
        "value": "6",
      },
      Object {
        "label": "07 (Jul.)",
        "value": "7",
      },
      Object {
        "label": "08 (Aug.)",
        "value": "8",
      },
      Object {
        "label": "09 (Sep.)",
        "value": "9",
      },
      Object {
        "label": "10 (Oct.)",
        "value": "10",
      },
      Object {
        "label": "11 (Nov.)",
        "value": "11",
      },
      Object {
        "label": "12 (Dec.)",
        "value": "12",
      },
    ]
  }
  expYearOptionsMap={
    Array [
      Object {
        "label": "2019",
        "value": "2019",
      },
      Object {
        "label": "2020",
        "value": "2020",
      },
      Object {
        "label": "2021",
        "value": "2021",
      },
      Object {
        "label": "2022",
        "value": "2022",
      },
      Object {
        "label": "2023",
        "value": "2023",
      },
      Object {
        "label": "2024",
        "value": "2024",
      },
      Object {
        "label": "2025",
        "value": "2025",
      },
      Object {
        "label": "2026",
        "value": "2026",
      },
      Object {
        "label": "2027",
        "value": "2027",
      },
      Object {
        "label": "2028",
        "value": "2028",
      },
      Object {
        "label": "2029",
        "value": "2029",
      },
    ]
  }
  handleSubmit={[MockFunction]}
  initialValues={Object {}}
  isEdit={false}
  keyboardShouldPersistTaps="handled"
  labels={
    Object {
      "common": Object {},
      "paymentGC": Object {},
    }
  }
  mailingAddress={false}
  onFileAddressKey=""
  onFileAddresskey="12345"
  selectedCard={null}
  showCreditCardFields={true}
  showEmailAddress={true}
  showUserName={true}
  showsVerticalScrollIndicator={false}
  subHeading={null}
>
  <Styled(View)>
    <CreditCardFields
      addressLabels={Object {}}
      addressList={
        Immutable.List [
          Object {
            "addressId": "12345",
            "firstName": "test",
            "lastName": "test",
            "primary": "true",
          },
        ]
      }
      cardType=""
      cardTypeImgUrl=""
      className=""
      dispatch={
        [MockFunction] {
          "calls": Array [
            Array [
              Object {
                "meta": Object {
                  "field": "onFileAddressKey",
                  "form": "addEditCreditCard",
                  "persistentSubmitErrors": undefined,
                  "touch": undefined,
                },
                "payload": "12345",
                "type": "@@redux-form/CHANGE",
              },
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        }
      }
      dto={Object {}}
      expMonthOptionsMap={
        Array [
          Object {
            "label": "01 (Jan.)",
            "value": "1",
          },
          Object {
            "label": "02 (Feb.)",
            "value": "2",
          },
          Object {
            "label": "03 (Mar.)",
            "value": "3",
          },
          Object {
            "label": "04 (Apr.)",
            "value": "4",
          },
          Object {
            "label": "05 (May.)",
            "value": "5",
          },
          Object {
            "label": "06 (Jun.)",
            "value": "6",
          },
          Object {
            "label": "07 (Jul.)",
            "value": "7",
          },
          Object {
            "label": "08 (Aug.)",
            "value": "8",
          },
          Object {
            "label": "09 (Sep.)",
            "value": "9",
          },
          Object {
            "label": "10 (Oct.)",
            "value": "10",
          },
          Object {
            "label": "11 (Nov.)",
            "value": "11",
          },
          Object {
            "label": "12 (Dec.)",
            "value": "12",
          },
        ]
      }
      expYearOptionsMap={
        Array [
          Object {
            "label": "2019",
            "value": "2019",
          },
          Object {
            "label": "2020",
            "value": "2020",
          },
          Object {
            "label": "2021",
            "value": "2021",
          },
          Object {
            "label": "2022",
            "value": "2022",
          },
          Object {
            "label": "2023",
            "value": "2023",
          },
          Object {
            "label": "2024",
            "value": "2024",
          },
          Object {
            "label": "2025",
            "value": "2025",
          },
          Object {
            "label": "2026",
            "value": "2026",
          },
          Object {
            "label": "2027",
            "value": "2027",
          },
          Object {
            "label": "2028",
            "value": "2028",
          },
          Object {
            "label": "2029",
            "value": "2029",
          },
        ]
      }
      handleSubmit={[MockFunction]}
      initialValues={Object {}}
      isEdit={false}
      isPLCCEnabled={true}
      labels={
        Object {
          "common": Object {},
          "paymentGC": Object {},
        }
      }
      mailingAddress={false}
      onFileAddressKey=""
      onFileAddresskey="12345"
      selectedCard={null}
      showCreditCardFields={true}
      showEmailAddress={true}
      showUserName={true}
      subHeading={null}
      updateExpiryDate={[Function]}
    />
    <Styled(View)>
      <Styled(Heading)
        fontSize="fs14"
        fontWeight="black"
        letterSpacing="ls167"
        locator=""
        mobilefontFamily="secondary"
        text=""
        textAlign="left"
      />
      <Styled(View)>
        <Styled(BodyCopy)
          fontFamily="secondary"
          fontSize="fs12"
          fontWeight="black"
          marginTop="10"
          textAlign="left"
        />
      </Styled(View)>
      <Field
        addAddress={[Function]}
        component={[Function]}
        data={
          Array [
            Object {
              "content": Object {
                "addressId": "12345",
                "firstName": "test",
                "lastName": "test",
                "primary": "true",
              },
              "id": "12345",
              "label": "test test (Default)",
              "primary": true,
            },
            Object {
              "content": "",
              "id": "",
              "label": undefined,
              "primary": false,
            },
          ]
        }
        dataLocator="payment-billingaddressdd"
        dropDownStyle={
          Object {
            "borderBottomWidth": 1,
            "height": 30,
            "marginTop": 25,
          }
        }
        id="onFileAddressKey"
        itemStyle={
          Object {
            "height": 90,
          }
        }
        labels={
          Object {
            "common": Object {},
            "paymentGC": Object {},
          }
        }
        name="onFileAddressKey"
        onValueChange={[Function]}
        selectedValue="12345"
        variation="secondary"
      />
      <Styled(View)>
        <Styled(View) />
        <Address
          address={
            Object {
              "addressId": "12345",
              "firstName": "test",
              "lastName": "test",
              "primary": "true",
            }
          }
          customStyle={
            Object {
              "fontSize": "fs14",
              "fontWeight": "regular",
            }
          }
          dataLocatorPrefix="address"
          showCountry={false}
          showDefaultText={false}
          showName={true}
          showPhone={false}
        />
        <Styled(View) />
      </Styled(View)>
    </Styled(View)>
    <Styled(View)>
      <Styled(WithTheme(CustomButton))
        buttonVariation="variable-width"
        fill="BLUE"
        onPress={[MockFunction]}
        style={
          Object {
            "color": "white",
            "fontWeight": "normal",
            "marginTop": 48,
          }
        }
        text="lbl_payment_addCard"
      />
      <Styled(WithTheme(CustomButton))
        buttonVariation="variable-width"
        fill="WHITE"
        style={
          Object {
            "border": 1,
            "color": "black",
            "fontWeight": "normal",
            "marginTop": 15,
          }
        }
      />
    </Styled(View)>
  </Styled(View)>
</ScrollViewMock>
`;

exports[`CreditCardForm component should renders correctly with addressForm 1`] = `
<ScrollViewMock
  addressLabels={Object {}}
  addressList={
    Immutable.List [
      Object {
        "addressId": "12345",
        "firstName": "test",
        "lastName": "test",
        "primary": "true",
      },
    ]
  }
  className=""
  dispatch={[MockFunction]}
  dto={Object {}}
  expMonthOptionsMap={
    Array [
      Object {
        "label": "01 (Jan.)",
        "value": "1",
      },
      Object {
        "label": "02 (Feb.)",
        "value": "2",
      },
      Object {
        "label": "03 (Mar.)",
        "value": "3",
      },
      Object {
        "label": "04 (Apr.)",
        "value": "4",
      },
      Object {
        "label": "05 (May.)",
        "value": "5",
      },
      Object {
        "label": "06 (Jun.)",
        "value": "6",
      },
      Object {
        "label": "07 (Jul.)",
        "value": "7",
      },
      Object {
        "label": "08 (Aug.)",
        "value": "8",
      },
      Object {
        "label": "09 (Sep.)",
        "value": "9",
      },
      Object {
        "label": "10 (Oct.)",
        "value": "10",
      },
      Object {
        "label": "11 (Nov.)",
        "value": "11",
      },
      Object {
        "label": "12 (Dec.)",
        "value": "12",
      },
    ]
  }
  expYearOptionsMap={
    Array [
      Object {
        "label": "2019",
        "value": "2019",
      },
      Object {
        "label": "2020",
        "value": "2020",
      },
      Object {
        "label": "2021",
        "value": "2021",
      },
      Object {
        "label": "2022",
        "value": "2022",
      },
      Object {
        "label": "2023",
        "value": "2023",
      },
      Object {
        "label": "2024",
        "value": "2024",
      },
      Object {
        "label": "2025",
        "value": "2025",
      },
      Object {
        "label": "2026",
        "value": "2026",
      },
      Object {
        "label": "2027",
        "value": "2027",
      },
      Object {
        "label": "2028",
        "value": "2028",
      },
      Object {
        "label": "2029",
        "value": "2029",
      },
    ]
  }
  handleSubmit={[MockFunction]}
  initialValues={Object {}}
  isEdit={false}
  keyboardShouldPersistTaps="handled"
  labels={
    Object {
      "common": Object {},
      "paymentGC": Object {},
    }
  }
  mailingAddress={false}
  onFileAddressKey=""
  pristine={true}
  selectedCard={null}
  showCreditCardFields={true}
  showEmailAddress={true}
  showUserName={true}
  showsVerticalScrollIndicator={false}
  subHeading={null}
>
  <Styled(View)>
    <CreditCardFields
      addressLabels={Object {}}
      addressList={
        Immutable.List [
          Object {
            "addressId": "12345",
            "firstName": "test",
            "lastName": "test",
            "primary": "true",
          },
        ]
      }
      cardType=""
      cardTypeImgUrl=""
      className=""
      dispatch={[MockFunction]}
      dto={Object {}}
      expMonthOptionsMap={
        Array [
          Object {
            "label": "01 (Jan.)",
            "value": "1",
          },
          Object {
            "label": "02 (Feb.)",
            "value": "2",
          },
          Object {
            "label": "03 (Mar.)",
            "value": "3",
          },
          Object {
            "label": "04 (Apr.)",
            "value": "4",
          },
          Object {
            "label": "05 (May.)",
            "value": "5",
          },
          Object {
            "label": "06 (Jun.)",
            "value": "6",
          },
          Object {
            "label": "07 (Jul.)",
            "value": "7",
          },
          Object {
            "label": "08 (Aug.)",
            "value": "8",
          },
          Object {
            "label": "09 (Sep.)",
            "value": "9",
          },
          Object {
            "label": "10 (Oct.)",
            "value": "10",
          },
          Object {
            "label": "11 (Nov.)",
            "value": "11",
          },
          Object {
            "label": "12 (Dec.)",
            "value": "12",
          },
        ]
      }
      expYearOptionsMap={
        Array [
          Object {
            "label": "2019",
            "value": "2019",
          },
          Object {
            "label": "2020",
            "value": "2020",
          },
          Object {
            "label": "2021",
            "value": "2021",
          },
          Object {
            "label": "2022",
            "value": "2022",
          },
          Object {
            "label": "2023",
            "value": "2023",
          },
          Object {
            "label": "2024",
            "value": "2024",
          },
          Object {
            "label": "2025",
            "value": "2025",
          },
          Object {
            "label": "2026",
            "value": "2026",
          },
          Object {
            "label": "2027",
            "value": "2027",
          },
          Object {
            "label": "2028",
            "value": "2028",
          },
          Object {
            "label": "2029",
            "value": "2029",
          },
        ]
      }
      handleSubmit={[MockFunction]}
      initialValues={Object {}}
      isEdit={false}
      isPLCCEnabled={true}
      labels={
        Object {
          "common": Object {},
          "paymentGC": Object {},
        }
      }
      mailingAddress={false}
      onFileAddressKey=""
      pristine={true}
      selectedCard={null}
      showCreditCardFields={true}
      showEmailAddress={true}
      showUserName={true}
      subHeading={null}
      updateExpiryDate={[Function]}
    />
    <Styled(View)>
      <Styled(Heading)
        fontSize="fs14"
        fontWeight="black"
        letterSpacing="ls167"
        locator=""
        mobilefontFamily="secondary"
        text=""
        textAlign="left"
      />
      <Styled(View)>
        <Styled(BodyCopy)
          fontFamily="secondary"
          fontSize="fs12"
          fontWeight="black"
          marginTop="10"
          textAlign="left"
        />
      </Styled(View)>
      <Field
        addAddress={[Function]}
        component={[Function]}
        data={
          Array [
            Object {
              "content": Object {
                "addressId": "12345",
                "firstName": "test",
                "lastName": "test",
                "primary": "true",
              },
              "id": "12345",
              "label": "test test (Default)",
              "primary": true,
            },
            Object {
              "content": "",
              "id": "",
              "label": undefined,
              "primary": false,
            },
          ]
        }
        dataLocator="payment-billingaddressdd"
        dropDownStyle={
          Object {
            "borderBottomWidth": 1,
            "height": 30,
            "marginTop": 25,
          }
        }
        id="onFileAddressKey"
        itemStyle={
          Object {
            "height": 90,
          }
        }
        labels={
          Object {
            "common": Object {},
            "paymentGC": Object {},
          }
        }
        name="onFileAddressKey"
        onValueChange={[Function]}
        variation="secondary"
      />
    </Styled(View)>
    <Styled(View)>
      <Styled(WithTheme(CustomButton))
        buttonVariation="variable-width"
        fill="BLUE"
        onPress={[MockFunction]}
        style={
          Object {
            "color": "white",
            "fontWeight": "normal",
            "marginTop": 48,
          }
        }
        text="lbl_payment_addCard"
      />
      <Styled(WithTheme(CustomButton))
        buttonVariation="variable-width"
        fill="WHITE"
        style={
          Object {
            "border": 1,
            "color": "black",
            "fontWeight": "normal",
            "marginTop": 15,
          }
        }
      />
    </Styled(View)>
  </Styled(View)>
</ScrollViewMock>
`;
