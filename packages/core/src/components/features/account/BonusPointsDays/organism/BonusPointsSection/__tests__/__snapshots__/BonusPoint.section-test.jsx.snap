// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`BonusPointsAvailabilityVanilla should render correctly available_today 1`] = `
<div
  className=""
>
  <Styled(Col)
    className="hide-in-large-up"
    colSize={
      Object {
        "large": 12,
        "medium": 8,
        "small": 6,
      }
    }
    ignoreGutter={
      Object {
        "medium": true,
        "small": true,
      }
    }
  >
    <Styled(CollapsibleContainer)
      body={
        <React.Fragment>
          <ForwardRef
            className="apply-any-day-msg"
            color="text.primary"
            component="p"
            data-locator="place-rewards-heading"
            fontFamily="secondary"
            fontSize={
              Array [
                "fs14",
                "fs10",
                "fs16",
              ]
            }
            fontWeight="extrabold"
            letterSpacing="normal"
            lineHeight="normal"
            textAlign="center"
          >
            
          </ForwardRef>
          <ForwardRef
            className="availability-msg"
            color="text.primary"
            component="p"
            data-locator="place-rewards-heading"
            fontFamily="secondary"
            fontSize={
              Array [
                "fs12",
                "fs12",
                "fs16",
              ]
            }
            fontWeight="regular"
            letterSpacing="normal"
            lineHeight="normal"
            textAlign="center"
          >
            
          </ForwardRef>
          <ForwardRef
            fullBleed={true}
          >
            <ForwardRef
              colSize={
                Object {
                  "large": 12,
                  "medium": 8,
                  "small": 6,
                }
              }
            >
              <ForwardRef
                bonusPoints={
                  Array [
                    Object {
                      "buttonText": undefined,
                      "disabled": false,
                    },
                  ]
                }
                className="availability-msg"
                labels={
                  Object {
                    "common": Object {
                      "lbl_common_details": "",
                    },
                    "myPlaceRewards": Object {
                      "lbl_bonus_points_apply_any_day": "",
                      "lbl_bonus_points_msg": "",
                      "lbl_place_rewards_bonus": "",
                      "lbl_place_rewards_day": "",
                      "lbl_place_rewards_points": "",
                    },
                  }
                }
              />
            </ForwardRef>
          </ForwardRef>
          <ForwardRef
            anchorVariation="primary"
            className="details-link"
            data-locator="my-rewards-tnc"
            fontSizeVariation="medium"
            href="#"
            onClick={[Function]}
            underline={true}
          >
            
          </ForwardRef>
        </React.Fragment>
      }
      className=""
      header={
        <div
          className="elem-mb-SM"
        >
          <ForwardRef
            className="elem-mr-XS"
            color="orange.800"
            component="span"
            data-locator="bonus_points"
            fontFamily="primary"
            fontSize={
              Array [
                "fs16",
                "fs13",
                "fs18",
              ]
            }
            fontWeight="extrabold"
            letterSpacing="normal"
            lineHeight="normal"
            textAlign="left"
          >
            
          </ForwardRef>
          <ForwardRef
            className="elem-mr-XS"
            color="primary.main"
            component="span"
            data-locator="place-rewards-heading"
            fontFamily="primary"
            fontSize={
              Array [
                "fs16",
                "fs13",
                "fs18",
              ]
            }
            fontWeight="extrabold"
            letterSpacing="normal"
            lineHeight="normal"
            textAlign="left"
          >
            
          </ForwardRef>
          <ForwardRef
            className={null}
            color="pink.500"
            component="span"
            data-locator="place-rewards-heading"
            fontFamily="primary"
            fontSize={
              Array [
                "fs16",
                "fs13",
                "fs18",
              ]
            }
            fontWeight="extrabold"
            letterSpacing="normal"
            lineHeight="normal"
            textAlign="left"
          >
            
          </ForwardRef>
        </div>
      }
    />
  </Styled(Col)>
  <div
    className="hide-in-medium-down"
  >
    <div
      className="elem-mb-SM"
    >
      <Styled(BodyCopy)
        className="elem-mr-XS"
        color="orange.800"
        component="span"
        data-locator="bonus_points"
        fontFamily="primary"
        fontSize={
          Array [
            "fs16",
            "fs13",
            "fs18",
          ]
        }
        fontWeight="extrabold"
        letterSpacing="normal"
        lineHeight="normal"
        textAlign="left"
      />
      <Styled(BodyCopy)
        className="elem-mr-XS"
        color="primary.main"
        component="span"
        data-locator="place-rewards-heading"
        fontFamily="primary"
        fontSize={
          Array [
            "fs16",
            "fs13",
            "fs18",
          ]
        }
        fontWeight="extrabold"
        letterSpacing="normal"
        lineHeight="normal"
        textAlign="left"
      />
      <Styled(BodyCopy)
        className={null}
        color="pink.500"
        component="span"
        data-locator="place-rewards-heading"
        fontFamily="primary"
        fontSize={
          Array [
            "fs16",
            "fs13",
            "fs18",
          ]
        }
        fontWeight="extrabold"
        letterSpacing="normal"
        lineHeight="normal"
        textAlign="left"
      />
    </div>
    <Styled(BodyCopy)
      className="apply-any-day-msg"
      color="text.primary"
      component="p"
      data-locator="place-rewards-heading"
      fontFamily="secondary"
      fontSize={
        Array [
          "fs14",
          "fs10",
          "fs16",
        ]
      }
      fontWeight="extrabold"
      letterSpacing="normal"
      lineHeight="normal"
      textAlign="center"
    />
    <Styled(BodyCopy)
      className="availability-msg"
      color="text.primary"
      component="p"
      data-locator="place-rewards-heading"
      fontFamily="secondary"
      fontSize={
        Array [
          "fs12",
          "fs12",
          "fs16",
        ]
      }
      fontWeight="regular"
      letterSpacing="normal"
      lineHeight="normal"
      textAlign="center"
    />
    <Styled(Row)
      fullBleed={true}
    >
      <Styled(Col)
        colSize={
          Object {
            "large": 12,
            "medium": 8,
            "small": 6,
          }
        }
      >
        <Styled(BonusPointsAvailability)
          bonusPoints={
            Array [
              Object {
                "buttonText": undefined,
                "disabled": false,
              },
            ]
          }
          className="availability-msg"
          labels={
            Object {
              "common": Object {
                "lbl_common_details": "",
              },
              "myPlaceRewards": Object {
                "lbl_bonus_points_apply_any_day": "",
                "lbl_bonus_points_msg": "",
                "lbl_place_rewards_bonus": "",
                "lbl_place_rewards_day": "",
                "lbl_place_rewards_points": "",
              },
            }
          }
        />
      </Styled(Col)>
    </Styled(Row)>
    <Styled(Anchor)
      anchorVariation="primary"
      className="details-link"
      data-locator="my-rewards-tnc"
      fontSizeVariation="medium"
      href="#"
      onClick={[Function]}
      underline={true}
    />
  </div>
</div>
`;

exports[`BonusPointsAvailabilityVanilla should render correctly with applied to bag bonus point days 1`] = `
<div
  className=""
>
  <Styled(Col)
    className="hide-in-large-up"
    colSize={
      Object {
        "large": 12,
        "medium": 8,
        "small": 6,
      }
    }
    ignoreGutter={
      Object {
        "medium": true,
        "small": true,
      }
    }
  >
    <Styled(CollapsibleContainer)
      body={
        <React.Fragment>
          <ForwardRef
            className="apply-any-day-msg"
            color="text.primary"
            component="p"
            data-locator="place-rewards-heading"
            fontFamily="secondary"
            fontSize={
              Array [
                "fs14",
                "fs10",
                "fs16",
              ]
            }
            fontWeight="extrabold"
            letterSpacing="normal"
            lineHeight="normal"
            textAlign="center"
          >
            
          </ForwardRef>
          <ForwardRef
            className="availability-msg"
            color="text.primary"
            component="p"
            data-locator="place-rewards-heading"
            fontFamily="secondary"
            fontSize={
              Array [
                "fs12",
                "fs12",
                "fs16",
              ]
            }
            fontWeight="regular"
            letterSpacing="normal"
            lineHeight="normal"
            textAlign="center"
          >
            
          </ForwardRef>
          <ForwardRef
            fullBleed={true}
          >
            <ForwardRef
              colSize={
                Object {
                  "large": 12,
                  "medium": 8,
                  "small": 6,
                }
              }
            >
              <ForwardRef
                bonusPoints={
                  Array [
                    Object {
                      "buttonText": "undefined ",
                      "disabled": true,
                    },
                    Object {
                      "buttonText": undefined,
                      "disabled": false,
                    },
                    Object {
                      "buttonText": undefined,
                      "disabled": true,
                    },
                  ]
                }
                className="availability-msg"
                labels={
                  Object {
                    "common": Object {
                      "lbl_common_details": "",
                    },
                    "myPlaceRewards": Object {
                      "lbl_bonus_points_apply_any_day": "",
                      "lbl_bonus_points_msg": "",
                      "lbl_place_rewards_bonus": "",
                      "lbl_place_rewards_day": "",
                      "lbl_place_rewards_points": "",
                    },
                  }
                }
              />
            </ForwardRef>
          </ForwardRef>
          <ForwardRef
            anchorVariation="primary"
            className="details-link"
            data-locator="my-rewards-tnc"
            fontSizeVariation="medium"
            href="#"
            onClick={[Function]}
            underline={true}
          >
            
          </ForwardRef>
        </React.Fragment>
      }
      className=""
      header={
        <div
          className="elem-mb-SM"
        >
          <ForwardRef
            className="elem-mr-XS"
            color="orange.800"
            component="span"
            data-locator="bonus_points"
            fontFamily="primary"
            fontSize={
              Array [
                "fs16",
                "fs13",
                "fs18",
              ]
            }
            fontWeight="extrabold"
            letterSpacing="normal"
            lineHeight="normal"
            textAlign="left"
          >
            
          </ForwardRef>
          <ForwardRef
            className="elem-mr-XS"
            color="primary.main"
            component="span"
            data-locator="place-rewards-heading"
            fontFamily="primary"
            fontSize={
              Array [
                "fs16",
                "fs13",
                "fs18",
              ]
            }
            fontWeight="extrabold"
            letterSpacing="normal"
            lineHeight="normal"
            textAlign="left"
          >
            
          </ForwardRef>
          <ForwardRef
            className={null}
            color="pink.500"
            component="span"
            data-locator="place-rewards-heading"
            fontFamily="primary"
            fontSize={
              Array [
                "fs16",
                "fs13",
                "fs18",
              ]
            }
            fontWeight="extrabold"
            letterSpacing="normal"
            lineHeight="normal"
            textAlign="left"
          >
            
          </ForwardRef>
        </div>
      }
    />
  </Styled(Col)>
  <div
    className="hide-in-medium-down"
  >
    <div
      className="elem-mb-SM"
    >
      <Styled(BodyCopy)
        className="elem-mr-XS"
        color="orange.800"
        component="span"
        data-locator="bonus_points"
        fontFamily="primary"
        fontSize={
          Array [
            "fs16",
            "fs13",
            "fs18",
          ]
        }
        fontWeight="extrabold"
        letterSpacing="normal"
        lineHeight="normal"
        textAlign="left"
      />
      <Styled(BodyCopy)
        className="elem-mr-XS"
        color="primary.main"
        component="span"
        data-locator="place-rewards-heading"
        fontFamily="primary"
        fontSize={
          Array [
            "fs16",
            "fs13",
            "fs18",
          ]
        }
        fontWeight="extrabold"
        letterSpacing="normal"
        lineHeight="normal"
        textAlign="left"
      />
      <Styled(BodyCopy)
        className={null}
        color="pink.500"
        component="span"
        data-locator="place-rewards-heading"
        fontFamily="primary"
        fontSize={
          Array [
            "fs16",
            "fs13",
            "fs18",
          ]
        }
        fontWeight="extrabold"
        letterSpacing="normal"
        lineHeight="normal"
        textAlign="left"
      />
    </div>
    <Styled(BodyCopy)
      className="apply-any-day-msg"
      color="text.primary"
      component="p"
      data-locator="place-rewards-heading"
      fontFamily="secondary"
      fontSize={
        Array [
          "fs14",
          "fs10",
          "fs16",
        ]
      }
      fontWeight="extrabold"
      letterSpacing="normal"
      lineHeight="normal"
      textAlign="center"
    />
    <Styled(BodyCopy)
      className="availability-msg"
      color="text.primary"
      component="p"
      data-locator="place-rewards-heading"
      fontFamily="secondary"
      fontSize={
        Array [
          "fs12",
          "fs12",
          "fs16",
        ]
      }
      fontWeight="regular"
      letterSpacing="normal"
      lineHeight="normal"
      textAlign="center"
    />
    <Styled(Row)
      fullBleed={true}
    >
      <Styled(Col)
        colSize={
          Object {
            "large": 12,
            "medium": 8,
            "small": 6,
          }
        }
      >
        <Styled(BonusPointsAvailability)
          bonusPoints={
            Array [
              Object {
                "buttonText": "undefined ",
                "disabled": true,
              },
              Object {
                "buttonText": undefined,
                "disabled": false,
              },
              Object {
                "buttonText": undefined,
                "disabled": true,
              },
            ]
          }
          className="availability-msg"
          labels={
            Object {
              "common": Object {
                "lbl_common_details": "",
              },
              "myPlaceRewards": Object {
                "lbl_bonus_points_apply_any_day": "",
                "lbl_bonus_points_msg": "",
                "lbl_place_rewards_bonus": "",
                "lbl_place_rewards_day": "",
                "lbl_place_rewards_points": "",
              },
            }
          }
        />
      </Styled(Col)>
    </Styled(Row)>
    <Styled(Anchor)
      anchorVariation="primary"
      className="details-link"
      data-locator="my-rewards-tnc"
      fontSizeVariation="medium"
      href="#"
      onClick={[Function]}
      underline={true}
    />
  </div>
</div>
`;

exports[`BonusPointsAvailabilityVanilla should render correctly with future Use 1`] = `
<div
  className=""
>
  <Styled(Col)
    className="hide-in-large-up"
    colSize={
      Object {
        "large": 12,
        "medium": 8,
        "small": 6,
      }
    }
    ignoreGutter={
      Object {
        "medium": true,
        "small": true,
      }
    }
  >
    <Styled(CollapsibleContainer)
      body={
        <React.Fragment>
          <ForwardRef
            className="apply-any-day-msg"
            color="text.primary"
            component="p"
            data-locator="place-rewards-heading"
            fontFamily="secondary"
            fontSize={
              Array [
                "fs14",
                "fs10",
                "fs16",
              ]
            }
            fontWeight="extrabold"
            letterSpacing="normal"
            lineHeight="normal"
            textAlign="center"
          >
            
          </ForwardRef>
          <ForwardRef
            className="availability-msg"
            color="text.primary"
            component="p"
            data-locator="place-rewards-heading"
            fontFamily="secondary"
            fontSize={
              Array [
                "fs12",
                "fs12",
                "fs16",
              ]
            }
            fontWeight="regular"
            letterSpacing="normal"
            lineHeight="normal"
            textAlign="center"
          >
            
          </ForwardRef>
          <ForwardRef
            fullBleed={true}
          >
            <ForwardRef
              colSize={
                Object {
                  "large": 12,
                  "medium": 8,
                  "small": 6,
                }
              }
            >
              <ForwardRef
                bonusPoints={
                  Array [
                    Object {
                      "buttonText": "undefined ",
                      "disabled": true,
                    },
                    Object {
                      "buttonText": undefined,
                      "disabled": false,
                    },
                    Object {
                      "buttonText": undefined,
                      "disabled": true,
                    },
                  ]
                }
                className="availability-msg"
                labels={
                  Object {
                    "common": Object {
                      "lbl_common_details": "",
                    },
                    "myPlaceRewards": Object {
                      "lbl_bonus_points_apply_any_day": "",
                      "lbl_bonus_points_msg": "",
                      "lbl_place_rewards_bonus": "",
                      "lbl_place_rewards_day": "",
                      "lbl_place_rewards_points": "",
                    },
                  }
                }
              />
            </ForwardRef>
          </ForwardRef>
          <ForwardRef
            anchorVariation="primary"
            className="details-link"
            data-locator="my-rewards-tnc"
            fontSizeVariation="medium"
            href="#"
            onClick={[Function]}
            underline={true}
          >
            
          </ForwardRef>
        </React.Fragment>
      }
      className=""
      header={
        <div
          className="elem-mb-SM"
        >
          <ForwardRef
            className="elem-mr-XS"
            color="orange.800"
            component="span"
            data-locator="bonus_points"
            fontFamily="primary"
            fontSize={
              Array [
                "fs16",
                "fs13",
                "fs18",
              ]
            }
            fontWeight="extrabold"
            letterSpacing="normal"
            lineHeight="normal"
            textAlign="left"
          >
            
          </ForwardRef>
          <ForwardRef
            className="elem-mr-XS"
            color="primary.main"
            component="span"
            data-locator="place-rewards-heading"
            fontFamily="primary"
            fontSize={
              Array [
                "fs16",
                "fs13",
                "fs18",
              ]
            }
            fontWeight="extrabold"
            letterSpacing="normal"
            lineHeight="normal"
            textAlign="left"
          >
            
          </ForwardRef>
          <ForwardRef
            className={null}
            color="pink.500"
            component="span"
            data-locator="place-rewards-heading"
            fontFamily="primary"
            fontSize={
              Array [
                "fs16",
                "fs13",
                "fs18",
              ]
            }
            fontWeight="extrabold"
            letterSpacing="normal"
            lineHeight="normal"
            textAlign="left"
          >
            
          </ForwardRef>
        </div>
      }
    />
  </Styled(Col)>
  <div
    className="hide-in-medium-down"
  >
    <div
      className="elem-mb-SM"
    >
      <Styled(BodyCopy)
        className="elem-mr-XS"
        color="orange.800"
        component="span"
        data-locator="bonus_points"
        fontFamily="primary"
        fontSize={
          Array [
            "fs16",
            "fs13",
            "fs18",
          ]
        }
        fontWeight="extrabold"
        letterSpacing="normal"
        lineHeight="normal"
        textAlign="left"
      />
      <Styled(BodyCopy)
        className="elem-mr-XS"
        color="primary.main"
        component="span"
        data-locator="place-rewards-heading"
        fontFamily="primary"
        fontSize={
          Array [
            "fs16",
            "fs13",
            "fs18",
          ]
        }
        fontWeight="extrabold"
        letterSpacing="normal"
        lineHeight="normal"
        textAlign="left"
      />
      <Styled(BodyCopy)
        className={null}
        color="pink.500"
        component="span"
        data-locator="place-rewards-heading"
        fontFamily="primary"
        fontSize={
          Array [
            "fs16",
            "fs13",
            "fs18",
          ]
        }
        fontWeight="extrabold"
        letterSpacing="normal"
        lineHeight="normal"
        textAlign="left"
      />
    </div>
    <Styled(BodyCopy)
      className="apply-any-day-msg"
      color="text.primary"
      component="p"
      data-locator="place-rewards-heading"
      fontFamily="secondary"
      fontSize={
        Array [
          "fs14",
          "fs10",
          "fs16",
        ]
      }
      fontWeight="extrabold"
      letterSpacing="normal"
      lineHeight="normal"
      textAlign="center"
    />
    <Styled(BodyCopy)
      className="availability-msg"
      color="text.primary"
      component="p"
      data-locator="place-rewards-heading"
      fontFamily="secondary"
      fontSize={
        Array [
          "fs12",
          "fs12",
          "fs16",
        ]
      }
      fontWeight="regular"
      letterSpacing="normal"
      lineHeight="normal"
      textAlign="center"
    />
    <Styled(Row)
      fullBleed={true}
    >
      <Styled(Col)
        colSize={
          Object {
            "large": 12,
            "medium": 8,
            "small": 6,
          }
        }
      >
        <Styled(BonusPointsAvailability)
          bonusPoints={
            Array [
              Object {
                "buttonText": "undefined ",
                "disabled": true,
              },
              Object {
                "buttonText": undefined,
                "disabled": false,
              },
              Object {
                "buttonText": undefined,
                "disabled": true,
              },
            ]
          }
          className="availability-msg"
          labels={
            Object {
              "common": Object {
                "lbl_common_details": "",
              },
              "myPlaceRewards": Object {
                "lbl_bonus_points_apply_any_day": "",
                "lbl_bonus_points_msg": "",
                "lbl_place_rewards_bonus": "",
                "lbl_place_rewards_day": "",
                "lbl_place_rewards_points": "",
              },
            }
          }
        />
      </Styled(Col)>
    </Styled(Row)>
    <Styled(Anchor)
      anchorVariation="primary"
      className="details-link"
      data-locator="my-rewards-tnc"
      fontSizeVariation="medium"
      href="#"
      onClick={[Function]}
      underline={true}
    />
  </div>
</div>
`;

exports[`BonusPointsAvailabilityVanilla should render correctly with futureDisabled 1`] = `
<div
  className=""
>
  <Styled(Col)
    className="hide-in-large-up"
    colSize={
      Object {
        "large": 12,
        "medium": 8,
        "small": 6,
      }
    }
    ignoreGutter={
      Object {
        "medium": true,
        "small": true,
      }
    }
  >
    <Styled(CollapsibleContainer)
      body={
        <React.Fragment>
          <ForwardRef
            className="apply-any-day-msg"
            color="text.primary"
            component="p"
            data-locator="place-rewards-heading"
            fontFamily="secondary"
            fontSize={
              Array [
                "fs14",
                "fs10",
                "fs16",
              ]
            }
            fontWeight="extrabold"
            letterSpacing="normal"
            lineHeight="normal"
            textAlign="center"
          >
            
          </ForwardRef>
          <ForwardRef
            className="availability-msg"
            color="text.primary"
            component="p"
            data-locator="place-rewards-heading"
            fontFamily="secondary"
            fontSize={
              Array [
                "fs12",
                "fs12",
                "fs16",
              ]
            }
            fontWeight="regular"
            letterSpacing="normal"
            lineHeight="normal"
            textAlign="center"
          >
            
          </ForwardRef>
          <ForwardRef
            fullBleed={true}
          >
            <ForwardRef
              colSize={
                Object {
                  "large": 12,
                  "medium": 8,
                  "small": 6,
                }
              }
            >
              <ForwardRef
                bonusPoints={
                  Array [
                    Object {
                      "buttonText": "undefined 15/7",
                      "disabled": true,
                    },
                    Object {
                      "buttonText": undefined,
                      "disabled": false,
                    },
                    Object {
                      "buttonText": undefined,
                      "disabled": true,
                    },
                  ]
                }
                className="availability-msg"
                labels={
                  Object {
                    "common": Object {
                      "lbl_common_details": "",
                    },
                    "myPlaceRewards": Object {
                      "lbl_bonus_points_apply_any_day": "",
                      "lbl_bonus_points_msg": "",
                      "lbl_place_rewards_bonus": "",
                      "lbl_place_rewards_day": "",
                      "lbl_place_rewards_points": "",
                    },
                  }
                }
              />
            </ForwardRef>
          </ForwardRef>
          <ForwardRef
            anchorVariation="primary"
            className="details-link"
            data-locator="my-rewards-tnc"
            fontSizeVariation="medium"
            href="#"
            onClick={[Function]}
            underline={true}
          >
            
          </ForwardRef>
        </React.Fragment>
      }
      className=""
      header={
        <div
          className="elem-mb-SM"
        >
          <ForwardRef
            className="elem-mr-XS"
            color="orange.800"
            component="span"
            data-locator="bonus_points"
            fontFamily="primary"
            fontSize={
              Array [
                "fs16",
                "fs13",
                "fs18",
              ]
            }
            fontWeight="extrabold"
            letterSpacing="normal"
            lineHeight="normal"
            textAlign="left"
          >
            
          </ForwardRef>
          <ForwardRef
            className="elem-mr-XS"
            color="primary.main"
            component="span"
            data-locator="place-rewards-heading"
            fontFamily="primary"
            fontSize={
              Array [
                "fs16",
                "fs13",
                "fs18",
              ]
            }
            fontWeight="extrabold"
            letterSpacing="normal"
            lineHeight="normal"
            textAlign="left"
          >
            
          </ForwardRef>
          <ForwardRef
            className={null}
            color="pink.500"
            component="span"
            data-locator="place-rewards-heading"
            fontFamily="primary"
            fontSize={
              Array [
                "fs16",
                "fs13",
                "fs18",
              ]
            }
            fontWeight="extrabold"
            letterSpacing="normal"
            lineHeight="normal"
            textAlign="left"
          >
            
          </ForwardRef>
        </div>
      }
    />
  </Styled(Col)>
  <div
    className="hide-in-medium-down"
  >
    <div
      className="elem-mb-SM"
    >
      <Styled(BodyCopy)
        className="elem-mr-XS"
        color="orange.800"
        component="span"
        data-locator="bonus_points"
        fontFamily="primary"
        fontSize={
          Array [
            "fs16",
            "fs13",
            "fs18",
          ]
        }
        fontWeight="extrabold"
        letterSpacing="normal"
        lineHeight="normal"
        textAlign="left"
      />
      <Styled(BodyCopy)
        className="elem-mr-XS"
        color="primary.main"
        component="span"
        data-locator="place-rewards-heading"
        fontFamily="primary"
        fontSize={
          Array [
            "fs16",
            "fs13",
            "fs18",
          ]
        }
        fontWeight="extrabold"
        letterSpacing="normal"
        lineHeight="normal"
        textAlign="left"
      />
      <Styled(BodyCopy)
        className={null}
        color="pink.500"
        component="span"
        data-locator="place-rewards-heading"
        fontFamily="primary"
        fontSize={
          Array [
            "fs16",
            "fs13",
            "fs18",
          ]
        }
        fontWeight="extrabold"
        letterSpacing="normal"
        lineHeight="normal"
        textAlign="left"
      />
    </div>
    <Styled(BodyCopy)
      className="apply-any-day-msg"
      color="text.primary"
      component="p"
      data-locator="place-rewards-heading"
      fontFamily="secondary"
      fontSize={
        Array [
          "fs14",
          "fs10",
          "fs16",
        ]
      }
      fontWeight="extrabold"
      letterSpacing="normal"
      lineHeight="normal"
      textAlign="center"
    />
    <Styled(BodyCopy)
      className="availability-msg"
      color="text.primary"
      component="p"
      data-locator="place-rewards-heading"
      fontFamily="secondary"
      fontSize={
        Array [
          "fs12",
          "fs12",
          "fs16",
        ]
      }
      fontWeight="regular"
      letterSpacing="normal"
      lineHeight="normal"
      textAlign="center"
    />
    <Styled(Row)
      fullBleed={true}
    >
      <Styled(Col)
        colSize={
          Object {
            "large": 12,
            "medium": 8,
            "small": 6,
          }
        }
      >
        <Styled(BonusPointsAvailability)
          bonusPoints={
            Array [
              Object {
                "buttonText": "undefined 15/7",
                "disabled": true,
              },
              Object {
                "buttonText": undefined,
                "disabled": false,
              },
              Object {
                "buttonText": undefined,
                "disabled": true,
              },
            ]
          }
          className="availability-msg"
          labels={
            Object {
              "common": Object {
                "lbl_common_details": "",
              },
              "myPlaceRewards": Object {
                "lbl_bonus_points_apply_any_day": "",
                "lbl_bonus_points_msg": "",
                "lbl_place_rewards_bonus": "",
                "lbl_place_rewards_day": "",
                "lbl_place_rewards_points": "",
              },
            }
          }
        />
      </Styled(Col)>
    </Styled(Row)>
    <Styled(Anchor)
      anchorVariation="primary"
      className="details-link"
      data-locator="my-rewards-tnc"
      fontSizeVariation="medium"
      href="#"
      onClick={[Function]}
      underline={true}
    />
  </div>
</div>
`;

exports[`BonusPointsAvailabilityVanilla should render correctly with isUsed 1`] = `
<div
  className=""
>
  <Styled(Col)
    className="hide-in-large-up"
    colSize={
      Object {
        "large": 12,
        "medium": 8,
        "small": 6,
      }
    }
    ignoreGutter={
      Object {
        "medium": true,
        "small": true,
      }
    }
  >
    <Styled(CollapsibleContainer)
      body={
        <React.Fragment>
          <ForwardRef
            className="apply-any-day-msg"
            color="text.primary"
            component="p"
            data-locator="place-rewards-heading"
            fontFamily="secondary"
            fontSize={
              Array [
                "fs14",
                "fs10",
                "fs16",
              ]
            }
            fontWeight="extrabold"
            letterSpacing="normal"
            lineHeight="normal"
            textAlign="center"
          >
            
          </ForwardRef>
          <ForwardRef
            className="availability-msg"
            color="text.primary"
            component="p"
            data-locator="place-rewards-heading"
            fontFamily="secondary"
            fontSize={
              Array [
                "fs12",
                "fs12",
                "fs16",
              ]
            }
            fontWeight="regular"
            letterSpacing="normal"
            lineHeight="normal"
            textAlign="center"
          >
            
          </ForwardRef>
          <ForwardRef
            fullBleed={true}
          >
            <ForwardRef
              colSize={
                Object {
                  "large": 12,
                  "medium": 8,
                  "small": 6,
                }
              }
            >
              <ForwardRef
                bonusPoints={
                  Array [
                    Object {
                      "buttonText": "undefined ",
                      "disabled": true,
                    },
                  ]
                }
                className="availability-msg"
                labels={
                  Object {
                    "common": Object {
                      "lbl_common_details": "",
                    },
                    "myPlaceRewards": Object {
                      "lbl_bonus_points_apply_any_day": "",
                      "lbl_bonus_points_msg": "",
                      "lbl_place_rewards_bonus": "",
                      "lbl_place_rewards_day": "",
                      "lbl_place_rewards_points": "",
                    },
                  }
                }
              />
            </ForwardRef>
          </ForwardRef>
          <ForwardRef
            anchorVariation="primary"
            className="details-link"
            data-locator="my-rewards-tnc"
            fontSizeVariation="medium"
            href="#"
            onClick={[Function]}
            underline={true}
          >
            
          </ForwardRef>
        </React.Fragment>
      }
      className=""
      header={
        <div
          className="elem-mb-SM"
        >
          <ForwardRef
            className="elem-mr-XS"
            color="orange.800"
            component="span"
            data-locator="bonus_points"
            fontFamily="primary"
            fontSize={
              Array [
                "fs16",
                "fs13",
                "fs18",
              ]
            }
            fontWeight="extrabold"
            letterSpacing="normal"
            lineHeight="normal"
            textAlign="left"
          >
            
          </ForwardRef>
          <ForwardRef
            className="elem-mr-XS"
            color="primary.main"
            component="span"
            data-locator="place-rewards-heading"
            fontFamily="primary"
            fontSize={
              Array [
                "fs16",
                "fs13",
                "fs18",
              ]
            }
            fontWeight="extrabold"
            letterSpacing="normal"
            lineHeight="normal"
            textAlign="left"
          >
            
          </ForwardRef>
          <ForwardRef
            className={null}
            color="pink.500"
            component="span"
            data-locator="place-rewards-heading"
            fontFamily="primary"
            fontSize={
              Array [
                "fs16",
                "fs13",
                "fs18",
              ]
            }
            fontWeight="extrabold"
            letterSpacing="normal"
            lineHeight="normal"
            textAlign="left"
          >
            
          </ForwardRef>
        </div>
      }
    />
  </Styled(Col)>
  <div
    className="hide-in-medium-down"
  >
    <div
      className="elem-mb-SM"
    >
      <Styled(BodyCopy)
        className="elem-mr-XS"
        color="orange.800"
        component="span"
        data-locator="bonus_points"
        fontFamily="primary"
        fontSize={
          Array [
            "fs16",
            "fs13",
            "fs18",
          ]
        }
        fontWeight="extrabold"
        letterSpacing="normal"
        lineHeight="normal"
        textAlign="left"
      />
      <Styled(BodyCopy)
        className="elem-mr-XS"
        color="primary.main"
        component="span"
        data-locator="place-rewards-heading"
        fontFamily="primary"
        fontSize={
          Array [
            "fs16",
            "fs13",
            "fs18",
          ]
        }
        fontWeight="extrabold"
        letterSpacing="normal"
        lineHeight="normal"
        textAlign="left"
      />
      <Styled(BodyCopy)
        className={null}
        color="pink.500"
        component="span"
        data-locator="place-rewards-heading"
        fontFamily="primary"
        fontSize={
          Array [
            "fs16",
            "fs13",
            "fs18",
          ]
        }
        fontWeight="extrabold"
        letterSpacing="normal"
        lineHeight="normal"
        textAlign="left"
      />
    </div>
    <Styled(BodyCopy)
      className="apply-any-day-msg"
      color="text.primary"
      component="p"
      data-locator="place-rewards-heading"
      fontFamily="secondary"
      fontSize={
        Array [
          "fs14",
          "fs10",
          "fs16",
        ]
      }
      fontWeight="extrabold"
      letterSpacing="normal"
      lineHeight="normal"
      textAlign="center"
    />
    <Styled(BodyCopy)
      className="availability-msg"
      color="text.primary"
      component="p"
      data-locator="place-rewards-heading"
      fontFamily="secondary"
      fontSize={
        Array [
          "fs12",
          "fs12",
          "fs16",
        ]
      }
      fontWeight="regular"
      letterSpacing="normal"
      lineHeight="normal"
      textAlign="center"
    />
    <Styled(Row)
      fullBleed={true}
    >
      <Styled(Col)
        colSize={
          Object {
            "large": 12,
            "medium": 8,
            "small": 6,
          }
        }
      >
        <Styled(BonusPointsAvailability)
          bonusPoints={
            Array [
              Object {
                "buttonText": "undefined ",
                "disabled": true,
              },
            ]
          }
          className="availability-msg"
          labels={
            Object {
              "common": Object {
                "lbl_common_details": "",
              },
              "myPlaceRewards": Object {
                "lbl_bonus_points_apply_any_day": "",
                "lbl_bonus_points_msg": "",
                "lbl_place_rewards_bonus": "",
                "lbl_place_rewards_day": "",
                "lbl_place_rewards_points": "",
              },
            }
          }
        />
      </Styled(Col)>
    </Styled(Row)>
    <Styled(Anchor)
      anchorVariation="primary"
      className="details-link"
      data-locator="my-rewards-tnc"
      fontSizeVariation="medium"
      href="#"
      onClick={[Function]}
      underline={true}
    />
  </div>
</div>
`;
