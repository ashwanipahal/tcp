// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Add gift card form component render error message 1`] = `
<ScrollViewMock
  addGiftCardError={true}
  addGiftCardResponse="foo"
  change={[MockFunction]}
  goBackToPayment={[MockFunction]}
  handleSubmit={
    [MockFunction] {
      "calls": Array [
        Array [
          [Function],
        ],
        Array [
          [Function],
        ],
        Array [
          [Function],
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
        Object {
          "type": "return",
          "value": undefined,
        },
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  keyboardShouldPersistTaps="handled"
  labels={
    Object {
      "common": Object {},
      "paymentGC": Object {},
    }
  }
  onAddGiftCardClick={[MockFunction]}
  onClearError={[MockFunction]}
  showsVerticalScrollIndicator={false}
  toggleModal={[Function]}
  untouch={[MockFunction]}
>
  <View>
    <Styled(View)>
      <Styled(BodyCopy)
        color="error"
        fontSize="fs12"
        fontWeight="semibold"
        mobileFontFamily={
          Array [
            "secondary",
          ]
        }
        text="foo"
      />
    </Styled(View)>
    <Field
      component={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "_foldedDefaultProps": Object {
            "ariaLabel": "input",
            "dataLocator": "input-field",
            "enableSuccessCheck": false,
            "id": "input",
            "keyboardType": "default",
            "label": "input",
            "marginBottom": true,
            "meta": Object {
              "error": "",
              "touched": "",
            },
            "onChangeText": [Function],
            "secureTextEntry": false,
            "showErrorIcon": true,
            "showSuccessCheck": false,
            "successText": "",
            "type": "text",
          },
          "attrs": Array [],
          "displayName": "Styled(TextBox)",
          "inlineStyle": InlineStyle {
            "rules": Array [
              "
    ",
              "
  ",
              [Function],
              ";
",
              ";
  ",
            ],
          },
          "render": [Function],
          "styledComponentId": "StyledNativeComponent",
          "target": [Function],
          "withComponent": [Function],
        }
      }
      dataLocator="gift-card-cardnaumberfield"
      name="giftCardNumber"
      onChange={[Function]}
      type="tel"
    />
    <Field
      component={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "_foldedDefaultProps": Object {
            "ariaLabel": "input",
            "dataLocator": "input-field",
            "enableSuccessCheck": false,
            "id": "input",
            "keyboardType": "default",
            "label": "input",
            "marginBottom": true,
            "meta": Object {
              "error": "",
              "touched": "",
            },
            "onChangeText": [Function],
            "secureTextEntry": false,
            "showErrorIcon": true,
            "showSuccessCheck": false,
            "successText": "",
            "type": "text",
          },
          "attrs": Array [],
          "displayName": "Styled(TextBox)",
          "inlineStyle": InlineStyle {
            "rules": Array [
              "
    ",
              "
  ",
              [Function],
              ";
",
              ";
  ",
            ],
          },
          "render": [Function],
          "styledComponentId": "StyledNativeComponent",
          "target": [Function],
          "withComponent": [Function],
        }
      }
      dataLocator="gift-card-pinnumberfield"
      name="cardPin"
      onChange={[Function]}
      type="tel"
    />
    <View>
      <Styled(View)>
        <Recaptcha
          onMessage={[Function]}
          siteKey="6LdYiRsTAAAAAHF4Yntsq8mPdWgHaTTFHsk8rax8"
          style={Object {}}
          url="https://www.childrensplace.com"
        />
      </Styled(View)>
      <Field
        className="visibility-recaptcha"
        component={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "_foldedDefaultProps": Object {
              "ariaLabel": "input",
              "dataLocator": "input-field",
              "enableSuccessCheck": false,
              "id": "input",
              "keyboardType": "default",
              "label": "input",
              "marginBottom": true,
              "meta": Object {
                "error": "",
                "touched": "",
              },
              "onChangeText": [Function],
              "secureTextEntry": false,
              "showErrorIcon": true,
              "showSuccessCheck": false,
              "successText": "",
              "type": "text",
            },
            "attrs": Array [],
            "displayName": "Styled(TextBox)",
            "inlineStyle": InlineStyle {
              "rules": Array [
                "
    ",
                "
  ",
                [Function],
                ";
",
                ";
  ",
              ],
            },
            "render": [Function],
            "styledComponentId": "StyledNativeComponent",
            "target": [Function],
            "withComponent": [Function],
          }
        }
        data-locator="gift-card-recaptchcb"
        id="recaptchaToken"
        label=""
        name="recaptchaToken"
        title=""
        type="hidden"
      />
    </View>
    <Styled(View)>
      <Styled(BodyCopy)
        color="gray.900"
        fontFamily="secondary"
        fontSize="fs14"
      />
      <Styled(Text)>
        <Styled(BodyCopy)
          color="black"
          fontFamily="secondary"
          fontSize="fs12"
          fontWeight="regular"
        />
      </Styled(Text)>
    </Styled(View)>
    <Styled(View)>
      <Styled(WithTheme(CustomButton))
        buttonVariation="variable-width"
        color="white"
        data-locator="gift-card-addcardbtn"
        fill="BLUE"
      />
    </Styled(View)>
    <Styled(View)>
      <Styled(WithTheme(CustomButton))
        buttonVariation="variable-width"
        color="black"
        data-locator="gift-card-cancelbtn"
        onPress={[Function]}
      />
    </Styled(View)>
  </View>
</ScrollViewMock>
`;

exports[`Add gift card form component should render component correctly 1`] = `
<ScrollViewMock
  addGiftCardError={true}
  addGiftCardResponse={null}
  change={[MockFunction]}
  goBackToPayment={[MockFunction]}
  handleSubmit={
    [MockFunction] {
      "calls": Array [
        Array [
          [Function],
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  keyboardShouldPersistTaps="handled"
  labels={
    Object {
      "common": Object {},
      "paymentGC": Object {},
    }
  }
  onAddGiftCardClick={[MockFunction]}
  onClearError={[MockFunction]}
  showsVerticalScrollIndicator={false}
  toggleModal={[Function]}
  untouch={[MockFunction]}
>
  <View>
    <Field
      component={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "_foldedDefaultProps": Object {
            "ariaLabel": "input",
            "dataLocator": "input-field",
            "enableSuccessCheck": false,
            "id": "input",
            "keyboardType": "default",
            "label": "input",
            "marginBottom": true,
            "meta": Object {
              "error": "",
              "touched": "",
            },
            "onChangeText": [Function],
            "secureTextEntry": false,
            "showErrorIcon": true,
            "showSuccessCheck": false,
            "successText": "",
            "type": "text",
          },
          "attrs": Array [],
          "displayName": "Styled(TextBox)",
          "inlineStyle": InlineStyle {
            "rules": Array [
              "
    ",
              "
  ",
              [Function],
              ";
",
              ";
  ",
            ],
          },
          "render": [Function],
          "styledComponentId": "StyledNativeComponent",
          "target": [Function],
          "withComponent": [Function],
        }
      }
      dataLocator="gift-card-cardnaumberfield"
      name="giftCardNumber"
      onChange={[Function]}
      type="tel"
    />
    <Field
      component={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "_foldedDefaultProps": Object {
            "ariaLabel": "input",
            "dataLocator": "input-field",
            "enableSuccessCheck": false,
            "id": "input",
            "keyboardType": "default",
            "label": "input",
            "marginBottom": true,
            "meta": Object {
              "error": "",
              "touched": "",
            },
            "onChangeText": [Function],
            "secureTextEntry": false,
            "showErrorIcon": true,
            "showSuccessCheck": false,
            "successText": "",
            "type": "text",
          },
          "attrs": Array [],
          "displayName": "Styled(TextBox)",
          "inlineStyle": InlineStyle {
            "rules": Array [
              "
    ",
              "
  ",
              [Function],
              ";
",
              ";
  ",
            ],
          },
          "render": [Function],
          "styledComponentId": "StyledNativeComponent",
          "target": [Function],
          "withComponent": [Function],
        }
      }
      dataLocator="gift-card-pinnumberfield"
      name="cardPin"
      onChange={[Function]}
      type="tel"
    />
    <View>
      <Styled(View)>
        <Recaptcha
          onMessage={[Function]}
          siteKey="6LdYiRsTAAAAAHF4Yntsq8mPdWgHaTTFHsk8rax8"
          style={Object {}}
          url="https://www.childrensplace.com"
        />
      </Styled(View)>
      <Field
        className="visibility-recaptcha"
        component={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "_foldedDefaultProps": Object {
              "ariaLabel": "input",
              "dataLocator": "input-field",
              "enableSuccessCheck": false,
              "id": "input",
              "keyboardType": "default",
              "label": "input",
              "marginBottom": true,
              "meta": Object {
                "error": "",
                "touched": "",
              },
              "onChangeText": [Function],
              "secureTextEntry": false,
              "showErrorIcon": true,
              "showSuccessCheck": false,
              "successText": "",
              "type": "text",
            },
            "attrs": Array [],
            "displayName": "Styled(TextBox)",
            "inlineStyle": InlineStyle {
              "rules": Array [
                "
    ",
                "
  ",
                [Function],
                ";
",
                ";
  ",
              ],
            },
            "render": [Function],
            "styledComponentId": "StyledNativeComponent",
            "target": [Function],
            "withComponent": [Function],
          }
        }
        data-locator="gift-card-recaptchcb"
        id="recaptchaToken"
        label=""
        name="recaptchaToken"
        title=""
        type="hidden"
      />
    </View>
    <Styled(View)>
      <Styled(BodyCopy)
        color="gray.900"
        fontFamily="secondary"
        fontSize="fs14"
      />
      <Styled(Text)>
        <Styled(BodyCopy)
          color="black"
          fontFamily="secondary"
          fontSize="fs12"
          fontWeight="regular"
        />
      </Styled(Text)>
    </Styled(View)>
    <Styled(View)>
      <Styled(WithTheme(CustomButton))
        buttonVariation="variable-width"
        color="white"
        data-locator="gift-card-addcardbtn"
        fill="BLUE"
      />
    </Styled(View)>
    <Styled(View)>
      <Styled(WithTheme(CustomButton))
        buttonVariation="variable-width"
        color="black"
        data-locator="gift-card-cancelbtn"
        onPress={[Function]}
      />
    </Styled(View)>
  </View>
</ScrollViewMock>
`;
