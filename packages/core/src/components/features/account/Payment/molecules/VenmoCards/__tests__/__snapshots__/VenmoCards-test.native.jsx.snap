// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`VenmoCardList Component should render correctly 1`] = `
<View
  className="abc"
  labels={
    Object {
      "common": Object {},
      "paymentGC": Object {},
    }
  }
  setSelectedCard={[Function]}
  toggleModal={[Function]}
  venmoCardList={Immutable.List []}
>
  <Styled(Text)>
    lbl_payment_venmoHeading
  </Styled(Text)>
</View>
`;

exports[`VenmoCardList Component should render correctly if list is present 1`] = `
<View
  className="abc"
  labels={
    Object {
      "common": Object {},
      "paymentGC": Object {},
    }
  }
  setSelectedCard={[Function]}
  toggleModal={[Function]}
  venmoCardList={
    Immutable.List [
      Object {
        "accountNo": "",
        "addressDetails": null,
        "billingAddressId": null,
        "ccBrand": "VENMO",
        "ccType": "VENMO",
        "creditCardId": 74530,
        "defaultInd": false,
        "expMonth": "11",
        "expYear": "2037",
        "nameOnAccount": ".",
        "properties": Object {
          "venmoUserId": "Testaccount1",
        },
      },
    ]
  }
>
  <Styled(Text)>
    lbl_payment_venmoHeading
  </Styled(Text)>
  <ReduxForm
    card={
      Object {
        "accountNo": "",
        "addressDetails": null,
        "billingAddressId": null,
        "ccBrand": "VENMO",
        "ccType": "VENMO",
        "creditCardId": 74530,
        "defaultInd": false,
        "expMonth": "11",
        "expYear": "2037",
        "nameOnAccount": ".",
        "properties": Object {
          "venmoUserId": "Testaccount1",
        },
      }
    }
    destroyOnUnmount={true}
    enableReinitialize={true}
    forceUnregisterOnUnmount={false}
    form="CardTileForm"
    getFormState={[Function]}
    keepDirtyOnReinitialize={false}
    labels={
      Object {
        "common": Object {},
        "paymentGC": Object {},
      }
    }
    persistentSubmitErrors={false}
    pure={true}
    setSelectedCard={[Function]}
    shouldAsyncValidate={[Function]}
    shouldError={[Function]}
    shouldValidate={[Function]}
    shouldWarn={[Function]}
    submitAsSideEffect={false}
    toggleModal={[Function]}
    touchOnBlur={true}
    touchOnChange={false}
    updateUnregisteredFields={false}
    validate={[Function]}
  />
</View>
`;
