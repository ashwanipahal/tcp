// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ChangePasswordForm component should renders correctly in initial state 1`] = `
<form
  className=""
  name="ChangePasswordForm"
  noValidate={true}
>
  <Styled(BodyCopy)
    className="elem-mt-LRG"
    color="text.primary"
    component="div"
    fontFamily="primary"
    fontSize={12}
    fontWeight="regular"
    letterSpacing="normal"
    lineHeight="normal"
    link={null}
    textAlign="left"
  >
    <Styled(Row)
      fullBleed={true}
    >
      <Styled(Col)
        colSize={
          Object {
            "large": 5,
            "medium": 4,
            "small": 6,
          }
        }
      >
        <Field
          className="elem-mb-SM"
          component={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-kpOJdX",
                "isStatic": false,
                "rules": Array [
                  "
  ",
                  "
  position: relative;

  .rightAlignedContent {
    position: absolute;
    right: 0;
    top: ",
                  [Function],
                  ";
    width: 30px;

    a {
      display: block;
    }

    .tooltip-bubble {
      li {
        text-align: left;
      }

      @media ",
                  [Function],
                  " {
        min-width: 350px;
      }
    }

    .tooltip-bubble li:before {
      content: '-';
      text-indent: -5px;
    }

    .tooltip {
      width: 10px;
      height: 10px;
    }
  }
  .show-hide-password {
    background: ",
                  [Function],
                  ";
  }
",
                  ";
",
                ],
              },
              "displayName": "Styled(PasswordField)",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-kpOJdX",
              "target": [Function],
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          dataLocator="currentPasswordtxtfield"
          enableSuccessCheck={false}
          id="currentPassword"
          name="currentPassword"
          placeholder="lbl_changePassword_current_password"
          showSuccessCheck={false}
        />
        <Field
          className="elem-mb-SM"
          component={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-kpOJdX",
                "isStatic": false,
                "rules": Array [
                  "
  ",
                  "
  position: relative;

  .rightAlignedContent {
    position: absolute;
    right: 0;
    top: ",
                  [Function],
                  ";
    width: 30px;

    a {
      display: block;
    }

    .tooltip-bubble {
      li {
        text-align: left;
      }

      @media ",
                  [Function],
                  " {
        min-width: 350px;
      }
    }

    .tooltip-bubble li:before {
      content: '-';
      text-indent: -5px;
    }

    .tooltip {
      width: 10px;
      height: 10px;
    }
  }
  .show-hide-password {
    background: ",
                  [Function],
                  ";
  }
",
                  ";
",
                ],
              },
              "displayName": "Styled(PasswordField)",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-kpOJdX",
              "target": [Function],
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          dataLocator="newPasswordtxtfield"
          enableSuccessCheck={false}
          id="password"
          name="password"
          placeholder="lbl_changePassword_new_password"
          showSuccessCheck={false}
          tooltipContent={
            <PasswordRequirement
              labels={Object {}}
            />
          }
        />
        <Field
          className="elem-mb-SM"
          component={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-kpOJdX",
                "isStatic": false,
                "rules": Array [
                  "
  ",
                  "
  position: relative;

  .rightAlignedContent {
    position: absolute;
    right: 0;
    top: ",
                  [Function],
                  ";
    width: 30px;

    a {
      display: block;
    }

    .tooltip-bubble {
      li {
        text-align: left;
      }

      @media ",
                  [Function],
                  " {
        min-width: 350px;
      }
    }

    .tooltip-bubble li:before {
      content: '-';
      text-indent: -5px;
    }

    .tooltip {
      width: 10px;
      height: 10px;
    }
  }
  .show-hide-password {
    background: ",
                  [Function],
                  ";
  }
",
                  ";
",
                ],
              },
              "displayName": "Styled(PasswordField)",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-kpOJdX",
              "target": [Function],
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          dataLocator="confirmPasswordtxtfield"
          enableSuccessCheck={false}
          id="confirmPassword"
          name="confirmPassword"
          placeholder="lbl_changePassword_confirm_password"
          showSuccessCheck={false}
        />
      </Styled(Col)>
    </Styled(Row)>
  </Styled(BodyCopy)>
  <Styled(BodyCopy)
    className="elem-mb-LRG elem-mt-LRG"
    color="text.primary"
    component="div"
    fontFamily="primary"
    fontSize={12}
    fontWeight="regular"
    letterSpacing="normal"
    lineHeight="normal"
    link={null}
    textAlign="center"
  >
    <Styled(Row)>
      <Styled(Col)
        className="ChangePasswordForm_cancel"
        colSize={
          Object {
            "large": 3,
            "medium": 2,
            "small": 6,
          }
        }
        offsetLeft={
          Object {
            "large": 3,
            "medium": 1,
          }
        }
      >
        <Styled(Anchor)
          asPath="/account/profile"
          to="/account?id=profile"
        >
          <Styled(Button)
            buttonVariation="fixed-width"
            className="elem-mb-XS"
            dataLocator="cancelBtn"
            fullWidth={true}
            type="button"
          >
            lbl_changePassword_cancelCta
          </Styled(Button)>
        </Styled(Anchor)>
      </Styled(Col)>
      <Styled(Col)
        className="ChangePasswordForm_save"
        colSize={
          Object {
            "large": 3,
            "medium": 2,
            "small": 6,
          }
        }
      >
        <Styled(Button)
          buttonVariation="fixed-width"
          className="elem-mb-XS"
          dataLocator="SaveBtn"
          disabled={false}
          fill="BLUE"
          fullWidth={true}
          type="submit"
        >
          lbl_changePassword_saveCta
        </Styled(Button)>
      </Styled(Col)>
    </Styled(Row)>
  </Styled(BodyCopy)>
</form>
`;

exports[`ChangePasswordForm component should renders correctly with success and error 1`] = `
<form
  className=""
  name="ChangePasswordForm"
  noValidate={true}
>
  <Styled(BodyCopy)
    className="elem-mt-LRG"
    color="text.primary"
    component="div"
    fontFamily="primary"
    fontSize={12}
    fontWeight="regular"
    letterSpacing="normal"
    lineHeight="normal"
    link={null}
    textAlign="left"
  >
    <Styled(Row)
      fullBleed={true}
    >
      <Styled(Col)
        colSize={
          Object {
            "large": 5,
            "medium": 4,
            "small": 6,
          }
        }
      >
        <Field
          className="elem-mb-SM"
          component={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-kpOJdX",
                "isStatic": false,
                "rules": Array [
                  "
  ",
                  "
  position: relative;

  .rightAlignedContent {
    position: absolute;
    right: 0;
    top: ",
                  [Function],
                  ";
    width: 30px;

    a {
      display: block;
    }

    .tooltip-bubble {
      li {
        text-align: left;
      }

      @media ",
                  [Function],
                  " {
        min-width: 350px;
      }
    }

    .tooltip-bubble li:before {
      content: '-';
      text-indent: -5px;
    }

    .tooltip {
      width: 10px;
      height: 10px;
    }
  }
  .show-hide-password {
    background: ",
                  [Function],
                  ";
  }
",
                  ";
",
                ],
              },
              "displayName": "Styled(PasswordField)",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-kpOJdX",
              "target": [Function],
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          dataLocator="currentPasswordtxtfield"
          enableSuccessCheck={false}
          id="currentPassword"
          name="currentPassword"
          placeholder="lbl_changePassword_current_password"
          showSuccessCheck={false}
        />
        <Field
          className="elem-mb-SM"
          component={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-kpOJdX",
                "isStatic": false,
                "rules": Array [
                  "
  ",
                  "
  position: relative;

  .rightAlignedContent {
    position: absolute;
    right: 0;
    top: ",
                  [Function],
                  ";
    width: 30px;

    a {
      display: block;
    }

    .tooltip-bubble {
      li {
        text-align: left;
      }

      @media ",
                  [Function],
                  " {
        min-width: 350px;
      }
    }

    .tooltip-bubble li:before {
      content: '-';
      text-indent: -5px;
    }

    .tooltip {
      width: 10px;
      height: 10px;
    }
  }
  .show-hide-password {
    background: ",
                  [Function],
                  ";
  }
",
                  ";
",
                ],
              },
              "displayName": "Styled(PasswordField)",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-kpOJdX",
              "target": [Function],
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          dataLocator="newPasswordtxtfield"
          enableSuccessCheck={false}
          id="password"
          name="password"
          placeholder="lbl_changePassword_new_password"
          showSuccessCheck={false}
          tooltipContent={
            <PasswordRequirement
              labels={Object {}}
            />
          }
        />
        <Field
          className="elem-mb-SM"
          component={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-kpOJdX",
                "isStatic": false,
                "rules": Array [
                  "
  ",
                  "
  position: relative;

  .rightAlignedContent {
    position: absolute;
    right: 0;
    top: ",
                  [Function],
                  ";
    width: 30px;

    a {
      display: block;
    }

    .tooltip-bubble {
      li {
        text-align: left;
      }

      @media ",
                  [Function],
                  " {
        min-width: 350px;
      }
    }

    .tooltip-bubble li:before {
      content: '-';
      text-indent: -5px;
    }

    .tooltip {
      width: 10px;
      height: 10px;
    }
  }
  .show-hide-password {
    background: ",
                  [Function],
                  ";
  }
",
                  ";
",
                ],
              },
              "displayName": "Styled(PasswordField)",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-kpOJdX",
              "target": [Function],
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          dataLocator="confirmPasswordtxtfield"
          enableSuccessCheck={false}
          id="confirmPassword"
          name="confirmPassword"
          placeholder="lbl_changePassword_confirm_password"
          showSuccessCheck={false}
        />
      </Styled(Col)>
    </Styled(Row)>
  </Styled(BodyCopy)>
  <Styled(BodyCopy)
    className="elem-mb-LRG elem-mt-LRG"
    color="text.primary"
    component="div"
    fontFamily="primary"
    fontSize={12}
    fontWeight="regular"
    letterSpacing="normal"
    lineHeight="normal"
    link={null}
    textAlign="center"
  >
    <Styled(Row)>
      <Styled(Col)
        className="ChangePasswordForm_cancel"
        colSize={
          Object {
            "large": 3,
            "medium": 2,
            "small": 6,
          }
        }
        offsetLeft={
          Object {
            "large": 3,
            "medium": 1,
          }
        }
      >
        <Styled(Anchor)
          asPath="/account/profile"
          to="/account?id=profile"
        >
          <Styled(Button)
            buttonVariation="fixed-width"
            className="elem-mb-XS"
            dataLocator="cancelBtn"
            fullWidth={true}
            type="button"
          >
            lbl_changePassword_cancelCta
          </Styled(Button)>
        </Styled(Anchor)>
      </Styled(Col)>
      <Styled(Col)
        className="ChangePasswordForm_save"
        colSize={
          Object {
            "large": 3,
            "medium": 2,
            "small": 6,
          }
        }
      >
        <Styled(Button)
          buttonVariation="fixed-width"
          className="elem-mb-XS"
          dataLocator="SaveBtn"
          disabled={false}
          fill="BLUE"
          fullWidth={true}
          type="submit"
        >
          lbl_changePassword_saveCta
        </Styled(Button)>
      </Styled(Col)>
    </Styled(Row)>
  </Styled(BodyCopy)>
</form>
`;
