// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ResetPasswordForm component should renders correctly in initial state 1`] = `
<form
  className=""
  name="ChangePasswordForm"
  noValidate={true}
>
  <Field
    className="elem-mb-SM"
    component={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-gZMcBi",
          "isStatic": false,
          "rules": Array [
            "
  ",
            "
  position: relative;

  .rightAlignedContent {
    position: absolute;
    right: 0;
    top: ",
            [Function],
            ";
    width: 30px;

    a {
      display: block;
    }

    .tooltip-bubble {
      li {
        text-align: left;
      }

      @media ",
            [Function],
            " {
        min-width: 350px;
      }
    }

    .tooltip-bubble li:before {
      content: '-';
      text-indent: -5px;
    }

    .tooltip {
      width: 10px;
      height: 10px;
    }
  }
",
            ";
",
          ],
        },
        "displayName": "Styled(PasswordField)",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-gZMcBi",
        "target": [Function],
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    dataLocator="currentPasswordtxtfield"
    enableSuccessCheck={false}
    errorDataLocator="changePassword-passworderror"
    id="oldPassword"
    name="oldPassword"
    showSuccessCheck={false}
  />
  <Field
    className="elem-mb-SM"
    component={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-gZMcBi",
          "isStatic": false,
          "rules": Array [
            "
  ",
            "
  position: relative;

  .rightAlignedContent {
    position: absolute;
    right: 0;
    top: ",
            [Function],
            ";
    width: 30px;

    a {
      display: block;
    }

    .tooltip-bubble {
      li {
        text-align: left;
      }

      @media ",
            [Function],
            " {
        min-width: 350px;
      }
    }

    .tooltip-bubble li:before {
      content: '-';
      text-indent: -5px;
    }

    .tooltip {
      width: 10px;
      height: 10px;
    }
  }
",
            ";
",
          ],
        },
        "displayName": "Styled(PasswordField)",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-gZMcBi",
        "target": [Function],
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    dataLocator="newPasswordtxtfield"
    enableSuccessCheck={false}
    errorDataLocator="changePassword-passworderror"
    id="password"
    name="password"
    showSuccessCheck={false}
    tooltipContent={
      <PasswordRequirement
        labels={Object {}}
      />
    }
  />
  <Field
    className="elem-mb-SM"
    component={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-gZMcBi",
          "isStatic": false,
          "rules": Array [
            "
  ",
            "
  position: relative;

  .rightAlignedContent {
    position: absolute;
    right: 0;
    top: ",
            [Function],
            ";
    width: 30px;

    a {
      display: block;
    }

    .tooltip-bubble {
      li {
        text-align: left;
      }

      @media ",
            [Function],
            " {
        min-width: 350px;
      }
    }

    .tooltip-bubble li:before {
      content: '-';
      text-indent: -5px;
    }

    .tooltip {
      width: 10px;
      height: 10px;
    }
  }
",
            ";
",
          ],
        },
        "displayName": "Styled(PasswordField)",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-gZMcBi",
        "target": [Function],
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    dataLocator="confirmPasswordtxtfield"
    enableSuccessCheck={false}
    errorDataLocator="changePassword-passworderror"
    id="confirmPassword"
    name="confirmPassword"
    showSuccessCheck={false}
  />
  <Styled(BodyCopy)
    className="elem-mb-LRG"
    color="text.primary"
    component="div"
    fontFamily="primary"
    fontSize={12}
    fontWeight="regular"
    letterSpacing="normal"
    lineHeight="normal"
    textAlign="center"
  >
    <Styled(Row)>
      <Styled(Col)
        colSize={
          Object {
            "large": 3,
            "medium": 6,
            "small": 6,
          }
        }
        offsetLeft={
          Object {
            "large": 2,
          }
        }
      >
        <Styled(Anchor)
          asPath="/account/profile"
          to="/account?id=profile"
        >
          <Styled(Button)
            buttonVariation="fixed-width"
            className="elem-mb-XS"
            dataLocator="cancelBtn"
            fullWidth={true}
            type="button"
          />
        </Styled(Anchor)>
      </Styled(Col)>
      <Styled(Col)
        colSize={
          Object {
            "large": 3,
            "medium": 6,
            "small": 6,
          }
        }
      >
        <Styled(Button)
          buttonVariation="fixed-width"
          className="elem-mb-XS"
          dataLocator="SaveBtn"
          disabled={false}
          fill="BLUE"
          fullWidth={true}
          type="submit"
        />
      </Styled(Col)>
    </Styled(Row)>
  </Styled(BodyCopy)>
</form>
`;

exports[`ResetPasswordForm component should renders correctly with success and error 1`] = `
<form
  className=""
  name="ChangePasswordForm"
  noValidate={true}
>
  <Styled(Notification)
    colSize={
      Object {
        "large": 12,
        "medium": 8,
        "small": 6,
      }
    }
    status="success"
  />
  <Styled(Notification)
    colSize={
      Object {
        "large": 12,
        "medium": 8,
        "small": 6,
      }
    }
    status="error"
  />
  <Field
    className="elem-mb-SM"
    component={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-gZMcBi",
          "isStatic": false,
          "rules": Array [
            "
  ",
            "
  position: relative;

  .rightAlignedContent {
    position: absolute;
    right: 0;
    top: ",
            [Function],
            ";
    width: 30px;

    a {
      display: block;
    }

    .tooltip-bubble {
      li {
        text-align: left;
      }

      @media ",
            [Function],
            " {
        min-width: 350px;
      }
    }

    .tooltip-bubble li:before {
      content: '-';
      text-indent: -5px;
    }

    .tooltip {
      width: 10px;
      height: 10px;
    }
  }
",
            ";
",
          ],
        },
        "displayName": "Styled(PasswordField)",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-gZMcBi",
        "target": [Function],
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    dataLocator="currentPasswordtxtfield"
    enableSuccessCheck={false}
    errorDataLocator="changePassword-passworderror"
    id="oldPassword"
    name="oldPassword"
    showSuccessCheck={false}
  />
  <Field
    className="elem-mb-SM"
    component={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-gZMcBi",
          "isStatic": false,
          "rules": Array [
            "
  ",
            "
  position: relative;

  .rightAlignedContent {
    position: absolute;
    right: 0;
    top: ",
            [Function],
            ";
    width: 30px;

    a {
      display: block;
    }

    .tooltip-bubble {
      li {
        text-align: left;
      }

      @media ",
            [Function],
            " {
        min-width: 350px;
      }
    }

    .tooltip-bubble li:before {
      content: '-';
      text-indent: -5px;
    }

    .tooltip {
      width: 10px;
      height: 10px;
    }
  }
",
            ";
",
          ],
        },
        "displayName": "Styled(PasswordField)",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-gZMcBi",
        "target": [Function],
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    dataLocator="newPasswordtxtfield"
    enableSuccessCheck={false}
    errorDataLocator="changePassword-passworderror"
    id="password"
    name="password"
    showSuccessCheck={false}
    tooltipContent={
      <PasswordRequirement
        labels={Object {}}
      />
    }
  />
  <Field
    className="elem-mb-SM"
    component={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-gZMcBi",
          "isStatic": false,
          "rules": Array [
            "
  ",
            "
  position: relative;

  .rightAlignedContent {
    position: absolute;
    right: 0;
    top: ",
            [Function],
            ";
    width: 30px;

    a {
      display: block;
    }

    .tooltip-bubble {
      li {
        text-align: left;
      }

      @media ",
            [Function],
            " {
        min-width: 350px;
      }
    }

    .tooltip-bubble li:before {
      content: '-';
      text-indent: -5px;
    }

    .tooltip {
      width: 10px;
      height: 10px;
    }
  }
",
            ";
",
          ],
        },
        "displayName": "Styled(PasswordField)",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-gZMcBi",
        "target": [Function],
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      }
    }
    dataLocator="confirmPasswordtxtfield"
    enableSuccessCheck={false}
    errorDataLocator="changePassword-passworderror"
    id="confirmPassword"
    name="confirmPassword"
    showSuccessCheck={false}
  />
  <Styled(BodyCopy)
    className="elem-mb-LRG"
    color="text.primary"
    component="div"
    fontFamily="primary"
    fontSize={12}
    fontWeight="regular"
    letterSpacing="normal"
    lineHeight="normal"
    textAlign="center"
  >
    <Styled(Row)>
      <Styled(Col)
        colSize={
          Object {
            "large": 3,
            "medium": 6,
            "small": 6,
          }
        }
        offsetLeft={
          Object {
            "large": 2,
          }
        }
      >
        <Styled(Anchor)
          asPath="/account/profile"
          to="/account?id=profile"
        >
          <Styled(Button)
            buttonVariation="fixed-width"
            className="elem-mb-XS"
            dataLocator="cancelBtn"
            fullWidth={true}
            type="button"
          />
        </Styled(Anchor)>
      </Styled(Col)>
      <Styled(Col)
        colSize={
          Object {
            "large": 3,
            "medium": 6,
            "small": 6,
          }
        }
      >
        <Styled(Button)
          buttonVariation="fixed-width"
          className="elem-mb-XS"
          dataLocator="SaveBtn"
          disabled={false}
          fill="BLUE"
          fullWidth={true}
          type="submit"
        />
      </Styled(Col)>
    </Styled(Row)>
  </Styled(BodyCopy)>
</form>
`;
