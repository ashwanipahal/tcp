// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ChangePasswordForm component should renders correctly in initial state 1`] = `
<View>
  <Styled(View)>
    <Field
      component={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "_foldedDefaultProps": Object {
            "ariaLabel": "input",
            "dataLocator": "input-field",
            "enableSuccessCheck": false,
            "id": "input",
            "keyboardType": "default",
            "label": "input",
            "marginBottom": true,
            "meta": Object {
              "error": "",
              "touched": "",
            },
            "onChangeText": [Function],
            "secureTextEntry": false,
            "showErrorIcon": true,
            "showSuccessCheck": false,
            "successText": "",
            "type": "text",
          },
          "attrs": Array [],
          "displayName": "Styled(TextBox)",
          "inlineStyle": InlineStyle {
            "rules": Array [
              "
    ",
              "
  ",
              [Function],
              ";
",
              ";
  ",
            ],
          },
          "render": [Function],
          "styledComponentId": "StyledNativeComponent",
          "target": [Function],
          "withComponent": [Function],
        }
      }
      dataLocator="currentPasswordtxtfield"
      enableSuccessCheck={false}
      id="currentPassword"
      label="lbl_changePassword_current_password"
      name="currentPassword"
      secureTextEntry={true}
    />
    <Styled(View)>
      <Field
        component={[Function]}
        dataLocator="hide-show-pwd"
        disabled={false}
        fontSize="fs13"
        hideCheckboxIcon={true}
        name="hide-show-pwd"
        onClick={[Function]}
        rightText="lbl_changePassword_show"
      />
    </Styled(View)>
  </Styled(View)>
  <Styled(View)>
    <Field
      component={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "_foldedDefaultProps": Object {
            "ariaLabel": "input",
            "dataLocator": "input-field",
            "enableSuccessCheck": false,
            "id": "input",
            "keyboardType": "default",
            "label": "input",
            "marginBottom": true,
            "meta": Object {
              "error": "",
              "touched": "",
            },
            "onChangeText": [Function],
            "secureTextEntry": false,
            "showErrorIcon": true,
            "showSuccessCheck": false,
            "successText": "",
            "type": "text",
          },
          "attrs": Array [],
          "displayName": "Styled(TextBox)",
          "inlineStyle": InlineStyle {
            "rules": Array [
              "
    ",
              "
  ",
              [Function],
              ";
",
              ";
  ",
            ],
          },
          "render": [Function],
          "styledComponentId": "StyledNativeComponent",
          "target": [Function],
          "withComponent": [Function],
        }
      }
      dataLocator="newPasswordtxtfield"
      enableSuccessCheck={false}
      id="password"
      label="lbl_changePassword_new_password"
      name="password"
      secureTextEntry={true}
      showSuccessCheck={true}
      successText="lbl_changePassword_input_success"
    />
    <Styled(View)>
      <ReactTooltip
        backgroundColor="#fff"
        height={200}
        onClose={[Function]}
        onOpen={[Function]}
        overlayColor="rgba(250, 250, 250, 0.80)"
        pointerColor="#fff"
        popover={
          <PasswordRequirement
            labels={Object {}}
            resetPassword={false}
          />
        }
        textAlign="left"
        toggleOnPress={true}
        width={300}
        withOverlay={false}
        withPointer={true}
      >
        <Styled(ImageComp)
          alt=""
          height={25}
          host=""
          source={
            Object {
              "testUri": "../../../../core/src/assets/info-icon.png",
            }
          }
          url=""
          width={25}
        />
      </ReactTooltip>
    </Styled(View)>
    <Styled(View)>
      <Field
        component={[Function]}
        dataLocator="hide-show-pwd"
        disabled={false}
        fontSize="fs13"
        hideCheckboxIcon={true}
        name="hide-show-pwd"
        onClick={[Function]}
        rightText="lbl_changePassword_show"
      />
    </Styled(View)>
  </Styled(View)>
  <Styled(View)>
    <Field
      component={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "_foldedDefaultProps": Object {
            "ariaLabel": "input",
            "dataLocator": "input-field",
            "enableSuccessCheck": false,
            "id": "input",
            "keyboardType": "default",
            "label": "input",
            "marginBottom": true,
            "meta": Object {
              "error": "",
              "touched": "",
            },
            "onChangeText": [Function],
            "secureTextEntry": false,
            "showErrorIcon": true,
            "showSuccessCheck": false,
            "successText": "",
            "type": "text",
          },
          "attrs": Array [],
          "displayName": "Styled(TextBox)",
          "inlineStyle": InlineStyle {
            "rules": Array [
              "
    ",
              "
  ",
              [Function],
              ";
",
              ";
  ",
            ],
          },
          "render": [Function],
          "styledComponentId": "StyledNativeComponent",
          "target": [Function],
          "withComponent": [Function],
        }
      }
      dataLocator="confirmPasswordtxtfield"
      enableSuccessCheck={false}
      id="confirmPassword"
      label="lbl_changePassword_confirm_password"
      name="confirmPassword"
      secureTextEntry={true}
      showSuccessCheck={true}
      successText="lbl_changePassword_input_success"
    />
    <Styled(View)>
      <Field
        component={[Function]}
        dataLocator="hide-show-pwd"
        disabled={false}
        fontSize="fs13"
        hideCheckboxIcon={true}
        name="hide-show-pwd"
        onClick={[Function]}
        rightText="lbl_changePassword_show"
      />
    </Styled(View)>
  </Styled(View)>
  <Styled(CustomButton)
    active={false}
    buttonVariation="fixed-width"
    color="white"
    customStyle={Object {}}
    customTextStyle={null}
    disableButton={false}
    disabled={false}
    fill="BLUE"
    fullWidth=""
    iconColor="gray.800"
    iconName="chevron-down"
    iconSize="fs12"
    locator=""
    navigation={Object {}}
    onPress={null}
    selected={false}
    selectedIcon="chevron-up"
    showIcon={false}
    text="lbl_changePassword_saveCta"
    theme={Object {}}
    url=""
  />
  <Styled(View)>
    <Styled(CustomButton)
      active={false}
      buttonVariation="fixed-width"
      color=""
      customStyle={Object {}}
      customTextStyle={null}
      disableButton={false}
      fill="WHITE"
      fullWidth=""
      iconColor="gray.800"
      iconName="chevron-down"
      iconSize="fs12"
      locator=""
      navigation={Object {}}
      onPress={[Function]}
      selected={false}
      selectedIcon="chevron-up"
      showIcon={false}
      text="lbl_changePassword_cancelCta"
      theme={Object {}}
      url=""
    />
  </Styled(View)>
</View>
`;

exports[`ChangePasswordForm component should renders correctly with success and error 1`] = `
<View>
  <Styled(View)>
    <Field
      component={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "_foldedDefaultProps": Object {
            "ariaLabel": "input",
            "dataLocator": "input-field",
            "enableSuccessCheck": false,
            "id": "input",
            "keyboardType": "default",
            "label": "input",
            "marginBottom": true,
            "meta": Object {
              "error": "",
              "touched": "",
            },
            "onChangeText": [Function],
            "secureTextEntry": false,
            "showErrorIcon": true,
            "showSuccessCheck": false,
            "successText": "",
            "type": "text",
          },
          "attrs": Array [],
          "displayName": "Styled(TextBox)",
          "inlineStyle": InlineStyle {
            "rules": Array [
              "
    ",
              "
  ",
              [Function],
              ";
",
              ";
  ",
            ],
          },
          "render": [Function],
          "styledComponentId": "StyledNativeComponent",
          "target": [Function],
          "withComponent": [Function],
        }
      }
      dataLocator="currentPasswordtxtfield"
      enableSuccessCheck={false}
      id="currentPassword"
      label="lbl_changePassword_current_password"
      name="currentPassword"
      secureTextEntry={true}
    />
    <Styled(View)>
      <Field
        component={[Function]}
        dataLocator="hide-show-pwd"
        disabled={false}
        fontSize="fs13"
        hideCheckboxIcon={true}
        name="hide-show-pwd"
        onClick={[Function]}
        rightText="lbl_changePassword_show"
      />
    </Styled(View)>
  </Styled(View)>
  <Styled(View)>
    <Field
      component={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "_foldedDefaultProps": Object {
            "ariaLabel": "input",
            "dataLocator": "input-field",
            "enableSuccessCheck": false,
            "id": "input",
            "keyboardType": "default",
            "label": "input",
            "marginBottom": true,
            "meta": Object {
              "error": "",
              "touched": "",
            },
            "onChangeText": [Function],
            "secureTextEntry": false,
            "showErrorIcon": true,
            "showSuccessCheck": false,
            "successText": "",
            "type": "text",
          },
          "attrs": Array [],
          "displayName": "Styled(TextBox)",
          "inlineStyle": InlineStyle {
            "rules": Array [
              "
    ",
              "
  ",
              [Function],
              ";
",
              ";
  ",
            ],
          },
          "render": [Function],
          "styledComponentId": "StyledNativeComponent",
          "target": [Function],
          "withComponent": [Function],
        }
      }
      dataLocator="newPasswordtxtfield"
      enableSuccessCheck={false}
      id="password"
      label="lbl_changePassword_new_password"
      name="password"
      secureTextEntry={true}
      showSuccessCheck={true}
      successText="lbl_changePassword_input_success"
    />
    <Styled(View)>
      <ReactTooltip
        backgroundColor="#fff"
        height={200}
        onClose={[Function]}
        onOpen={[Function]}
        overlayColor="rgba(250, 250, 250, 0.80)"
        pointerColor="#fff"
        popover={
          <PasswordRequirement
            labels={Object {}}
            resetPassword={false}
          />
        }
        textAlign="left"
        toggleOnPress={true}
        width={300}
        withOverlay={false}
        withPointer={true}
      >
        <Styled(ImageComp)
          alt=""
          height={25}
          host=""
          source={
            Object {
              "testUri": "../../../../core/src/assets/info-icon.png",
            }
          }
          url=""
          width={25}
        />
      </ReactTooltip>
    </Styled(View)>
    <Styled(View)>
      <Field
        component={[Function]}
        dataLocator="hide-show-pwd"
        disabled={false}
        fontSize="fs13"
        hideCheckboxIcon={true}
        name="hide-show-pwd"
        onClick={[Function]}
        rightText="lbl_changePassword_show"
      />
    </Styled(View)>
  </Styled(View)>
  <Styled(View)>
    <Field
      component={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "_foldedDefaultProps": Object {
            "ariaLabel": "input",
            "dataLocator": "input-field",
            "enableSuccessCheck": false,
            "id": "input",
            "keyboardType": "default",
            "label": "input",
            "marginBottom": true,
            "meta": Object {
              "error": "",
              "touched": "",
            },
            "onChangeText": [Function],
            "secureTextEntry": false,
            "showErrorIcon": true,
            "showSuccessCheck": false,
            "successText": "",
            "type": "text",
          },
          "attrs": Array [],
          "displayName": "Styled(TextBox)",
          "inlineStyle": InlineStyle {
            "rules": Array [
              "
    ",
              "
  ",
              [Function],
              ";
",
              ";
  ",
            ],
          },
          "render": [Function],
          "styledComponentId": "StyledNativeComponent",
          "target": [Function],
          "withComponent": [Function],
        }
      }
      dataLocator="confirmPasswordtxtfield"
      enableSuccessCheck={false}
      id="confirmPassword"
      label="lbl_changePassword_confirm_password"
      name="confirmPassword"
      secureTextEntry={true}
      showSuccessCheck={true}
      successText="lbl_changePassword_input_success"
    />
    <Styled(View)>
      <Field
        component={[Function]}
        dataLocator="hide-show-pwd"
        disabled={false}
        fontSize="fs13"
        hideCheckboxIcon={true}
        name="hide-show-pwd"
        onClick={[Function]}
        rightText="lbl_changePassword_show"
      />
    </Styled(View)>
  </Styled(View)>
  <Styled(CustomButton)
    active={false}
    buttonVariation="fixed-width"
    color="white"
    customStyle={Object {}}
    customTextStyle={null}
    disableButton={false}
    disabled={false}
    fill="BLUE"
    fullWidth=""
    iconColor="gray.800"
    iconName="chevron-down"
    iconSize="fs12"
    locator=""
    navigation={Object {}}
    onPress={null}
    selected={false}
    selectedIcon="chevron-up"
    showIcon={false}
    text="lbl_changePassword_saveCta"
    theme={Object {}}
    url=""
  />
  <Styled(View)>
    <Styled(CustomButton)
      active={false}
      buttonVariation="fixed-width"
      color=""
      customStyle={Object {}}
      customTextStyle={null}
      disableButton={false}
      fill="WHITE"
      fullWidth=""
      iconColor="gray.800"
      iconName="chevron-down"
      iconSize="fs12"
      locator=""
      navigation={Object {}}
      onPress={[Function]}
      selected={false}
      selectedIcon="chevron-up"
      showIcon={false}
      text="lbl_changePassword_cancelCta"
      theme={Object {}}
      url=""
    />
  </Styled(View)>
</View>
`;
