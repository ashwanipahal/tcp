// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ChangePasswordForm component should renders correctly in initial state 1`] = `
<View>
  <Styled(View)>
    <Field
      component={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "_foldedDefaultProps": Object {
            "ariaLabel": "input",
            "dataLocator": "input-field",
            "enableSuccessCheck": false,
            "id": "input",
            "keyboardType": "default",
            "label": "input",
            "marginBottom": true,
            "meta": Object {
              "error": "",
              "touched": "",
            },
            "secureTextEntry": false,
            "showErrorIcon": true,
            "showSuccessCheck": false,
            "successText": "",
            "type": "text",
          },
          "attrs": Array [],
          "displayName": "Styled(TextBox)",
          "inlineStyle": InlineStyle {
            "rules": Array [
              "
    ",
              "
  ",
              [Function],
              ";
",
              ";
  ",
            ],
          },
          "render": [Function],
          "styledComponentId": "StyledNativeComponent",
          "target": [Function],
          "withComponent": [Function],
        }
      }
      dataLocator="currentPasswordtxtfield"
      enableSuccessCheck={false}
      id="currentPassword"
      name="currentPassword"
      secureTextEntry={true}
    />
    <Styled(View)>
      <Field
        component={[Function]}
        dataLocator="hide-show-pwd"
        disabled={false}
        fontSize="fs13"
        hideCheckboxIcon={true}
        name="hide-show-pwd"
        onClick={[Function]}
      />
    </Styled(View)>
  </Styled(View)>
  <Styled(View)>
    <Field
      component={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "_foldedDefaultProps": Object {
            "ariaLabel": "input",
            "dataLocator": "input-field",
            "enableSuccessCheck": false,
            "id": "input",
            "keyboardType": "default",
            "label": "input",
            "marginBottom": true,
            "meta": Object {
              "error": "",
              "touched": "",
            },
            "secureTextEntry": false,
            "showErrorIcon": true,
            "showSuccessCheck": false,
            "successText": "",
            "type": "text",
          },
          "attrs": Array [],
          "displayName": "Styled(TextBox)",
          "inlineStyle": InlineStyle {
            "rules": Array [
              "
    ",
              "
  ",
              [Function],
              ";
",
              ";
  ",
            ],
          },
          "render": [Function],
          "styledComponentId": "StyledNativeComponent",
          "target": [Function],
          "withComponent": [Function],
        }
      }
      dataLocator="newPasswordtxtfield"
      enableSuccessCheck={false}
      id="password"
      name="password"
      secureTextEntry={true}
      showSuccessCheck={true}
    />
    <Styled(View)>
      <Field
        component={[Function]}
        dataLocator="hide-show-pwd"
        disabled={false}
        fontSize="fs13"
        hideCheckboxIcon={true}
        name="hide-show-pwd"
        onClick={[Function]}
      />
    </Styled(View)>
  </Styled(View)>
  <Styled(View)>
    <Field
      component={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "_foldedDefaultProps": Object {
            "ariaLabel": "input",
            "dataLocator": "input-field",
            "enableSuccessCheck": false,
            "id": "input",
            "keyboardType": "default",
            "label": "input",
            "marginBottom": true,
            "meta": Object {
              "error": "",
              "touched": "",
            },
            "secureTextEntry": false,
            "showErrorIcon": true,
            "showSuccessCheck": false,
            "successText": "",
            "type": "text",
          },
          "attrs": Array [],
          "displayName": "Styled(TextBox)",
          "inlineStyle": InlineStyle {
            "rules": Array [
              "
    ",
              "
  ",
              [Function],
              ";
",
              ";
  ",
            ],
          },
          "render": [Function],
          "styledComponentId": "StyledNativeComponent",
          "target": [Function],
          "withComponent": [Function],
        }
      }
      dataLocator="confirmPasswordtxtfield"
      enableSuccessCheck={false}
      id="confirmPassword"
      name="confirmPassword"
      secureTextEntry={true}
      showSuccessCheck={true}
    />
    <Styled(View)>
      <Field
        component={[Function]}
        dataLocator="hide-show-pwd"
        disabled={false}
        fontSize="fs13"
        hideCheckboxIcon={true}
        name="hide-show-pwd"
        onClick={[Function]}
      />
    </Styled(View)>
  </Styled(View)>
  <Styled(CustomButton)
    buttonVariation="variable-width"
    color="white"
    customStyle={Object {}}
    disableButton={false}
    disabled={false}
    fill="BLUE"
    fullWidth=""
    locator=""
    text=""
    url=""
  />
  <Styled(View)>
    <Styled(CustomButton)
      buttonVariation="variable-width"
      color=""
      customStyle={Object {}}
      disableButton={false}
      fill="WHITE"
      fullWidth=""
      locator=""
      onPress={[Function]}
      text=""
      url=""
    />
  </Styled(View)>
</View>
`;

exports[`ChangePasswordForm component should renders correctly with success and error 1`] = `
<View>
  <Styled(View)>
    <Field
      component={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "_foldedDefaultProps": Object {
            "ariaLabel": "input",
            "dataLocator": "input-field",
            "enableSuccessCheck": false,
            "id": "input",
            "keyboardType": "default",
            "label": "input",
            "marginBottom": true,
            "meta": Object {
              "error": "",
              "touched": "",
            },
            "secureTextEntry": false,
            "showErrorIcon": true,
            "showSuccessCheck": false,
            "successText": "",
            "type": "text",
          },
          "attrs": Array [],
          "displayName": "Styled(TextBox)",
          "inlineStyle": InlineStyle {
            "rules": Array [
              "
    ",
              "
  ",
              [Function],
              ";
",
              ";
  ",
            ],
          },
          "render": [Function],
          "styledComponentId": "StyledNativeComponent",
          "target": [Function],
          "withComponent": [Function],
        }
      }
      dataLocator="currentPasswordtxtfield"
      enableSuccessCheck={false}
      id="currentPassword"
      name="currentPassword"
      secureTextEntry={true}
    />
    <Styled(View)>
      <Field
        component={[Function]}
        dataLocator="hide-show-pwd"
        disabled={false}
        fontSize="fs13"
        hideCheckboxIcon={true}
        name="hide-show-pwd"
        onClick={[Function]}
      />
    </Styled(View)>
  </Styled(View)>
  <Styled(View)>
    <Field
      component={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "_foldedDefaultProps": Object {
            "ariaLabel": "input",
            "dataLocator": "input-field",
            "enableSuccessCheck": false,
            "id": "input",
            "keyboardType": "default",
            "label": "input",
            "marginBottom": true,
            "meta": Object {
              "error": "",
              "touched": "",
            },
            "secureTextEntry": false,
            "showErrorIcon": true,
            "showSuccessCheck": false,
            "successText": "",
            "type": "text",
          },
          "attrs": Array [],
          "displayName": "Styled(TextBox)",
          "inlineStyle": InlineStyle {
            "rules": Array [
              "
    ",
              "
  ",
              [Function],
              ";
",
              ";
  ",
            ],
          },
          "render": [Function],
          "styledComponentId": "StyledNativeComponent",
          "target": [Function],
          "withComponent": [Function],
        }
      }
      dataLocator="newPasswordtxtfield"
      enableSuccessCheck={false}
      id="password"
      name="password"
      secureTextEntry={true}
      showSuccessCheck={true}
    />
    <Styled(View)>
      <Field
        component={[Function]}
        dataLocator="hide-show-pwd"
        disabled={false}
        fontSize="fs13"
        hideCheckboxIcon={true}
        name="hide-show-pwd"
        onClick={[Function]}
      />
    </Styled(View)>
  </Styled(View)>
  <Styled(View)>
    <Field
      component={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "_foldedDefaultProps": Object {
            "ariaLabel": "input",
            "dataLocator": "input-field",
            "enableSuccessCheck": false,
            "id": "input",
            "keyboardType": "default",
            "label": "input",
            "marginBottom": true,
            "meta": Object {
              "error": "",
              "touched": "",
            },
            "secureTextEntry": false,
            "showErrorIcon": true,
            "showSuccessCheck": false,
            "successText": "",
            "type": "text",
          },
          "attrs": Array [],
          "displayName": "Styled(TextBox)",
          "inlineStyle": InlineStyle {
            "rules": Array [
              "
    ",
              "
  ",
              [Function],
              ";
",
              ";
  ",
            ],
          },
          "render": [Function],
          "styledComponentId": "StyledNativeComponent",
          "target": [Function],
          "withComponent": [Function],
        }
      }
      dataLocator="confirmPasswordtxtfield"
      enableSuccessCheck={false}
      id="confirmPassword"
      name="confirmPassword"
      secureTextEntry={true}
      showSuccessCheck={true}
    />
    <Styled(View)>
      <Field
        component={[Function]}
        dataLocator="hide-show-pwd"
        disabled={false}
        fontSize="fs13"
        hideCheckboxIcon={true}
        name="hide-show-pwd"
        onClick={[Function]}
      />
    </Styled(View)>
  </Styled(View)>
  <Styled(CustomButton)
    buttonVariation="variable-width"
    color="white"
    customStyle={Object {}}
    disableButton={false}
    disabled={false}
    fill="BLUE"
    fullWidth=""
    locator=""
    text=""
    url=""
  />
  <Styled(View)>
    <Styled(CustomButton)
      buttonVariation="variable-width"
      color=""
      customStyle={Object {}}
      disableButton={false}
      fill="WHITE"
      fullWidth=""
      locator=""
      onPress={[Function]}
      text=""
      url=""
    />
  </Styled(View)>
</View>
`;
