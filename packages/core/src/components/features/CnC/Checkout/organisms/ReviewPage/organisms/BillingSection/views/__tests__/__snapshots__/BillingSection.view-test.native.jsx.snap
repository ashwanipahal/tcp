// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`BillingSection should render correctly for empty state 1`] = `
<Fragment>
  <Styled(View)>
    <Styled(BodyCopy)
      accessibilityText=""
      dataLocator=""
      fontSize="fs26"
      margin={null}
      mobileFontFamily="primary"
      numberOfLines={null}
      text="undefined "
      textDecoration={null}
    />
    <Styled(View)>
      <Styled(Anchor)
        accessibilityLabel=""
        anchorVariation="primary"
        colorName={null}
        customStyle={Object {}}
        fontSizeVariation="large"
        justifyContent=""
        locator=""
        margins={null}
        onPress={null}
        text=""
        underline={true}
        visible={false}
      />
    </Styled(View)>
  </Styled(View)>
  <Styled(View)>
    <Styled(View) />
  </Styled(View)>
  <Connect(GiftCardsContainer)
    isFromReview={true}
  />
</Fragment>
`;

exports[`BillingSection should render correctly without address details 1`] = `
<Fragment>
  <Styled(View)>
    <Styled(BodyCopy)
      accessibilityText=""
      dataLocator=""
      fontSize="fs26"
      margin={null}
      mobileFontFamily="primary"
      numberOfLines={null}
      text="Billing "
      textDecoration={null}
    />
    <Styled(View)>
      <Styled(Anchor)
        accessibilityLabel=""
        anchorVariation="primary"
        colorName={null}
        customStyle={Object {}}
        fontSizeVariation="large"
        justifyContent=""
        locator=""
        margins={null}
        onPress={null}
        text=""
        underline={true}
        visible={false}
      />
    </Styled(View)>
  </Styled(View)>
  <Styled(View)>
    <Styled(View)>
      <Styled(View)>
        <Styled(View)>
          <Styled(BodyCopy)
            accessibilityText=""
            color="gray.900"
            dataLocator=""
            fontSize="fs16"
            fontWeight="semibold"
            margin={null}
            mobileFontFamily="secondary"
            numberOfLines={null}
            text="Payment Method"
            textDecoration={null}
          />
        </Styled(View)>
        <CardImage
          card={
            Object {
              "cardNumber": "1234",
              "ccBrand": "PLACE CASH",
              "ccType": "PLACE CASH",
            }
          }
          cardNumber="ending in 1234"
        />
      </Styled(View)>
    </Styled(View)>
    <Styled(View)>
      <Field
        component={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "_foldedDefaultProps": Object {
              "ariaLabel": "input",
              "autoCapitalize": "sentences",
              "dataLocator": "input-field",
              "enableSuccessCheck": false,
              "id": "input",
              "keyboardType": "default",
              "label": "input",
              "marginBottom": true,
              "meta": Object {
                "error": "",
                "touched": "",
              },
              "onChangeText": [Function],
              "secureTextEntry": false,
              "showErrorIcon": true,
              "showSuccessCheck": false,
              "successText": "",
              "type": "text",
            },
            "attrs": Array [],
            "displayName": "Styled(TextBox)",
            "inlineStyle": InlineStyle {
              "rules": Array [
                "
    ",
                "
  ",
                [Function],
                ";
",
                ";
  ",
              ],
            },
            "render": [Function],
            "styledComponentId": "StyledNativeComponent",
            "target": [Function],
            "withComponent": [Function],
          }
        }
        customStyle={
          Object {
            "height": 72,
          }
        }
        dataLocator="cvvTxtBox"
        id="cvvCode"
        name="cvvCode"
        type="text"
      />
      <Styled(View)>
        <ReactTooltip
          backgroundColor="#fff"
          height={350}
          onClose={[Function]}
          onOpen={[Function]}
          overlayColor="rgba(250, 250, 250, 0.80)"
          pointerColor="#fff"
          popover={
            <RichText
              actionHandler={[Function]}
              domStorageEnabled={false}
              injectedJavaScript=""
              isApplyDeviceHeight={false}
              isNativeView={true}
              javaScriptEnabled={false}
              onMessage={[Function]}
              source=""
              thirdPartyCookiesEnabled={false}
            />
          }
          toggleOnPress={true}
          width={350}
          withOverlay={false}
          withPointer={true}
        >
          <Styled(ImageComp)
            alt=""
            height={15}
            host=""
            marginTop={17}
            source={
              Object {
                "testUri": "../../../../core/src/assets/info-icon.png",
              }
            }
            url=""
            width={15}
          />
        </ReactTooltip>
      </Styled(View)>
    </Styled(View)>
  </Styled(View)>
  <Connect(GiftCardsContainer)
    isFromReview={true}
  />
</Fragment>
`;

exports[`BillingSection should render correctly without address details 2`] = `
<Fragment>
  <Styled(View)>
    <Styled(BodyCopy)
      accessibilityText=""
      dataLocator=""
      fontSize="fs26"
      margin={null}
      mobileFontFamily="primary"
      numberOfLines={null}
      text="Billing "
      textDecoration={null}
    />
    <Styled(View)>
      <Styled(Anchor)
        accessibilityLabel=""
        anchorVariation="primary"
        colorName={null}
        customStyle={Object {}}
        fontSizeVariation="large"
        justifyContent=""
        locator=""
        margins={null}
        onPress={null}
        text=""
        underline={true}
        visible={false}
      />
    </Styled(View)>
  </Styled(View)>
  <Connect(GiftCardsContainer)
    isFromReview={true}
  />
</Fragment>
`;

exports[`BillingSection should render correctly without card & address details or with gift card empty 1`] = `
<Fragment>
  <Styled(View)>
    <Styled(BodyCopy)
      accessibilityText=""
      dataLocator=""
      fontSize="fs26"
      margin={null}
      mobileFontFamily="primary"
      numberOfLines={null}
      text="Billing "
      textDecoration={null}
    />
    <Styled(View)>
      <Styled(Anchor)
        accessibilityLabel=""
        anchorVariation="primary"
        colorName={null}
        customStyle={Object {}}
        fontSizeVariation="large"
        justifyContent=""
        locator=""
        margins={null}
        onPress={null}
        text=""
        underline={true}
        visible={false}
      />
    </Styled(View)>
  </Styled(View)>
  <Styled(View)>
    <Styled(View) />
  </Styled(View)>
  <Connect(GiftCardsContainer)
    isFromReview={true}
  />
</Fragment>
`;

exports[`BillingSection should render correctly without card & address details or with gift card only 1`] = `
<Fragment>
  <Styled(View)>
    <Styled(BodyCopy)
      accessibilityText=""
      dataLocator=""
      fontSize="fs26"
      margin={null}
      mobileFontFamily="primary"
      numberOfLines={null}
      text="Billing "
      textDecoration={null}
    />
    <Styled(View)>
      <Styled(Anchor)
        accessibilityLabel=""
        anchorVariation="primary"
        colorName={null}
        customStyle={Object {}}
        fontSizeVariation="large"
        justifyContent=""
        locator=""
        margins={null}
        onPress={null}
        text=""
        underline={true}
        visible={false}
      />
    </Styled(View)>
  </Styled(View)>
  <Styled(View)>
    <Styled(View) />
  </Styled(View)>
  <Connect(GiftCardsContainer)
    isFromReview={true}
  />
</Fragment>
`;

exports[`BillingSection should render correctly without card details 1`] = `
<Fragment>
  <Styled(View)>
    <Styled(BodyCopy)
      accessibilityText=""
      dataLocator=""
      fontSize="fs26"
      margin={null}
      mobileFontFamily="primary"
      numberOfLines={null}
      text="Billing "
      textDecoration={null}
    />
    <Styled(View)>
      <Styled(Anchor)
        accessibilityLabel=""
        anchorVariation="primary"
        colorName={null}
        customStyle={Object {}}
        fontSizeVariation="large"
        justifyContent=""
        locator=""
        margins={null}
        onPress={null}
        text=""
        underline={true}
        visible={false}
      />
    </Styled(View)>
  </Styled(View)>
  <Styled(View)>
    <Styled(View)>
      <Styled(View)>
        <Styled(View)>
          <Styled(BodyCopy)
            accessibilityText=""
            color="gray.900"
            dataLocator=""
            fontSize="fs16"
            fontWeight="semibold"
            margin={null}
            mobileFontFamily="secondary"
            numberOfLines={null}
            text="Billing Address"
            textDecoration={null}
          />
        </Styled(View)>
        <Address
          address={
            Object {
              "addressLine1": "1234 XYZ",
              "city": "New York",
              "country": "US",
              "firstName": "Test",
              "lastName": "Test",
              "state": "NY",
            }
          }
          fontSize="fs16"
          regularName={true}
          showCountry={true}
          showDefaultText={false}
          showName={true}
          showPhone={true}
        />
      </Styled(View)>
    </Styled(View)>
  </Styled(View)>
  <Connect(GiftCardsContainer)
    isFromReview={true}
  />
</Fragment>
`;
