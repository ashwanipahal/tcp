// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GiftCardsVanilla should render gift card tile 1`] = `
<Styled(Grid)
  className="test"
>
  <Styled(Row)
    className="gift-section-container elem-mb-LRG"
    fullBleed={true}
  >
    <Styled(Col)
      colSize={
        Object {
          "large": 8,
          "medium": 8,
          "small": 6,
        }
      }
    >
      <Styled(BodyCopy)
        className="elem-mt-XXL"
        color="text.primary"
        component="p"
        data-locator="gift-cards"
        fontFamily="primary"
        fontSize="fs26"
        fontWeight="regular"
        letterSpacing="normal"
        lineHeight="normal"
        link={null}
        textAlign="left"
      />
      <Styled(BodyCopy)
        className="elem-mt-LRG"
        color="text.primary"
        component="p"
        data-locator="gift-cards"
        fontFamily="secondary"
        fontSize="fs16"
        fontWeight="regular"
        letterSpacing="normal"
        lineHeight="normal"
        link={null}
        textAlign="left"
      />
      <Styled(BodyCopy)
        className="elem-mt-MED"
        color="text.primary"
        component="p"
        data-locator="gift-cards"
        fontFamily="secondary"
        fontSize="fs16"
        fontWeight="extrabold"
        letterSpacing="normal"
        lineHeight="normal"
        link={null}
        textAlign="left"
      >
        undefined
      </Styled(BodyCopy)>
      <Styled(GiftCardTile)
        cardData={
          Object {
            "creditCardId": 123,
            "name": "test",
          }
        }
        giftCardErrors={Object {}}
        handleRemoveGiftCard={[MockFunction]}
        isFromReview={false}
        isGiftCardApplied={true}
        labels={Object {}}
      />
      <Styled(GiftCardTile)
        cardData={
          Object {
            "creditCardId": 123,
            "name": "test",
          }
        }
        giftCardErrors={Object {}}
        handleRemoveGiftCard={[MockFunction]}
        isFromReview={false}
        isGiftCardApplied={true}
        labels={Object {}}
      />
      <Styled(BodyCopy)
        className="elem-mt-LRG"
        color="text.primary"
        component="p"
        data-locator="gift-cards"
        fontFamily="secondary"
        fontSize="fs16"
        fontWeight="regular"
        letterSpacing="normal"
        lineHeight="normal"
        link={null}
        textAlign="left"
      >
        <span
          className="headsUpMsgBoldTitle"
        />
        undefined
      </Styled(BodyCopy)>
      <Styled(BodyCopy)
        className="elem-mt-MED"
        color="text.primary"
        component="p"
        data-locator="gift-cards"
        fontFamily="secondary"
        fontSize="fs16"
        fontWeight="extrabold"
        letterSpacing="normal"
        lineHeight="normal"
        link={null}
        textAlign="left"
      >
        undefined
      </Styled(BodyCopy)>
      <Styled(GiftCardTile)
        applyExistingGiftCardToOrder={[MockFunction]}
        cardData={
          Object {
            "creditCardId": 123,
            "name": "test",
          }
        }
        giftCardErrors={Object {}}
        isFromReview={false}
        labels={Object {}}
        orderBalanceTotal={0}
      />
      <Styled(GiftCardTile)
        applyExistingGiftCardToOrder={[MockFunction]}
        cardData={
          Object {
            "creditCardId": 123,
            "name": "test",
          }
        }
        giftCardErrors={Object {}}
        isFromReview={false}
        labels={Object {}}
        orderBalanceTotal={0}
      />
    </Styled(Col)>
  </Styled(Row)>
</Styled(Grid)>
`;

exports[`GiftCardsVanilla should render gift card tile with 0 order balance 1`] = `
<Styled(Grid)
  className="test"
>
  <Styled(Row)
    className="gift-section-container elem-mb-LRG"
    fullBleed={true}
  >
    <Styled(Col)
      colSize={
        Object {
          "large": 8,
          "medium": 8,
          "small": 6,
        }
      }
    >
      <Styled(BodyCopy)
        className="elem-mt-XXL"
        color="text.primary"
        component="p"
        data-locator="gift-cards"
        fontFamily="primary"
        fontSize="fs26"
        fontWeight="regular"
        letterSpacing="normal"
        lineHeight="normal"
        link={null}
        textAlign="left"
      />
      <Styled(BodyCopy)
        className="elem-mt-LRG"
        color="text.primary"
        component="p"
        data-locator="gift-cards"
        fontFamily="secondary"
        fontSize="fs16"
        fontWeight="regular"
        letterSpacing="normal"
        lineHeight="normal"
        link={null}
        textAlign="left"
      />
      <Styled(BodyCopy)
        className="elem-mt-MED"
        color="text.primary"
        component="p"
        data-locator="gift-cards"
        fontFamily="secondary"
        fontSize="fs16"
        fontWeight="extrabold"
        letterSpacing="normal"
        lineHeight="normal"
        link={null}
        textAlign="left"
      >
        undefined
      </Styled(BodyCopy)>
      <Styled(GiftCardTile)
        cardData={
          Object {
            "creditCardId": 123,
            "name": "test",
          }
        }
        giftCardErrors={Object {}}
        handleRemoveGiftCard={[MockFunction]}
        isFromReview={false}
        isGiftCardApplied={true}
        labels={Object {}}
      />
      <Styled(GiftCardTile)
        cardData={
          Object {
            "creditCardId": 123,
            "name": "test",
          }
        }
        giftCardErrors={Object {}}
        handleRemoveGiftCard={[MockFunction]}
        isFromReview={false}
        isGiftCardApplied={true}
        labels={Object {}}
      />
      <Styled(BodyCopy)
        className="elem-mt-LRG"
        color="text.primary"
        component="p"
        data-locator="gift-cards"
        fontFamily="secondary"
        fontSize="fs16"
        fontWeight="regular"
        letterSpacing="normal"
        lineHeight="normal"
        link={null}
        textAlign="left"
      >
        <span
          className="headsUpMsgBoldTitle"
        />
        undefined
      </Styled(BodyCopy)>
      <Styled(BodyCopy)
        className="elem-mt-MED"
        color="text.primary"
        component="p"
        data-locator="gift-cards"
        fontFamily="secondary"
        fontSize="fs16"
        fontWeight="extrabold"
        letterSpacing="normal"
        lineHeight="normal"
        link={null}
        textAlign="left"
      >
        undefined
      </Styled(BodyCopy)>
      <Styled(GiftCardTile)
        applyExistingGiftCardToOrder={[MockFunction]}
        cardData={
          Object {
            "creditCardId": 123,
            "name": "test",
          }
        }
        giftCardErrors={Object {}}
        isFromReview={false}
        labels={Object {}}
        orderBalanceTotal={0}
      />
      <Styled(GiftCardTile)
        applyExistingGiftCardToOrder={[MockFunction]}
        cardData={
          Object {
            "creditCardId": 123,
            "name": "test",
          }
        }
        giftCardErrors={Object {}}
        isFromReview={false}
        labels={Object {}}
        orderBalanceTotal={0}
      />
    </Styled(Col)>
  </Styled(Row)>
</Styled(Grid)>
`;

exports[`GiftCardsVanilla should render gift card tile with 100 order balance 1`] = `
<Styled(Grid)
  className="test"
>
  <Styled(Row)
    className="gift-section-container elem-mb-LRG"
    fullBleed={true}
  >
    <Styled(Col)
      colSize={
        Object {
          "large": 8,
          "medium": 8,
          "small": 6,
        }
      }
    >
      <Styled(BodyCopy)
        className="elem-mt-XXL"
        color="text.primary"
        component="p"
        data-locator="gift-cards"
        fontFamily="primary"
        fontSize="fs26"
        fontWeight="regular"
        letterSpacing="normal"
        lineHeight="normal"
        link={null}
        textAlign="left"
      />
      <Styled(BodyCopy)
        className="elem-mt-LRG"
        color="text.primary"
        component="p"
        data-locator="gift-cards"
        fontFamily="secondary"
        fontSize="fs16"
        fontWeight="regular"
        letterSpacing="normal"
        lineHeight="normal"
        link={null}
        textAlign="left"
      />
      <Styled(BodyCopy)
        className="elem-mt-MED"
        color="text.primary"
        component="p"
        data-locator="gift-cards"
        fontFamily="secondary"
        fontSize="fs16"
        fontWeight="extrabold"
        letterSpacing="normal"
        lineHeight="normal"
        link={null}
        textAlign="left"
      >
        undefined
      </Styled(BodyCopy)>
      <Styled(GiftCardTile)
        cardData={
          Object {
            "creditCardId": 123,
            "name": "test",
          }
        }
        giftCardErrors={Object {}}
        handleRemoveGiftCard={[MockFunction]}
        isFromReview={false}
        isGiftCardApplied={true}
        labels={Object {}}
      />
      <Styled(GiftCardTile)
        cardData={
          Object {
            "creditCardId": 123,
            "name": "test",
          }
        }
        giftCardErrors={Object {}}
        handleRemoveGiftCard={[MockFunction]}
        isFromReview={false}
        isGiftCardApplied={true}
        labels={Object {}}
      />
      <Styled(BodyCopy)
        className="elem-mt-LRG"
        color="text.primary"
        component="p"
        data-locator="gift-cards"
        fontFamily="secondary"
        fontSize="fs16"
        fontWeight="regular"
        letterSpacing="normal"
        lineHeight="normal"
        link={null}
        textAlign="left"
      >
        <span
          className="headsUpMsgBoldTitle"
        />
        undefined
      </Styled(BodyCopy)>
      <Styled(BodyCopy)
        className="elem-mt-MED"
        color="text.primary"
        component="p"
        data-locator="gift-cards"
        fontFamily="secondary"
        fontSize="fs16"
        fontWeight="extrabold"
        letterSpacing="normal"
        lineHeight="normal"
        link={null}
        textAlign="left"
      >
        undefined
      </Styled(BodyCopy)>
      <Styled(GiftCardTile)
        applyExistingGiftCardToOrder={[MockFunction]}
        cardData={
          Object {
            "creditCardId": 123,
            "name": "test",
          }
        }
        giftCardErrors={Object {}}
        isFromReview={false}
        labels={Object {}}
        orderBalanceTotal={100}
      />
      <Styled(GiftCardTile)
        applyExistingGiftCardToOrder={[MockFunction]}
        cardData={
          Object {
            "creditCardId": 123,
            "name": "test",
          }
        }
        giftCardErrors={Object {}}
        isFromReview={false}
        labels={Object {}}
        orderBalanceTotal={100}
      />
    </Styled(Col)>
  </Styled(Row)>
  <Styled(Row)
    className="elem-mt-LRG elem-mb-LRG"
    fullBleed={true}
  >
    <Styled(Col)
      colSize={
        Object {
          "large": 3,
          "medium": 4,
          "small": 4,
        }
      }
    >
      <Styled(Button)
        buttonVariation="variable-width"
        className="new_gift_card_button"
        data-locator="gift_apply_button"
        disabled={false}
        fullWidth="true"
        onClick={[Function]}
      />
    </Styled(Col)>
  </Styled(Row)>
</Styled(Grid)>
`;

exports[`GiftCardsVanilla should render gift card tile with 100 order balance with enableAddGiftCard  1`] = `
<Styled(Grid)
  className="test"
>
  <Styled(Row)
    className="gift-section-container elem-mb-LRG"
    fullBleed={true}
  >
    <Styled(Col)
      colSize={
        Object {
          "large": 8,
          "medium": 8,
          "small": 6,
        }
      }
    >
      <Styled(BodyCopy)
        className="elem-mt-XXL"
        color="text.primary"
        component="p"
        data-locator="gift-cards"
        fontFamily="primary"
        fontSize="fs26"
        fontWeight="regular"
        letterSpacing="normal"
        lineHeight="normal"
        link={null}
        textAlign="left"
      />
      <Styled(BodyCopy)
        className="elem-mt-LRG"
        color="text.primary"
        component="p"
        data-locator="gift-cards"
        fontFamily="secondary"
        fontSize="fs16"
        fontWeight="regular"
        letterSpacing="normal"
        lineHeight="normal"
        link={null}
        textAlign="left"
      />
      <Styled(BodyCopy)
        className="elem-mt-MED"
        color="text.primary"
        component="p"
        data-locator="gift-cards"
        fontFamily="secondary"
        fontSize="fs16"
        fontWeight="extrabold"
        letterSpacing="normal"
        lineHeight="normal"
        link={null}
        textAlign="left"
      >
        undefined
      </Styled(BodyCopy)>
      <Styled(GiftCardTile)
        cardData={
          Object {
            "creditCardId": 123,
            "name": "test",
          }
        }
        giftCardErrors={Object {}}
        handleRemoveGiftCard={[MockFunction]}
        isFromReview={false}
        isGiftCardApplied={true}
        labels={Object {}}
      />
      <Styled(GiftCardTile)
        cardData={
          Object {
            "creditCardId": 123,
            "name": "test",
          }
        }
        giftCardErrors={Object {}}
        handleRemoveGiftCard={[MockFunction]}
        isFromReview={false}
        isGiftCardApplied={true}
        labels={Object {}}
      />
      <Styled(BodyCopy)
        className="elem-mt-LRG"
        color="text.primary"
        component="p"
        data-locator="gift-cards"
        fontFamily="secondary"
        fontSize="fs16"
        fontWeight="regular"
        letterSpacing="normal"
        lineHeight="normal"
        link={null}
        textAlign="left"
      >
        <span
          className="headsUpMsgBoldTitle"
        />
        undefined
      </Styled(BodyCopy)>
      <Styled(BodyCopy)
        className="elem-mt-MED"
        color="text.primary"
        component="p"
        data-locator="gift-cards"
        fontFamily="secondary"
        fontSize="fs16"
        fontWeight="extrabold"
        letterSpacing="normal"
        lineHeight="normal"
        link={null}
        textAlign="left"
      >
        undefined
      </Styled(BodyCopy)>
      <Styled(GiftCardTile)
        applyExistingGiftCardToOrder={[MockFunction]}
        cardData={
          Object {
            "creditCardId": 123,
            "name": "test",
          }
        }
        giftCardErrors={Object {}}
        isFromReview={false}
        labels={Object {}}
        orderBalanceTotal={100}
      />
      <Styled(GiftCardTile)
        applyExistingGiftCardToOrder={[MockFunction]}
        cardData={
          Object {
            "creditCardId": 123,
            "name": "test",
          }
        }
        giftCardErrors={Object {}}
        isFromReview={false}
        labels={Object {}}
        orderBalanceTotal={100}
      />
    </Styled(Col)>
  </Styled(Row)>
  <Styled(Row)
    className="gift-card-container elem-mb-LRG"
  >
    <Styled(Col)
      colSize={
        Object {
          "large": 12,
          "medium": 8,
          "small": 6,
        }
      }
    >
      <Styled(BodyCopy)
        className="gift-addgiftcard-container"
        color="text.primary"
        component="div"
        fontFamily="primary"
        fontSize={12}
        fontWeight="regular"
        letterSpacing="normal"
        lineHeight="normal"
        link={null}
        textAlign="left"
      >
        <Styled(Row)
          fullBleed={true}
        >
          <Styled(ErrorMessage)
            error="Duplicate card"
            fontSize="fs12"
            fontWeight="extrabold"
          />
        </Styled(Row)>
        <ReduxForm
          addGiftCardError="Duplicate card"
          destroyOnUnmount={true}
          enableReinitialize={true}
          forceUnregisterOnUnmount={false}
          form="AddGiftCardForm"
          getFormState={[Function]}
          isFromReview={false}
          isLoading={false}
          isRecapchaEnabled={false}
          isRow={true}
          keepDirtyOnReinitialize={false}
          labels={Object {}}
          persistentSubmitErrors={false}
          pure={true}
          saveToAccountEnabled={true}
          shouldAsyncValidate={[Function]}
          shouldError={[Function]}
          shouldValidate={[Function]}
          shouldWarn={[Function]}
          submitAsSideEffect={false}
          touchOnBlur={true}
          touchOnChange={false}
          updateUnregisteredFields={false}
          validate={[Function]}
        />
      </Styled(BodyCopy)>
    </Styled(Col)>
  </Styled(Row)>
</Styled(Grid)>
`;

exports[`GiftCardsVanilla should render gift card tile with 100 order balance with enableAddGiftCard and with isExpressCheckout flag true 1`] = `
<Styled(Grid)
  className="test"
>
  <Styled(Row)
    className="gift-section-container elem-mb-LRG"
    fullBleed={true}
  >
    <Styled(Col)
      colSize={
        Object {
          "large": 12,
          "medium": 8,
          "small": 6,
        }
      }
    >
      <Styled(BodyCopy)
        className="elem-mt-MED"
        color="text.primary"
        component="p"
        data-locator="gift-cards"
        fontFamily="secondary"
        fontSize="fs16"
        fontWeight="extrabold"
        letterSpacing="normal"
        lineHeight="normal"
        link={null}
        textAlign="left"
      >
        undefined
      </Styled(BodyCopy)>
      <Styled(GiftCardTile)
        cardData={
          Object {
            "creditCardId": 123,
            "name": "test",
          }
        }
        giftCardErrors={Object {}}
        handleRemoveGiftCard={[MockFunction]}
        isExpressCheckout={true}
        isFromReview={true}
        isGiftCardApplied={true}
        labels={Object {}}
      />
      <Styled(GiftCardTile)
        cardData={
          Object {
            "creditCardId": 123,
            "name": "test",
          }
        }
        giftCardErrors={Object {}}
        handleRemoveGiftCard={[MockFunction]}
        isExpressCheckout={true}
        isFromReview={true}
        isGiftCardApplied={true}
        labels={Object {}}
      />
      <Styled(BodyCopy)
        className="elem-mt-LRG"
        color="text.primary"
        component="p"
        data-locator="gift-cards"
        fontFamily="secondary"
        fontSize="fs16"
        fontWeight="regular"
        letterSpacing="normal"
        lineHeight="normal"
        link={null}
        textAlign="left"
      >
        <span
          className="headsUpMsgBoldTitle"
        />
        undefined
      </Styled(BodyCopy)>
      <Styled(BodyCopy)
        className="elem-mt-MED"
        color="text.primary"
        component="p"
        data-locator="gift-cards"
        fontFamily="secondary"
        fontSize="fs16"
        fontWeight="extrabold"
        letterSpacing="normal"
        lineHeight="normal"
        link={null}
        textAlign="left"
      >
        undefined
      </Styled(BodyCopy)>
      <Styled(GiftCardTile)
        applyExistingGiftCardToOrder={[MockFunction]}
        cardData={
          Object {
            "creditCardId": 123,
            "name": "test",
          }
        }
        giftCardErrors={Object {}}
        isExpressCheckout={true}
        isFromReview={true}
        labels={Object {}}
        orderBalanceTotal={100}
      />
      <Styled(GiftCardTile)
        applyExistingGiftCardToOrder={[MockFunction]}
        cardData={
          Object {
            "creditCardId": 123,
            "name": "test",
          }
        }
        giftCardErrors={Object {}}
        isExpressCheckout={true}
        isFromReview={true}
        labels={Object {}}
        orderBalanceTotal={100}
      />
    </Styled(Col)>
  </Styled(Row)>
  <Styled(Row)
    className="elem-mt-LRG elem-mb-LRG"
    fullBleed={true}
  >
    <Styled(Col)
      colSize={
        Object {
          "large": 6,
          "medium": 4,
          "small": 4,
        }
      }
    >
      <Styled(Button)
        buttonVariation="variable-width"
        className="new_gift_card_button"
        data-locator="gift_apply_button"
        disabled={false}
        fullWidth="true"
        onClick={[Function]}
      />
    </Styled(Col)>
  </Styled(Row)>
</Styled(Grid)>
`;
