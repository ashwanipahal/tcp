// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CheckoutAddress should call onSameAsShippingChange 1`] = `
<div
  className=""
>
  <Styled(Heading)
    className="paymentMethodHeading elem-mt-MED elem-mb-LRG"
    color="text.primary"
    component="h2"
    dataLocator="billing-payment-billingAddress"
    textAlign="left"
    variant="listMenu"
  >
    lbl_billing_billingAddress
  </Styled(Heading)>
  <FormSection
    name="address"
  >
    <Styled(AddressFields)
      className="elem-mb-LRG"
      dispatch={
        [MockFunction] {
          "calls": Array [
            Array [
              Object {
                "meta": Object {
                  "field": "address.firstName",
                  "form": undefined,
                  "persistentSubmitErrors": undefined,
                  "touch": undefined,
                },
                "payload": undefined,
                "type": "@@redux-form/CHANGE",
              },
            ],
            Array [
              Object {
                "meta": Object {
                  "field": "address.lastName",
                  "form": undefined,
                  "persistentSubmitErrors": undefined,
                  "touch": undefined,
                },
                "payload": undefined,
                "type": "@@redux-form/CHANGE",
              },
            ],
            Array [
              Object {
                "meta": Object {
                  "field": "address.addressLine1",
                  "form": undefined,
                  "persistentSubmitErrors": undefined,
                  "touch": undefined,
                },
                "payload": undefined,
                "type": "@@redux-form/CHANGE",
              },
            ],
            Array [
              Object {
                "meta": Object {
                  "field": "address.addressLine2",
                  "form": undefined,
                  "persistentSubmitErrors": undefined,
                  "touch": undefined,
                },
                "payload": undefined,
                "type": "@@redux-form/CHANGE",
              },
            ],
            Array [
              Object {
                "meta": Object {
                  "field": "address.state",
                  "form": undefined,
                  "persistentSubmitErrors": undefined,
                  "touch": undefined,
                },
                "payload": undefined,
                "type": "@@redux-form/CHANGE",
              },
            ],
            Array [
              Object {
                "meta": Object {
                  "field": "address.city",
                  "form": undefined,
                  "persistentSubmitErrors": undefined,
                  "touch": undefined,
                },
                "payload": undefined,
                "type": "@@redux-form/CHANGE",
              },
            ],
            Array [
              Object {
                "meta": Object {
                  "field": "address.zipCode",
                  "form": undefined,
                  "persistentSubmitErrors": undefined,
                  "touch": undefined,
                },
                "payload": undefined,
                "type": "@@redux-form/CHANGE",
              },
            ],
            Array [
              Object {
                "meta": Object {
                  "field": "address.country",
                  "form": undefined,
                  "persistentSubmitErrors": undefined,
                  "touch": undefined,
                },
                "payload": undefined,
                "type": "@@redux-form/CHANGE",
              },
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": undefined,
            },
            Object {
              "type": "return",
              "value": undefined,
            },
            Object {
              "type": "return",
              "value": undefined,
            },
            Object {
              "type": "return",
              "value": undefined,
            },
            Object {
              "type": "return",
              "value": undefined,
            },
            Object {
              "type": "return",
              "value": undefined,
            },
            Object {
              "type": "return",
              "value": undefined,
            },
            Object {
              "type": "return",
              "value": undefined,
            },
          ],
        }
      }
      formSection="address"
      grayTextBox={true}
      isGuest={true}
      showDefaultCheckbox={false}
      showPhoneNumber={false}
      variation="primary"
    />
  </FormSection>
</div>
`;

exports[`CheckoutAddress should render correctly 1`] = `
<div
  className=""
>
  <Styled(Heading)
    className="paymentMethodHeading elem-mt-MED elem-mb-LRG"
    color="text.primary"
    component="h2"
    dataLocator="billing-payment-billingAddress"
    textAlign="left"
    variant="listMenu"
  >
    lbl_billing_billingAddress
  </Styled(Heading)>
  <Styled(Row)
    fullBleed={true}
  >
    <Styled(Col)
      colSize={
        Object {
          "large": 6,
          "medium": 5,
          "small": 6,
        }
      }
    >
      <Field
        className="elem-mb-LRG"
        component={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-bwzfXH",
              "isStatic": false,
              "rules": Array [
                "
  ",
                "
  display: block;
  align-items: ",
                [Function],
                ";

  & .CheckBox__input {
    flex: 0 0 auto;
    position: relative;
    top: 0;
    appearance: none;
    outline: 0;
    border: 0;
    height: ",
                "25px",
                ";
    width: ",
                "25px",
                ";
    margin: 0;
    margin-right: ",
                [Function],
                ";
    display: inline-block;
    vertical-align: top;
  }

  & .CheckBox__input:before {
    content: '';
    position: absolute;
    height: 100%;
    width: 100%;
    left: 0;
    border: 1px solid ",
                [Function],
                ";
  }

  & .CheckBox__input:checked:before {
    background: ",
                [Function],
                ";
    border: 1px solid ",
                [Function],
                ";
  }

  & .CheckBox__input:checked:after {
    transform: rotate(225deg);
    content: '';
    border: 2px solid ",
                [Function],
                ";
    font-size: ",
                [Function],
                "px;
    width: ",
                [Function],
                ";
    height: 10px;
    border-right: 0;
    border-bottom: 0;
    left: 10px;
    top: 5px;
    position: absolute;
  }

  & .CheckBox__text {
    width: calc(100% - 45px);
    display: inline-block;
  }

  & .CheckBox__text a {
    color: ",
                [Function],
                ";
  }

  & .disabled {
    opacity: ",
                [Function],
                ";
  }

  & .Checkbox__error {
    display: flex;
    flex-direction: row;
    padding-left: ",
                [Function],
                ";
  }
  & .warning-icon {
    background: transparent url('/static/images/circle-alert-fill.svg') no-repeat 0 0;
    background-size: contain;
    border: none;
    height: ",
                [Function],
                ";
    width: ",
                [Function],
                ";
    margin-right: 4px;
    margin-top: 2px;
  }
",
                ";
",
              ],
            },
            "displayName": "Styled(InputCheckbox)",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-bwzfXH",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        name="sameAsShipping"
        onChange={[Function]}
        showDefaultCheckbox={false}
      >
        <Styled(BodyCopy)
          className={null}
          color="text.primary"
          component="p"
          fontFamily="secondary"
          fontSize="fs16"
          fontWeight="regular"
          letterSpacing="normal"
          lineHeight="normal"
          textAlign="left"
        >
          lbl_billing_sameAsShipping
        </Styled(BodyCopy)>
      </Field>
    </Styled(Col)>
  </Styled(Row)>
  <FormSection
    name="address"
  >
    <Styled(AddressFields)
      className="elem-mb-LRG"
      dispatch={[MockFunction]}
      formSection="address"
      grayTextBox={true}
      isGuest={true}
      showDefaultCheckbox={false}
      showPhoneNumber={false}
      variation="primary"
    />
  </FormSection>
</div>
`;

exports[`CheckoutAddress should render correctly if order doesnot have shipping items 1`] = `
<div
  className=""
>
  <Styled(Heading)
    className="paymentMethodHeading elem-mt-MED elem-mb-LRG"
    color="text.primary"
    component="h2"
    dataLocator="billing-payment-billingAddress"
    textAlign="left"
    variant="listMenu"
  >
    lbl_billing_billingAddress
  </Styled(Heading)>
  <FormSection
    name="address"
  >
    <Styled(AddressFields)
      className="elem-mb-LRG"
      dispatch={[MockFunction]}
      formSection="address"
      grayTextBox={true}
      isGuest={true}
      showDefaultCheckbox={false}
      showPhoneNumber={false}
      variation="primary"
    />
  </FormSection>
</div>
`;
