// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`GiftCardsVanilla should render gift card tile 1`] = `
<Fragment>
  <Styled(View)>
    <Styled(Styled(BodyCopy))
      accessibilityText=""
      color="gray.900"
      dataLocator=""
      fontFamily="primary"
      fontSize="fs26"
      fontWeight="regular"
      margin={null}
      numberOfLines={null}
      spacingStyles="margin-bottom-MED"
      text="lbl_giftcard_title"
      textDecoration={null}
    />
    <Styled(Styled(BodyCopy))
      accessibilityText=""
      color="gray.900"
      dataLocator=""
      fontFamily="primary"
      fontSize="fs16"
      fontWeight="regular"
      margin={null}
      numberOfLines={null}
      spacingStyles="margin-bottom-MED"
      text="lbl_giftcard_addUptoMsg"
      textDecoration={null}
    />
    <Styled(Styled(BodyCopy))
      accessibilityText=""
      color="gray.900"
      dataLocator=""
      fontFamily="secondary"
      fontSize="fs16"
      fontWeight="extrabold"
      margin={null}
      numberOfLines={null}
      spacingStyles="margin-bottom-MED"
      text="lbl_giftcard_appliedCards"
      textDecoration={null}
    />
    <Styled(View)>
      <GiftCardTile
        cardData={
          Object {
            "creditCardId": 123,
            "name": "test",
          }
        }
        giftCardErrors={Object {}}
        handleRemoveGiftCard={[MockFunction]}
        isGiftCardApplied={true}
        labels={Object {}}
        orderBalanceTotal={0}
      />
    </Styled(View)>
    <Styled(View)>
      <GiftCardTile
        cardData={
          Object {
            "creditCardId": 123,
            "name": "test",
          }
        }
        giftCardErrors={Object {}}
        handleRemoveGiftCard={[MockFunction]}
        isGiftCardApplied={true}
        labels={Object {}}
        orderBalanceTotal={0}
      />
    </Styled(View)>
    <Styled(Text)>
      <Styled(Styled(BodyCopy))
        accessibilityText=""
        color="gray.900"
        dataLocator=""
        fontFamily="secondary"
        fontSize="fs16"
        fontWeight="semibold"
        margin={null}
        numberOfLines={null}
        spacingStyles="margin-bottom-MED margin-top-MED"
        text="lbl_giftcard_headsUpTitle "
        textDecoration={null}
      />
      <Styled(Styled(BodyCopy))
        accessibilityText=""
        color="gray.900"
        dataLocator=""
        fontFamily="primary"
        fontSize="fs16"
        fontWeight="regular"
        margin={null}
        numberOfLines={null}
        spacingStyles="margin-left-SM"
        text="lbl_giftcard_headsUpMsg"
        textDecoration={null}
      />
    </Styled(Text)>
    <Styled(Styled(BodyCopy))
      accessibilityText=""
      color="gray.900"
      dataLocator=""
      fontFamily="secondary"
      fontSize="fs16"
      fontWeight="extrabold"
      margin={null}
      numberOfLines={null}
      spacingStyles="margin-bottom-MED margin-top-MED"
      text="lbl_giftcard_availableCards"
      textDecoration={null}
    />
    <Styled(View)>
      <GiftCardTile
        applyExistingGiftCardToOrder={[MockFunction]}
        cardData={
          Object {
            "creditCardId": 123,
            "name": "test",
          }
        }
        giftCardErrors={Object {}}
        isGiftCardApplied={false}
        labels={Object {}}
        orderBalanceTotal={0}
      />
    </Styled(View)>
    <Styled(View)>
      <GiftCardTile
        applyExistingGiftCardToOrder={[MockFunction]}
        cardData={
          Object {
            "creditCardId": 123,
            "name": "test",
          }
        }
        giftCardErrors={Object {}}
        isGiftCardApplied={false}
        labels={Object {}}
        orderBalanceTotal={0}
      />
    </Styled(View)>
  </Styled(View)>
</Fragment>
`;

exports[`GiftCardsVanilla should render gift card tile with 0 order balance 1`] = `
<Fragment>
  <Styled(View)>
    <Styled(Styled(BodyCopy))
      accessibilityText=""
      color="gray.900"
      dataLocator=""
      fontFamily="primary"
      fontSize="fs26"
      fontWeight="regular"
      margin={null}
      numberOfLines={null}
      spacingStyles="margin-bottom-MED"
      text="lbl_giftcard_title"
      textDecoration={null}
    />
    <Styled(Styled(BodyCopy))
      accessibilityText=""
      color="gray.900"
      dataLocator=""
      fontFamily="primary"
      fontSize="fs16"
      fontWeight="regular"
      margin={null}
      numberOfLines={null}
      spacingStyles="margin-bottom-MED"
      text="lbl_giftcard_addUptoMsg"
      textDecoration={null}
    />
    <Styled(Styled(BodyCopy))
      accessibilityText=""
      color="gray.900"
      dataLocator=""
      fontFamily="secondary"
      fontSize="fs16"
      fontWeight="extrabold"
      margin={null}
      numberOfLines={null}
      spacingStyles="margin-bottom-MED"
      text="lbl_giftcard_appliedCards"
      textDecoration={null}
    />
    <Styled(View)>
      <GiftCardTile
        cardData={
          Object {
            "creditCardId": 123,
            "name": "test",
          }
        }
        giftCardErrors={Object {}}
        handleRemoveGiftCard={[MockFunction]}
        isGiftCardApplied={true}
        labels={Object {}}
        orderBalanceTotal={0}
      />
    </Styled(View)>
    <Styled(View)>
      <GiftCardTile
        cardData={
          Object {
            "creditCardId": 123,
            "name": "test",
          }
        }
        giftCardErrors={Object {}}
        handleRemoveGiftCard={[MockFunction]}
        isGiftCardApplied={true}
        labels={Object {}}
        orderBalanceTotal={0}
      />
    </Styled(View)>
    <Styled(Text)>
      <Styled(Styled(BodyCopy))
        accessibilityText=""
        color="gray.900"
        dataLocator=""
        fontFamily="secondary"
        fontSize="fs16"
        fontWeight="semibold"
        margin={null}
        numberOfLines={null}
        spacingStyles="margin-bottom-MED margin-top-MED"
        text="lbl_giftcard_headsUpTitle "
        textDecoration={null}
      />
      <Styled(Styled(BodyCopy))
        accessibilityText=""
        color="gray.900"
        dataLocator=""
        fontFamily="primary"
        fontSize="fs16"
        fontWeight="regular"
        margin={null}
        numberOfLines={null}
        spacingStyles="margin-left-SM"
        text="lbl_giftcard_headsUpMsg"
        textDecoration={null}
      />
    </Styled(Text)>
    <Styled(Styled(BodyCopy))
      accessibilityText=""
      color="gray.900"
      dataLocator=""
      fontFamily="secondary"
      fontSize="fs16"
      fontWeight="extrabold"
      margin={null}
      numberOfLines={null}
      spacingStyles="margin-bottom-MED margin-top-MED"
      text="lbl_giftcard_availableCards"
      textDecoration={null}
    />
    <Styled(View)>
      <GiftCardTile
        applyExistingGiftCardToOrder={[MockFunction]}
        cardData={
          Object {
            "creditCardId": 123,
            "name": "test",
          }
        }
        giftCardErrors={Object {}}
        isGiftCardApplied={false}
        labels={Object {}}
        orderBalanceTotal={0}
      />
    </Styled(View)>
    <Styled(View)>
      <GiftCardTile
        applyExistingGiftCardToOrder={[MockFunction]}
        cardData={
          Object {
            "creditCardId": 123,
            "name": "test",
          }
        }
        giftCardErrors={Object {}}
        isGiftCardApplied={false}
        labels={Object {}}
        orderBalanceTotal={0}
      />
    </Styled(View)>
  </Styled(View)>
</Fragment>
`;

exports[`GiftCardsVanilla should render gift card tile with 100 order balance 1`] = `
<Fragment>
  <Styled(View)>
    <Styled(Styled(BodyCopy))
      accessibilityText=""
      color="gray.900"
      dataLocator=""
      fontFamily="primary"
      fontSize="fs26"
      fontWeight="regular"
      margin={null}
      numberOfLines={null}
      spacingStyles="margin-bottom-MED"
      text="lbl_giftcard_title"
      textDecoration={null}
    />
    <Styled(Styled(BodyCopy))
      accessibilityText=""
      color="gray.900"
      dataLocator=""
      fontFamily="primary"
      fontSize="fs16"
      fontWeight="regular"
      margin={null}
      numberOfLines={null}
      spacingStyles="margin-bottom-MED"
      text="lbl_giftcard_addUptoMsg"
      textDecoration={null}
    />
    <Styled(Styled(BodyCopy))
      accessibilityText=""
      color="gray.900"
      dataLocator=""
      fontFamily="secondary"
      fontSize="fs16"
      fontWeight="extrabold"
      margin={null}
      numberOfLines={null}
      spacingStyles="margin-bottom-MED"
      text="lbl_giftcard_appliedCards"
      textDecoration={null}
    />
    <Styled(View)>
      <GiftCardTile
        cardData={
          Object {
            "creditCardId": 123,
            "name": "test",
          }
        }
        giftCardErrors={Object {}}
        handleRemoveGiftCard={[MockFunction]}
        isGiftCardApplied={true}
        labels={Object {}}
        orderBalanceTotal={0}
      />
    </Styled(View)>
    <Styled(View)>
      <GiftCardTile
        cardData={
          Object {
            "creditCardId": 123,
            "name": "test",
          }
        }
        giftCardErrors={Object {}}
        handleRemoveGiftCard={[MockFunction]}
        isGiftCardApplied={true}
        labels={Object {}}
        orderBalanceTotal={0}
      />
    </Styled(View)>
    <Styled(Text)>
      <Styled(Styled(BodyCopy))
        accessibilityText=""
        color="gray.900"
        dataLocator=""
        fontFamily="secondary"
        fontSize="fs16"
        fontWeight="semibold"
        margin={null}
        numberOfLines={null}
        spacingStyles="margin-bottom-MED margin-top-MED"
        text="lbl_giftcard_headsUpTitle "
        textDecoration={null}
      />
      <Styled(Styled(BodyCopy))
        accessibilityText=""
        color="gray.900"
        dataLocator=""
        fontFamily="primary"
        fontSize="fs16"
        fontWeight="regular"
        margin={null}
        numberOfLines={null}
        spacingStyles="margin-left-SM"
        text="lbl_giftcard_headsUpMsg"
        textDecoration={null}
      />
    </Styled(Text)>
    <Styled(Styled(BodyCopy))
      accessibilityText=""
      color="gray.900"
      dataLocator=""
      fontFamily="secondary"
      fontSize="fs16"
      fontWeight="extrabold"
      margin={null}
      numberOfLines={null}
      spacingStyles="margin-bottom-MED margin-top-MED"
      text="lbl_giftcard_availableCards"
      textDecoration={null}
    />
    <Styled(View)>
      <GiftCardTile
        applyExistingGiftCardToOrder={[MockFunction]}
        cardData={
          Object {
            "creditCardId": 123,
            "name": "test",
          }
        }
        giftCardErrors={Object {}}
        isGiftCardApplied={false}
        labels={Object {}}
        orderBalanceTotal={100}
      />
    </Styled(View)>
    <Styled(View)>
      <GiftCardTile
        applyExistingGiftCardToOrder={[MockFunction]}
        cardData={
          Object {
            "creditCardId": 123,
            "name": "test",
          }
        }
        giftCardErrors={Object {}}
        isGiftCardApplied={false}
        labels={Object {}}
        orderBalanceTotal={100}
      />
    </Styled(View)>
    <Styled(View)>
      <Styled(WithTheme(CustomButton))
        data-locator="add-gift-card"
        fill="DARK"
        onPress={[Function]}
        text="lbl_giftcard_newGiftCard"
        type="submit"
      />
    </Styled(View)>
  </Styled(View)>
</Fragment>
`;

exports[`GiftCardsVanilla should render gift card tile with 100 order balance with enableAddGiftCard  1`] = `
<Fragment>
  <Styled(View)>
    <Styled(Styled(BodyCopy))
      accessibilityText=""
      color="gray.900"
      dataLocator=""
      fontFamily="primary"
      fontSize="fs26"
      fontWeight="regular"
      margin={null}
      numberOfLines={null}
      spacingStyles="margin-bottom-MED"
      text="lbl_giftcard_title"
      textDecoration={null}
    />
    <Styled(Styled(BodyCopy))
      accessibilityText=""
      color="gray.900"
      dataLocator=""
      fontFamily="primary"
      fontSize="fs16"
      fontWeight="regular"
      margin={null}
      numberOfLines={null}
      spacingStyles="margin-bottom-MED"
      text="lbl_giftcard_addUptoMsg"
      textDecoration={null}
    />
    <Styled(Styled(BodyCopy))
      accessibilityText=""
      color="gray.900"
      dataLocator=""
      fontFamily="secondary"
      fontSize="fs16"
      fontWeight="extrabold"
      margin={null}
      numberOfLines={null}
      spacingStyles="margin-bottom-MED"
      text="lbl_giftcard_appliedCards"
      textDecoration={null}
    />
    <Styled(View)>
      <GiftCardTile
        cardData={
          Object {
            "creditCardId": 123,
            "name": "test",
          }
        }
        giftCardErrors={Object {}}
        handleRemoveGiftCard={[MockFunction]}
        isGiftCardApplied={true}
        labels={Object {}}
        orderBalanceTotal={0}
      />
    </Styled(View)>
    <Styled(View)>
      <GiftCardTile
        cardData={
          Object {
            "creditCardId": 123,
            "name": "test",
          }
        }
        giftCardErrors={Object {}}
        handleRemoveGiftCard={[MockFunction]}
        isGiftCardApplied={true}
        labels={Object {}}
        orderBalanceTotal={0}
      />
    </Styled(View)>
    <Styled(Text)>
      <Styled(Styled(BodyCopy))
        accessibilityText=""
        color="gray.900"
        dataLocator=""
        fontFamily="secondary"
        fontSize="fs16"
        fontWeight="semibold"
        margin={null}
        numberOfLines={null}
        spacingStyles="margin-bottom-MED margin-top-MED"
        text="lbl_giftcard_headsUpTitle "
        textDecoration={null}
      />
      <Styled(Styled(BodyCopy))
        accessibilityText=""
        color="gray.900"
        dataLocator=""
        fontFamily="primary"
        fontSize="fs16"
        fontWeight="regular"
        margin={null}
        numberOfLines={null}
        spacingStyles="margin-left-SM"
        text="lbl_giftcard_headsUpMsg"
        textDecoration={null}
      />
    </Styled(Text)>
    <Styled(Styled(BodyCopy))
      accessibilityText=""
      color="gray.900"
      dataLocator=""
      fontFamily="secondary"
      fontSize="fs16"
      fontWeight="extrabold"
      margin={null}
      numberOfLines={null}
      spacingStyles="margin-bottom-MED margin-top-MED"
      text="lbl_giftcard_availableCards"
      textDecoration={null}
    />
    <Styled(View)>
      <GiftCardTile
        applyExistingGiftCardToOrder={[MockFunction]}
        cardData={
          Object {
            "creditCardId": 123,
            "name": "test",
          }
        }
        giftCardErrors={Object {}}
        isGiftCardApplied={false}
        labels={Object {}}
        orderBalanceTotal={100}
      />
    </Styled(View)>
    <Styled(View)>
      <GiftCardTile
        applyExistingGiftCardToOrder={[MockFunction]}
        cardData={
          Object {
            "creditCardId": 123,
            "name": "test",
          }
        }
        giftCardErrors={Object {}}
        isGiftCardApplied={false}
        labels={Object {}}
        orderBalanceTotal={100}
      />
    </Styled(View)>
    <Styled(View)>
      <Styled(Styled(BodyCopy))
        accessibilityText=""
        color="error"
        dataLocator=""
        fontSize="fs12"
        fontWeight="semibold"
        margin={null}
        mobileFontFamily={
          Array [
            "secondary",
          ]
        }
        numberOfLines={null}
        text="Duplicate"
        textDecoration={null}
      />
      <AddGiftCardForm
        addGiftCardError="Duplicate"
        addGiftCardResponse={null}
        change={[Function]}
        handleSubmit={[Function]}
        isLoading={false}
        isRecapchaEnabled={false}
        isRow={true}
        labels={Object {}}
        onAddGiftCardClick={[Function]}
        onClearError={[Function]}
        saveToAccountEnabled={true}
        toggleModal={[Function]}
      />
    </Styled(View)>
  </Styled(View)>
</Fragment>
`;
