// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`RegisteredShippingFormVanilla should render correctly  1`] = `
<div
  className=""
  data-locator="shipping-details"
  isEditing={null}
>
  <Styled(Row)
    fullBleed={true}
  >
    <Styled(Col)
      className="address-dropDown"
      colSize={
        Object {
          "large": 6,
          "medium": 8,
          "small": 6,
        }
      }
      data-locator="address-dropdown"
      isEditing={null}
    >
      <Field
        component={[Function]}
        dataLocatorObj={
          Object {
            "dropDownList": "shipping-details-lst",
            "heading": "address-book-txt",
          }
        }
        id="onFileAddressKey"
        name="onFileAddressKey"
        onChange={[Function]}
        options={
          Immutable.List [
            Object {
              "content": <div
                className="address-wrapper"
              >
                <ForwardRef
                  address={
                    Object {
                      "addressLine": Array [
                        "addressline 1",
                        "addressline 2",
                      ],
                      "city": "test city",
                      "country": "test country",
                      "firstName": "test",
                      "lastName": "test",
                      "phone1": "1234567890",
                      "primary": "true",
                    }
                  }
                  className="address"
                  isDefault={true}
                  showCountry={false}
                  showDefault={false}
                  showPhone={false}
                />
                <ForwardRef
                  className="default-badge"
                  dataLocator="shipping-defshippinglabel"
                  showCheckmark={true}
                >
                  lbl_shipping_default
                </ForwardRef>
              </div>,
              "title": "test test (Default)",
              "value": undefined,
            },
            Object {
              "content": <ForwardRef
                buttonVariation="variable-width"
                dataLocator="new-addressbtn"
                disabled={false}
                fill="BLACK"
                fullWidth={true}
                onClick={[Function]}
              >
                lbl_shipping_addNewAddress
              </ForwardRef>,
              "title": "Add New Address",
              "value": "",
            },
          ]
        }
        selectListTitle="Select from address book"
      />
    </Styled(Col)>
  </Styled(Row)>
  <Styled(Row)
    className="hide-on-mobile"
    fullBleed={true}
  >
    <Styled(Col)
      colSize={
        Object {
          "large": 4,
          "medium": 6,
          "small": 6,
        }
      }
    >
      <Styled(BodyCopy)
        className="elem-mb-XS"
        color="text.primary"
        component="p"
        data-locator="shipping-details"
        fontFamily="primary"
        fontSize="fs28"
        fontWeight="regular"
        letterSpacing="normal"
        lineHeight="normal"
        link={null}
        textAlign="left"
      >
        lbl_shipping_sectionHeader
      </Styled(BodyCopy)>
    </Styled(Col)>
    <Styled(Col)
      colSize={
        Object {
          "large": 1,
          "medium": 1,
          "small": 1,
        }
      }
    >
      <Styled(Anchor)
        anchorVariation="primary"
        dataLocator="edit-shipping-address"
        fontSizeVariation="small"
        noLink={true}
        onClick={[Function]}
        underline={true}
      >
        lbl_shipping_edit
      </Styled(Anchor)>
    </Styled(Col)>
  </Styled(Row)>
  <Styled(Row)
    fullBleed={true}
  >
    <Styled(Col)
      colSize={
        Object {
          "large": 4,
          "medium": 4,
          "small": 5,
        }
      }
    >
      <Styled(Address)
        address={null}
        className="shipping__address"
        dataLocatorPrefix="shipping"
        parentDataLocator="shipping-details"
        showPhone={true}
      />
    </Styled(Col)>
    <Styled(Col)
      className="hide-on-desktop"
      colSize={
        Object {
          "large": 1,
          "medium": 1,
          "small": 1,
        }
      }
    >
      <Styled(Anchor)
        anchorVariation="primary"
        dataLocator="edit-shipping-address"
        fontSizeVariation="small"
        noLink={true}
        onClick={[Function]}
        underline={true}
      >
        lbl_shipping_edit
      </Styled(Anchor)>
    </Styled(Col)>
  </Styled(Row)>
  <Styled(Row)
    fullBleed={true}
  />
  <Styled(AddEditShippingAddress)
    actionButtons={[Function]}
    addressFields={[Function]}
    defaultOptions={[Function]}
    modalState={false}
    modalType={null}
  />
</div>
`;

exports[`RegisteredShippingFormVanilla should render correctly modalType add 1`] = `
<div
  className=""
  data-locator="shipping-details"
  isEditing={null}
>
  <Styled(AddEditShippingAddress)
    actionButtons={[Function]}
    addressFields={[Function]}
    defaultOptions={[Function]}
    modalState={true}
    modalType="add"
  />
</div>
`;

exports[`RegisteredShippingFormVanilla should render correctly modalType edit 1`] = `
<div
  className=""
  data-locator="shipping-details"
  isEditing={null}
>
  <Styled(AddEditShippingAddress)
    actionButtons={[Function]}
    addressFields={[Function]}
    defaultOptions={[Function]}
    modalState={true}
    modalType="edit"
  />
</div>
`;

exports[`RegisteredShippingFormVanilla should render correctly onAddressDropDownChange 1`] = `
<div
  className=""
  data-locator="shipping-details"
  isEditing={true}
>
  <Styled(Row)
    fullBleed={true}
  >
    <Styled(Col)
      className="address-dropDown"
      colSize={
        Object {
          "large": 6,
          "medium": 8,
          "small": 6,
        }
      }
      data-locator="address-dropdown"
      isEditing={true}
    >
      <Field
        component={[Function]}
        dataLocatorObj={
          Object {
            "dropDownList": "shipping-details-lst",
            "heading": "address-book-txt",
          }
        }
        id="onFileAddressKey"
        name="onFileAddressKey"
        onChange={[Function]}
        options={
          Immutable.List [
            Object {
              "content": <div
                className="address-wrapper"
              >
                <ForwardRef
                  address={
                    Object {
                      "addressId": "123",
                      "addressLine": Array [
                        "addressline 1 hhh",
                        "addressline 2 mmm",
                      ],
                      "city": "test city",
                      "country": "test country hhh",
                      "firstName": "test",
                      "lastName": "test",
                      "phone1": "1234567890",
                    }
                  }
                  className="address"
                  isDefault={false}
                  showCountry={false}
                  showDefault={false}
                  showPhone={false}
                />
              </div>,
              "title": "test test ",
              "value": "123",
            },
            Object {
              "content": <ForwardRef
                buttonVariation="variable-width"
                dataLocator="new-addressbtn"
                disabled={false}
                fill="BLACK"
                fullWidth={true}
                onClick={[Function]}
              >
                lbl_shipping_addNewAddress
              </ForwardRef>,
              "title": "Add New Address",
              "value": "",
            },
          ]
        }
        selectListTitle="Select from address book"
      />
    </Styled(Col)>
  </Styled(Row)>
  <Styled(Row)
    className="hide-on-mobile"
    fullBleed={true}
  >
    <Styled(Col)
      colSize={
        Object {
          "large": 4,
          "medium": 6,
          "small": 6,
        }
      }
    >
      <Styled(BodyCopy)
        className="elem-mb-XS"
        color="text.primary"
        component="p"
        data-locator="shipping-details"
        fontFamily="primary"
        fontSize="fs28"
        fontWeight="regular"
        letterSpacing="normal"
        lineHeight="normal"
        link={null}
        textAlign="left"
      >
        lbl_shipping_sectionHeader
      </Styled(BodyCopy)>
    </Styled(Col)>
  </Styled(Row)>
  <Styled(Row)
    fullBleed={true}
  >
    <Styled(Col)
      colSize={
        Object {
          "large": 12,
          "medium": 8,
          "small": 6,
        }
      }
    >
      <div
        className="address-form"
      >
        <FormSection
          name="address"
        >
          <Styled(AddressFields)
            addressPhoneNo={null}
            dispatch={
              [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "meta": Object {
                        "field": "onFileAddressKey",
                        "form": "checkoutShipping",
                        "persistentSubmitErrors": undefined,
                        "touch": undefined,
                      },
                      "payload": "123",
                      "type": "@@redux-form/CHANGE",
                    },
                  ],
                  Array [
                    Object {
                      "meta": Object {
                        "field": "defaultShipping",
                        "form": "checkoutShipping",
                        "persistentSubmitErrors": undefined,
                        "touch": undefined,
                      },
                      "payload": false,
                      "type": "@@redux-form/CHANGE",
                    },
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                ],
              }
            }
            formName="checkoutShipping"
            formSection="address"
            isGuest={false}
            showDefaultCheckbox={false}
            variation="secondary"
          />
        </FormSection>
      </div>
    </Styled(Col)>
    <Styled(Col)
      className="hide-on-desktop"
      colSize={
        Object {
          "large": 1,
          "medium": 1,
          "small": 1,
        }
      }
    >
      <Styled(Anchor)
        anchorVariation="primary"
        dataLocator="edit-shipping-address"
        fontSizeVariation="small"
        noLink={true}
        onClick={[Function]}
        underline={true}
      >
        lbl_shipping_edit
      </Styled(Anchor)>
    </Styled(Col)>
  </Styled(Row)>
  <Styled(Row)
    fullBleed={true}
  >
    <Styled(Col)
      className="default-shipping"
      colSize={
        Object {
          "large": 12,
          "medium": 8,
          "small": 6,
        }
      }
      isEditing={true}
    >
      <Field
        component={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-ifAKCX",
              "isStatic": false,
              "rules": Array [
                "
  ",
                "
  display: block;
  align-items: ",
                [Function],
                ";

  & .CheckBox__input {
    flex: 0 0 auto;
    position: relative;
    top: 0;
    appearance: none;
    outline: 0;
    border: 0;
    height: ",
                "25px",
                ";
    width: ",
                "25px",
                ";
    margin: 0;
    margin-right: ",
                [Function],
                ";
    display: inline-block;
    vertical-align: top;
  }

  & .CheckBox__input:before {
    content: '';
    position: absolute;
    height: 100%;
    width: 100%;
    left: 0;
    border: 1px solid ",
                [Function],
                ";
  }

  & .CheckBox__input:checked:before {
    background: ",
                [Function],
                ";
    border: 1px solid ",
                [Function],
                ";
  }

  & .CheckBox__input:checked:after {
    transform: rotate(225deg);
    content: '';
    border: 2px solid ",
                [Function],
                ";
    font-size: ",
                [Function],
                "px;
    width: ",
                [Function],
                ";
    height: 10px;
    border-right: 0;
    border-bottom: 0;
    left: 10px;
    top: 5px;
    position: absolute;
  }

  & .CheckBox__text {
    width: calc(100% - 45px);
    display: inline-block;
  }

  & .CheckBox__text a {
    color: ",
                [Function],
                ";
  }

  & .disabled {
    opacity: ",
                [Function],
                ";
  }

  & .Checkbox__error {
    display: flex;
    flex-direction: row;
    padding-left: ",
                [Function],
                ";
  }
  & .warning-icon {
    background: transparent url('/static/images/circle-alert-fill.svg') no-repeat 0 0;
    background-size: contain;
    border: none;
    height: ",
                [Function],
                ";
    width: ",
                [Function],
                ";
    margin-right: 4px;
    margin-top: 2px;
  }
",
                ";
",
              ],
            },
            "displayName": "Styled(InputCheckbox)",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-ifAKCX",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        disabled={true}
        name="defaultShipping"
        showDefaultCheckbox={false}
      >
        <Styled(BodyCopy)
          className={null}
          color="text.primary"
          component="p"
          dataLocator="shippingDefault-chk"
          fontFamily="secondary"
          fontSize="fs16"
          fontWeight="regular"
          letterSpacing="normal"
          lineHeight="normal"
          link={null}
          textAlign="left"
        >
          lbl_shipping_defaultShipping
        </Styled(BodyCopy)>
      </Field>
    </Styled(Col)>
  </Styled(Row)>
  <Styled(Row)
    className="elem-mt-XL edit-cta "
    fullBleed={true}
  >
    <Styled(Col)
      colSize={
        Object {
          "large": 3,
          "medium": 2,
          "small": 6,
        }
      }
    >
      <Styled(Button)
        buttonVariation="fixed-width"
        className=""
        data-locator="edit-shipping-cancel-btn"
        disabled={false}
        fill="WHITE"
        onClick={[Function]}
        type="button"
      >
        lbl_shipping_cancel
      </Styled(Button)>
    </Styled(Col)>
    <Styled(Col)
      colSize={
        Object {
          "large": 3,
          "medium": 2,
          "small": 6,
        }
      }
    >
      <Styled(Button)
        buttonVariation="fixed-width"
        data-locator="edit-shipping-save-btn"
        fill="BLUE"
        onClick={[Function]}
        type="button"
      >
        lbl_shipping_save
      </Styled(Button)>
    </Styled(Col)>
  </Styled(Row)>
  <Styled(AddEditShippingAddress)
    actionButtons={[Function]}
    addressFields={[Function]}
    defaultOptions={[Function]}
    modalState={false}
    modalType={null}
  />
</div>
`;

exports[`RegisteredShippingFormVanilla should render correctly with isAddNewAddress true 1`] = `
<div
  className=""
  data-locator="shipping-details"
  isEditing={null}
>
  <Styled(Row)
    fullBleed={true}
  >
    <Styled(Col)
      className="address-dropDown"
      colSize={
        Object {
          "large": 6,
          "medium": 8,
          "small": 6,
        }
      }
      data-locator="address-dropdown"
      isEditing={null}
    >
      <Field
        component={[Function]}
        dataLocatorObj={
          Object {
            "dropDownList": "shipping-details-lst",
            "heading": "address-book-txt",
          }
        }
        id="onFileAddressKey"
        name="onFileAddressKey"
        onChange={[Function]}
        options={
          Immutable.List [
            Object {
              "content": <div
                className="address-wrapper"
              >
                <ForwardRef
                  address={
                    Object {
                      "addressLine": Array [
                        "addressline 1ttt",
                        "addressline 2bbb",
                      ],
                      "city": "test city",
                      "country": "test country abc",
                      "firstName": "test",
                      "lastName": "test",
                      "phone1": "1234567890",
                    }
                  }
                  className="address"
                  isDefault={false}
                  showCountry={false}
                  showDefault={false}
                  showPhone={false}
                />
              </div>,
              "title": "test test ",
              "value": undefined,
            },
            Object {
              "content": <ForwardRef
                buttonVariation="variable-width"
                dataLocator="new-addressbtn"
                disabled={true}
                fill="BLACK"
                fullWidth={true}
                onClick={[Function]}
              >
                lbl_shipping_addNewAddress
              </ForwardRef>,
              "title": "Add New Address",
              "value": "",
            },
          ]
        }
        selectListTitle="Select from address book"
      />
    </Styled(Col)>
  </Styled(Row)>
  <Styled(Row)
    className="hide-on-mobile"
    fullBleed={true}
  >
    <Styled(Col)
      colSize={
        Object {
          "large": 4,
          "medium": 6,
          "small": 6,
        }
      }
    >
      <Styled(BodyCopy)
        className="elem-mb-XS"
        color="text.primary"
        component="p"
        data-locator="shipping-details"
        fontFamily="primary"
        fontSize="fs28"
        fontWeight="regular"
        letterSpacing="normal"
        lineHeight="normal"
        link={null}
        textAlign="left"
      >
        lbl_shipping_sectionHeader
      </Styled(BodyCopy)>
    </Styled(Col)>
  </Styled(Row)>
  <Styled(Row)
    fullBleed={true}
  >
    <Styled(Col)
      colSize={
        Object {
          "large": 12,
          "medium": 8,
          "small": 6,
        }
      }
    >
      <div
        className="address-form"
      >
        <FormSection
          name="address"
        >
          <Styled(AddressFields)
            addressPhoneNo={null}
            dispatch={
              [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "meta": Object {
                        "field": "onFileAddressKey",
                        "form": "checkoutShipping",
                        "persistentSubmitErrors": undefined,
                        "touch": undefined,
                      },
                      "payload": undefined,
                      "type": "@@redux-form/CHANGE",
                    },
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                ],
              }
            }
            formName="checkoutShipping"
            formSection="address"
            isGuest={false}
            showDefaultCheckbox={false}
            variation="secondary"
          />
        </FormSection>
      </div>
    </Styled(Col)>
    <Styled(Col)
      className="hide-on-desktop"
      colSize={
        Object {
          "large": 1,
          "medium": 1,
          "small": 1,
        }
      }
    >
      <Styled(Anchor)
        anchorVariation="primary"
        dataLocator="edit-shipping-address"
        fontSizeVariation="small"
        noLink={true}
        onClick={[Function]}
        underline={true}
      >
        lbl_shipping_edit
      </Styled(Anchor)>
    </Styled(Col)>
  </Styled(Row)>
  <Styled(Row)
    fullBleed={true}
  >
    <Styled(Col)
      className="elem-mb-LRG"
      colSize={
        Object {
          "large": 12,
          "medium": 8,
          "small": 6,
        }
      }
    >
      <Field
        component={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-ifAKCX",
              "isStatic": false,
              "rules": Array [
                "
  ",
                "
  display: block;
  align-items: ",
                [Function],
                ";

  & .CheckBox__input {
    flex: 0 0 auto;
    position: relative;
    top: 0;
    appearance: none;
    outline: 0;
    border: 0;
    height: ",
                "25px",
                ";
    width: ",
                "25px",
                ";
    margin: 0;
    margin-right: ",
                [Function],
                ";
    display: inline-block;
    vertical-align: top;
  }

  & .CheckBox__input:before {
    content: '';
    position: absolute;
    height: 100%;
    width: 100%;
    left: 0;
    border: 1px solid ",
                [Function],
                ";
  }

  & .CheckBox__input:checked:before {
    background: ",
                [Function],
                ";
    border: 1px solid ",
                [Function],
                ";
  }

  & .CheckBox__input:checked:after {
    transform: rotate(225deg);
    content: '';
    border: 2px solid ",
                [Function],
                ";
    font-size: ",
                [Function],
                "px;
    width: ",
                [Function],
                ";
    height: 10px;
    border-right: 0;
    border-bottom: 0;
    left: 10px;
    top: 5px;
    position: absolute;
  }

  & .CheckBox__text {
    width: calc(100% - 45px);
    display: inline-block;
  }

  & .CheckBox__text a {
    color: ",
                [Function],
                ";
  }

  & .disabled {
    opacity: ",
                [Function],
                ";
  }

  & .Checkbox__error {
    display: flex;
    flex-direction: row;
    padding-left: ",
                [Function],
                ";
  }
  & .warning-icon {
    background: transparent url('/static/images/circle-alert-fill.svg') no-repeat 0 0;
    background-size: contain;
    border: none;
    height: ",
                [Function],
                ";
    width: ",
                [Function],
                ";
    margin-right: 4px;
    margin-top: 2px;
  }
",
                ";
",
              ],
            },
            "displayName": "Styled(InputCheckbox)",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-ifAKCX",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        name="saveToAddressBook"
        onChange={[Function]}
        showDefaultCheckbox={false}
      >
        <Styled(BodyCopy)
          className={null}
          color="text.primary"
          component="p"
          dataLocator="saveaddress-chk"
          fontFamily="secondary"
          fontSize="fs16"
          fontWeight="regular"
          letterSpacing="normal"
          lineHeight="normal"
          link={null}
          textAlign="left"
        >
          lbl_shipping_saveToAccount
        </Styled(BodyCopy)>
      </Field>
    </Styled(Col)>
    <Styled(Col)
      className="default-shipping"
      colSize={
        Object {
          "large": 12,
          "medium": 8,
          "small": 6,
        }
      }
      isEditing={null}
    >
      <Field
        component={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-ifAKCX",
              "isStatic": false,
              "rules": Array [
                "
  ",
                "
  display: block;
  align-items: ",
                [Function],
                ";

  & .CheckBox__input {
    flex: 0 0 auto;
    position: relative;
    top: 0;
    appearance: none;
    outline: 0;
    border: 0;
    height: ",
                "25px",
                ";
    width: ",
                "25px",
                ";
    margin: 0;
    margin-right: ",
                [Function],
                ";
    display: inline-block;
    vertical-align: top;
  }

  & .CheckBox__input:before {
    content: '';
    position: absolute;
    height: 100%;
    width: 100%;
    left: 0;
    border: 1px solid ",
                [Function],
                ";
  }

  & .CheckBox__input:checked:before {
    background: ",
                [Function],
                ";
    border: 1px solid ",
                [Function],
                ";
  }

  & .CheckBox__input:checked:after {
    transform: rotate(225deg);
    content: '';
    border: 2px solid ",
                [Function],
                ";
    font-size: ",
                [Function],
                "px;
    width: ",
                [Function],
                ";
    height: 10px;
    border-right: 0;
    border-bottom: 0;
    left: 10px;
    top: 5px;
    position: absolute;
  }

  & .CheckBox__text {
    width: calc(100% - 45px);
    display: inline-block;
  }

  & .CheckBox__text a {
    color: ",
                [Function],
                ";
  }

  & .disabled {
    opacity: ",
                [Function],
                ";
  }

  & .Checkbox__error {
    display: flex;
    flex-direction: row;
    padding-left: ",
                [Function],
                ";
  }
  & .warning-icon {
    background: transparent url('/static/images/circle-alert-fill.svg') no-repeat 0 0;
    background-size: contain;
    border: none;
    height: ",
                [Function],
                ";
    width: ",
                [Function],
                ";
    margin-right: 4px;
    margin-top: 2px;
  }
",
                ";
",
              ],
            },
            "displayName": "Styled(InputCheckbox)",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-ifAKCX",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        disabled={true}
        name="defaultShipping"
        showDefaultCheckbox={false}
      >
        <Styled(BodyCopy)
          className={null}
          color="text.primary"
          component="p"
          dataLocator="shippingDefault-chk"
          fontFamily="secondary"
          fontSize="fs16"
          fontWeight="regular"
          letterSpacing="normal"
          lineHeight="normal"
          link={null}
          textAlign="left"
        >
          lbl_shipping_defaultShipping
        </Styled(BodyCopy)>
      </Field>
    </Styled(Col)>
  </Styled(Row)>
  <Styled(AddEditShippingAddress)
    actionButtons={[Function]}
    addressFields={[Function]}
    defaultOptions={[Function]}
    modalState={false}
    modalType={null}
  />
</div>
`;

exports[`RegisteredShippingFormVanilla should render correctly with isAddNewAddress true and isSaveToAddressBookChecked true 1`] = `
<div
  className=""
  data-locator="shipping-details"
  isEditing={null}
>
  <Styled(Row)
    fullBleed={true}
  >
    <Styled(Col)
      className="address-dropDown"
      colSize={
        Object {
          "large": 6,
          "medium": 8,
          "small": 6,
        }
      }
      data-locator="address-dropdown"
      isEditing={null}
    >
      <Field
        component={[Function]}
        dataLocatorObj={
          Object {
            "dropDownList": "shipping-details-lst",
            "heading": "address-book-txt",
          }
        }
        id="onFileAddressKey"
        name="onFileAddressKey"
        onChange={[Function]}
        options={
          Immutable.List [
            Object {
              "content": <div
                className="address-wrapper"
              >
                <ForwardRef
                  address={
                    Object {
                      "addressLine": Array [
                        "addressline 1ttt",
                        "addressline 2bbb",
                      ],
                      "city": "test city",
                      "country": "test country abc",
                      "firstName": "test",
                      "lastName": "test",
                      "phone1": "1234567890",
                    }
                  }
                  className="address"
                  isDefault={false}
                  showCountry={false}
                  showDefault={false}
                  showPhone={false}
                />
              </div>,
              "title": "test test ",
              "value": undefined,
            },
            Object {
              "content": <ForwardRef
                buttonVariation="variable-width"
                dataLocator="new-addressbtn"
                disabled={true}
                fill="BLACK"
                fullWidth={true}
                onClick={[Function]}
              >
                lbl_shipping_addNewAddress
              </ForwardRef>,
              "title": "Add New Address",
              "value": "",
            },
          ]
        }
        selectListTitle="Select from address book"
      />
    </Styled(Col)>
  </Styled(Row)>
  <Styled(Row)
    className="hide-on-mobile"
    fullBleed={true}
  >
    <Styled(Col)
      colSize={
        Object {
          "large": 4,
          "medium": 6,
          "small": 6,
        }
      }
    >
      <Styled(BodyCopy)
        className="elem-mb-XS"
        color="text.primary"
        component="p"
        data-locator="shipping-details"
        fontFamily="primary"
        fontSize="fs28"
        fontWeight="regular"
        letterSpacing="normal"
        lineHeight="normal"
        link={null}
        textAlign="left"
      >
        lbl_shipping_sectionHeader
      </Styled(BodyCopy)>
    </Styled(Col)>
  </Styled(Row)>
  <Styled(Row)
    fullBleed={true}
  >
    <Styled(Col)
      colSize={
        Object {
          "large": 12,
          "medium": 8,
          "small": 6,
        }
      }
    >
      <div
        className="address-form"
      >
        <FormSection
          name="address"
        >
          <Styled(AddressFields)
            addressPhoneNo={null}
            dispatch={
              [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "meta": Object {
                        "field": "onFileAddressKey",
                        "form": "checkoutShipping",
                        "persistentSubmitErrors": undefined,
                        "touch": undefined,
                      },
                      "payload": undefined,
                      "type": "@@redux-form/CHANGE",
                    },
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                ],
              }
            }
            formName="checkoutShipping"
            formSection="address"
            isGuest={false}
            showDefaultCheckbox={false}
            variation="secondary"
          />
        </FormSection>
      </div>
    </Styled(Col)>
    <Styled(Col)
      className="hide-on-desktop"
      colSize={
        Object {
          "large": 1,
          "medium": 1,
          "small": 1,
        }
      }
    >
      <Styled(Anchor)
        anchorVariation="primary"
        dataLocator="edit-shipping-address"
        fontSizeVariation="small"
        noLink={true}
        onClick={[Function]}
        underline={true}
      >
        lbl_shipping_edit
      </Styled(Anchor)>
    </Styled(Col)>
  </Styled(Row)>
  <Styled(Row)
    fullBleed={true}
  >
    <Styled(Col)
      className="elem-mb-LRG"
      colSize={
        Object {
          "large": 12,
          "medium": 8,
          "small": 6,
        }
      }
    >
      <Field
        component={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-ifAKCX",
              "isStatic": false,
              "rules": Array [
                "
  ",
                "
  display: block;
  align-items: ",
                [Function],
                ";

  & .CheckBox__input {
    flex: 0 0 auto;
    position: relative;
    top: 0;
    appearance: none;
    outline: 0;
    border: 0;
    height: ",
                "25px",
                ";
    width: ",
                "25px",
                ";
    margin: 0;
    margin-right: ",
                [Function],
                ";
    display: inline-block;
    vertical-align: top;
  }

  & .CheckBox__input:before {
    content: '';
    position: absolute;
    height: 100%;
    width: 100%;
    left: 0;
    border: 1px solid ",
                [Function],
                ";
  }

  & .CheckBox__input:checked:before {
    background: ",
                [Function],
                ";
    border: 1px solid ",
                [Function],
                ";
  }

  & .CheckBox__input:checked:after {
    transform: rotate(225deg);
    content: '';
    border: 2px solid ",
                [Function],
                ";
    font-size: ",
                [Function],
                "px;
    width: ",
                [Function],
                ";
    height: 10px;
    border-right: 0;
    border-bottom: 0;
    left: 10px;
    top: 5px;
    position: absolute;
  }

  & .CheckBox__text {
    width: calc(100% - 45px);
    display: inline-block;
  }

  & .CheckBox__text a {
    color: ",
                [Function],
                ";
  }

  & .disabled {
    opacity: ",
                [Function],
                ";
  }

  & .Checkbox__error {
    display: flex;
    flex-direction: row;
    padding-left: ",
                [Function],
                ";
  }
  & .warning-icon {
    background: transparent url('/static/images/circle-alert-fill.svg') no-repeat 0 0;
    background-size: contain;
    border: none;
    height: ",
                [Function],
                ";
    width: ",
                [Function],
                ";
    margin-right: 4px;
    margin-top: 2px;
  }
",
                ";
",
              ],
            },
            "displayName": "Styled(InputCheckbox)",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-ifAKCX",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        name="saveToAddressBook"
        onChange={[Function]}
        showDefaultCheckbox={false}
      >
        <Styled(BodyCopy)
          className={null}
          color="text.primary"
          component="p"
          dataLocator="saveaddress-chk"
          fontFamily="secondary"
          fontSize="fs16"
          fontWeight="regular"
          letterSpacing="normal"
          lineHeight="normal"
          link={null}
          textAlign="left"
        >
          lbl_shipping_saveToAccount
        </Styled(BodyCopy)>
      </Field>
    </Styled(Col)>
    <Styled(Col)
      className="default-shipping"
      colSize={
        Object {
          "large": 12,
          "medium": 8,
          "small": 6,
        }
      }
      isEditing={null}
    >
      <Field
        component={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-ifAKCX",
              "isStatic": false,
              "rules": Array [
                "
  ",
                "
  display: block;
  align-items: ",
                [Function],
                ";

  & .CheckBox__input {
    flex: 0 0 auto;
    position: relative;
    top: 0;
    appearance: none;
    outline: 0;
    border: 0;
    height: ",
                "25px",
                ";
    width: ",
                "25px",
                ";
    margin: 0;
    margin-right: ",
                [Function],
                ";
    display: inline-block;
    vertical-align: top;
  }

  & .CheckBox__input:before {
    content: '';
    position: absolute;
    height: 100%;
    width: 100%;
    left: 0;
    border: 1px solid ",
                [Function],
                ";
  }

  & .CheckBox__input:checked:before {
    background: ",
                [Function],
                ";
    border: 1px solid ",
                [Function],
                ";
  }

  & .CheckBox__input:checked:after {
    transform: rotate(225deg);
    content: '';
    border: 2px solid ",
                [Function],
                ";
    font-size: ",
                [Function],
                "px;
    width: ",
                [Function],
                ";
    height: 10px;
    border-right: 0;
    border-bottom: 0;
    left: 10px;
    top: 5px;
    position: absolute;
  }

  & .CheckBox__text {
    width: calc(100% - 45px);
    display: inline-block;
  }

  & .CheckBox__text a {
    color: ",
                [Function],
                ";
  }

  & .disabled {
    opacity: ",
                [Function],
                ";
  }

  & .Checkbox__error {
    display: flex;
    flex-direction: row;
    padding-left: ",
                [Function],
                ";
  }
  & .warning-icon {
    background: transparent url('/static/images/circle-alert-fill.svg') no-repeat 0 0;
    background-size: contain;
    border: none;
    height: ",
                [Function],
                ";
    width: ",
                [Function],
                ";
    margin-right: 4px;
    margin-top: 2px;
  }
",
                ";
",
              ],
            },
            "displayName": "Styled(InputCheckbox)",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-ifAKCX",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        disabled={false}
        name="defaultShipping"
        showDefaultCheckbox={false}
      >
        <Styled(BodyCopy)
          className={null}
          color="text.primary"
          component="p"
          dataLocator="shippingDefault-chk"
          fontFamily="secondary"
          fontSize="fs16"
          fontWeight="regular"
          letterSpacing="normal"
          lineHeight="normal"
          link={null}
          textAlign="left"
        >
          lbl_shipping_defaultShipping
        </Styled(BodyCopy)>
      </Field>
    </Styled(Col)>
  </Styled(Row)>
  <Styled(AddEditShippingAddress)
    actionButtons={[Function]}
    addressFields={[Function]}
    defaultOptions={[Function]}
    modalState={false}
    modalType={null}
  />
</div>
`;

exports[`RegisteredShippingFormVanilla should render correctly with isEditing true 1`] = `
<div
  className=""
  data-locator="shipping-details"
  isEditing={true}
>
  <Styled(Row)
    fullBleed={true}
  >
    <Styled(Col)
      className="address-dropDown"
      colSize={
        Object {
          "large": 6,
          "medium": 8,
          "small": 6,
        }
      }
      data-locator="address-dropdown"
      isEditing={true}
    >
      <Field
        component={[Function]}
        dataLocatorObj={
          Object {
            "dropDownList": "shipping-details-lst",
            "heading": "address-book-txt",
          }
        }
        id="onFileAddressKey"
        name="onFileAddressKey"
        onChange={[Function]}
        options={
          Immutable.List [
            Object {
              "content": <div
                className="address-wrapper"
              >
                <ForwardRef
                  address={
                    Object {
                      "addressLine": Array [
                        "addressline 1tttttt",
                        "addressline 2bbbbbbb",
                      ],
                      "city": "test city",
                      "country": "test country abcccc",
                      "firstName": "test",
                      "lastName": "test",
                      "phone1": "1234567890",
                    }
                  }
                  className="address"
                  isDefault={false}
                  showCountry={false}
                  showDefault={false}
                  showPhone={false}
                />
              </div>,
              "title": "test test ",
              "value": undefined,
            },
            Object {
              "content": <ForwardRef
                buttonVariation="variable-width"
                dataLocator="new-addressbtn"
                disabled={false}
                fill="BLACK"
                fullWidth={true}
                onClick={[Function]}
              >
                lbl_shipping_addNewAddress
              </ForwardRef>,
              "title": "Add New Address",
              "value": "",
            },
          ]
        }
        selectListTitle="Select from address book"
      />
    </Styled(Col)>
  </Styled(Row)>
  <Styled(Row)
    className="hide-on-mobile"
    fullBleed={true}
  >
    <Styled(Col)
      colSize={
        Object {
          "large": 4,
          "medium": 6,
          "small": 6,
        }
      }
    >
      <Styled(BodyCopy)
        className="elem-mb-XS"
        color="text.primary"
        component="p"
        data-locator="shipping-details"
        fontFamily="primary"
        fontSize="fs28"
        fontWeight="regular"
        letterSpacing="normal"
        lineHeight="normal"
        link={null}
        textAlign="left"
      >
        lbl_shipping_sectionHeader
      </Styled(BodyCopy)>
    </Styled(Col)>
  </Styled(Row)>
  <Styled(Row)
    fullBleed={true}
  >
    <Styled(Col)
      colSize={
        Object {
          "large": 12,
          "medium": 8,
          "small": 6,
        }
      }
    >
      <div
        className="address-form"
      >
        <FormSection
          name="address"
        >
          <Styled(AddressFields)
            addressPhoneNo={null}
            dispatch={
              [MockFunction] {
                "calls": Array [
                  Array [
                    Object {
                      "meta": Object {
                        "field": "onFileAddressKey",
                        "form": "checkoutShipping",
                        "persistentSubmitErrors": undefined,
                        "touch": undefined,
                      },
                      "payload": undefined,
                      "type": "@@redux-form/CHANGE",
                    },
                  ],
                ],
                "results": Array [
                  Object {
                    "type": "return",
                    "value": undefined,
                  },
                ],
              }
            }
            formName="checkoutShipping"
            formSection="address"
            isGuest={false}
            showDefaultCheckbox={false}
            variation="secondary"
          />
        </FormSection>
      </div>
    </Styled(Col)>
    <Styled(Col)
      className="hide-on-desktop"
      colSize={
        Object {
          "large": 1,
          "medium": 1,
          "small": 1,
        }
      }
    >
      <Styled(Anchor)
        anchorVariation="primary"
        dataLocator="edit-shipping-address"
        fontSizeVariation="small"
        noLink={true}
        onClick={[Function]}
        underline={true}
      >
        lbl_shipping_edit
      </Styled(Anchor)>
    </Styled(Col)>
  </Styled(Row)>
  <Styled(Row)
    fullBleed={true}
  >
    <Styled(Col)
      className="default-shipping"
      colSize={
        Object {
          "large": 12,
          "medium": 8,
          "small": 6,
        }
      }
      isEditing={true}
    >
      <Field
        component={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-ifAKCX",
              "isStatic": false,
              "rules": Array [
                "
  ",
                "
  display: block;
  align-items: ",
                [Function],
                ";

  & .CheckBox__input {
    flex: 0 0 auto;
    position: relative;
    top: 0;
    appearance: none;
    outline: 0;
    border: 0;
    height: ",
                "25px",
                ";
    width: ",
                "25px",
                ";
    margin: 0;
    margin-right: ",
                [Function],
                ";
    display: inline-block;
    vertical-align: top;
  }

  & .CheckBox__input:before {
    content: '';
    position: absolute;
    height: 100%;
    width: 100%;
    left: 0;
    border: 1px solid ",
                [Function],
                ";
  }

  & .CheckBox__input:checked:before {
    background: ",
                [Function],
                ";
    border: 1px solid ",
                [Function],
                ";
  }

  & .CheckBox__input:checked:after {
    transform: rotate(225deg);
    content: '';
    border: 2px solid ",
                [Function],
                ";
    font-size: ",
                [Function],
                "px;
    width: ",
                [Function],
                ";
    height: 10px;
    border-right: 0;
    border-bottom: 0;
    left: 10px;
    top: 5px;
    position: absolute;
  }

  & .CheckBox__text {
    width: calc(100% - 45px);
    display: inline-block;
  }

  & .CheckBox__text a {
    color: ",
                [Function],
                ";
  }

  & .disabled {
    opacity: ",
                [Function],
                ";
  }

  & .Checkbox__error {
    display: flex;
    flex-direction: row;
    padding-left: ",
                [Function],
                ";
  }
  & .warning-icon {
    background: transparent url('/static/images/circle-alert-fill.svg') no-repeat 0 0;
    background-size: contain;
    border: none;
    height: ",
                [Function],
                ";
    width: ",
                [Function],
                ";
    margin-right: 4px;
    margin-top: 2px;
  }
",
                ";
",
              ],
            },
            "displayName": "Styled(InputCheckbox)",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-ifAKCX",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        disabled={true}
        name="defaultShipping"
        showDefaultCheckbox={false}
      >
        <Styled(BodyCopy)
          className={null}
          color="text.primary"
          component="p"
          dataLocator="shippingDefault-chk"
          fontFamily="secondary"
          fontSize="fs16"
          fontWeight="regular"
          letterSpacing="normal"
          lineHeight="normal"
          link={null}
          textAlign="left"
        >
          lbl_shipping_defaultShipping
        </Styled(BodyCopy)>
      </Field>
    </Styled(Col)>
  </Styled(Row)>
  <Styled(Row)
    className="elem-mt-XL edit-cta "
    fullBleed={true}
  >
    <Styled(Col)
      colSize={
        Object {
          "large": 3,
          "medium": 2,
          "small": 6,
        }
      }
    >
      <Styled(Button)
        buttonVariation="fixed-width"
        className=""
        data-locator="edit-shipping-cancel-btn"
        disabled={false}
        fill="WHITE"
        onClick={[Function]}
        type="button"
      >
        lbl_shipping_cancel
      </Styled(Button)>
    </Styled(Col)>
    <Styled(Col)
      colSize={
        Object {
          "large": 3,
          "medium": 2,
          "small": 6,
        }
      }
    >
      <Styled(Button)
        buttonVariation="fixed-width"
        data-locator="edit-shipping-save-btn"
        fill="BLUE"
        onClick={[Function]}
        type="button"
      >
        lbl_shipping_save
      </Styled(Button)>
    </Styled(Col)>
  </Styled(Row)>
  <Styled(AddEditShippingAddress)
    actionButtons={[Function]}
    addressFields={[Function]}
    defaultOptions={[Function]}
    modalState={false}
    modalType={null}
  />
</div>
`;

exports[`RegisteredShippingFormVanilla should render correctly with no addresses and call toggleAddEditModal 1`] = `
<div
  className=""
  data-locator="shipping-details"
  isEditing={null}
>
  <Styled(Col)
    colSize={
      Object {
        "large": 12,
        "medium": 8,
        "small": 6,
      }
    }
  >
    <div
      className="address-form"
    >
      <FormSection
        name="address"
      >
        <Styled(AddressFields)
          addressPhoneNo={null}
          dispatch={
            [MockFunction] {
              "calls": Array [
                Array [
                  Object {
                    "meta": Object {
                      "field": "address.phoneNumber",
                      "form": "checkoutShipping",
                      "persistentSubmitErrors": undefined,
                      "touch": undefined,
                    },
                    "payload": "",
                    "type": "@@redux-form/CHANGE",
                  },
                ],
                Array [
                  Object {
                    "meta": Object {
                      "field": "defaultShipping",
                      "form": "checkoutShipping",
                      "persistentSubmitErrors": undefined,
                      "touch": undefined,
                    },
                    "payload": true,
                    "type": "@@redux-form/CHANGE",
                  },
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": undefined,
                },
                Object {
                  "type": "return",
                  "value": undefined,
                },
              ],
            }
          }
          formName="checkoutShipping"
          formSection="address"
          isGuest={false}
          showDefaultCheckbox={false}
          variation="secondary"
        />
      </FormSection>
    </div>
  </Styled(Col)>
  <Styled(Row)
    fullBleed={true}
  >
    <Styled(Col)
      className="elem-mb-LRG"
      colSize={
        Object {
          "large": 12,
          "medium": 8,
          "small": 6,
        }
      }
    >
      <Field
        component={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-ifAKCX",
              "isStatic": false,
              "rules": Array [
                "
  ",
                "
  display: block;
  align-items: ",
                [Function],
                ";

  & .CheckBox__input {
    flex: 0 0 auto;
    position: relative;
    top: 0;
    appearance: none;
    outline: 0;
    border: 0;
    height: ",
                "25px",
                ";
    width: ",
                "25px",
                ";
    margin: 0;
    margin-right: ",
                [Function],
                ";
    display: inline-block;
    vertical-align: top;
  }

  & .CheckBox__input:before {
    content: '';
    position: absolute;
    height: 100%;
    width: 100%;
    left: 0;
    border: 1px solid ",
                [Function],
                ";
  }

  & .CheckBox__input:checked:before {
    background: ",
                [Function],
                ";
    border: 1px solid ",
                [Function],
                ";
  }

  & .CheckBox__input:checked:after {
    transform: rotate(225deg);
    content: '';
    border: 2px solid ",
                [Function],
                ";
    font-size: ",
                [Function],
                "px;
    width: ",
                [Function],
                ";
    height: 10px;
    border-right: 0;
    border-bottom: 0;
    left: 10px;
    top: 5px;
    position: absolute;
  }

  & .CheckBox__text {
    width: calc(100% - 45px);
    display: inline-block;
  }

  & .CheckBox__text a {
    color: ",
                [Function],
                ";
  }

  & .disabled {
    opacity: ",
                [Function],
                ";
  }

  & .Checkbox__error {
    display: flex;
    flex-direction: row;
    padding-left: ",
                [Function],
                ";
  }
  & .warning-icon {
    background: transparent url('/static/images/circle-alert-fill.svg') no-repeat 0 0;
    background-size: contain;
    border: none;
    height: ",
                [Function],
                ";
    width: ",
                [Function],
                ";
    margin-right: 4px;
    margin-top: 2px;
  }
",
                ";
",
              ],
            },
            "displayName": "Styled(InputCheckbox)",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-ifAKCX",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        name="saveToAddressBook"
        onChange={[Function]}
        showDefaultCheckbox={false}
      >
        <Styled(BodyCopy)
          className={null}
          color="text.primary"
          component="p"
          dataLocator="saveaddress-chk"
          fontFamily="secondary"
          fontSize="fs16"
          fontWeight="regular"
          letterSpacing="normal"
          lineHeight="normal"
          link={null}
          textAlign="left"
        >
          lbl_shipping_saveToAccount
        </Styled(BodyCopy)>
      </Field>
    </Styled(Col)>
    <Styled(Col)
      className="default-shipping"
      colSize={
        Object {
          "large": 12,
          "medium": 8,
          "small": 6,
        }
      }
      isEditing={null}
    >
      <Field
        component={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-ifAKCX",
              "isStatic": false,
              "rules": Array [
                "
  ",
                "
  display: block;
  align-items: ",
                [Function],
                ";

  & .CheckBox__input {
    flex: 0 0 auto;
    position: relative;
    top: 0;
    appearance: none;
    outline: 0;
    border: 0;
    height: ",
                "25px",
                ";
    width: ",
                "25px",
                ";
    margin: 0;
    margin-right: ",
                [Function],
                ";
    display: inline-block;
    vertical-align: top;
  }

  & .CheckBox__input:before {
    content: '';
    position: absolute;
    height: 100%;
    width: 100%;
    left: 0;
    border: 1px solid ",
                [Function],
                ";
  }

  & .CheckBox__input:checked:before {
    background: ",
                [Function],
                ";
    border: 1px solid ",
                [Function],
                ";
  }

  & .CheckBox__input:checked:after {
    transform: rotate(225deg);
    content: '';
    border: 2px solid ",
                [Function],
                ";
    font-size: ",
                [Function],
                "px;
    width: ",
                [Function],
                ";
    height: 10px;
    border-right: 0;
    border-bottom: 0;
    left: 10px;
    top: 5px;
    position: absolute;
  }

  & .CheckBox__text {
    width: calc(100% - 45px);
    display: inline-block;
  }

  & .CheckBox__text a {
    color: ",
                [Function],
                ";
  }

  & .disabled {
    opacity: ",
                [Function],
                ";
  }

  & .Checkbox__error {
    display: flex;
    flex-direction: row;
    padding-left: ",
                [Function],
                ";
  }
  & .warning-icon {
    background: transparent url('/static/images/circle-alert-fill.svg') no-repeat 0 0;
    background-size: contain;
    border: none;
    height: ",
                [Function],
                ";
    width: ",
                [Function],
                ";
    margin-right: 4px;
    margin-top: 2px;
  }
",
                ";
",
              ],
            },
            "displayName": "Styled(InputCheckbox)",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-ifAKCX",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        disabled={true}
        name="defaultShipping"
        showDefaultCheckbox={false}
      >
        <Styled(BodyCopy)
          className={null}
          color="text.primary"
          component="p"
          dataLocator="shippingDefault-chk"
          fontFamily="secondary"
          fontSize="fs16"
          fontWeight="regular"
          letterSpacing="normal"
          lineHeight="normal"
          link={null}
          textAlign="left"
        >
          lbl_shipping_defaultShipping
        </Styled(BodyCopy)>
      </Field>
    </Styled(Col)>
  </Styled(Row)>
  <Styled(AddEditShippingAddress)
    actionButtons={[Function]}
    addressFields={[Function]}
    defaultOptions={[Function]}
    modalState={false}
    modalType={null}
    toggleAddEditModal={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "type": "edit",
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
  />
</div>
`;

exports[`RegisteredShippingFormVanilla should render correctly with no addresses and call toggleAddEditModal 2`] = `
<div
  className=""
  data-locator="shipping-details"
  isEditing={null}
>
  <Styled(Col)
    colSize={
      Object {
        "large": 12,
        "medium": 8,
        "small": 6,
      }
    }
  >
    <div
      className="address-form"
    >
      <FormSection
        name="address"
      >
        <Styled(AddressFields)
          addressPhoneNo={null}
          dispatch={
            [MockFunction] {
              "calls": Array [
                Array [
                  Object {
                    "meta": Object {
                      "field": "address.phoneNumber",
                      "form": "checkoutShipping",
                      "persistentSubmitErrors": undefined,
                      "touch": undefined,
                    },
                    "payload": "",
                    "type": "@@redux-form/CHANGE",
                  },
                ],
                Array [
                  Object {
                    "meta": Object {
                      "field": "defaultShipping",
                      "form": "checkoutShipping",
                      "persistentSubmitErrors": undefined,
                      "touch": undefined,
                    },
                    "payload": true,
                    "type": "@@redux-form/CHANGE",
                  },
                ],
                Array [
                  Object {
                    "meta": Object {
                      "field": "defaultShipping",
                      "form": "checkoutShipping",
                      "persistentSubmitErrors": undefined,
                      "touch": undefined,
                    },
                    "payload": false,
                    "type": "@@redux-form/CHANGE",
                  },
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": undefined,
                },
                Object {
                  "type": "return",
                  "value": undefined,
                },
                Object {
                  "type": "return",
                  "value": undefined,
                },
              ],
            }
          }
          formName="checkoutShipping"
          formSection="address"
          isGuest={false}
          showDefaultCheckbox={false}
          variation="secondary"
        />
      </FormSection>
    </div>
  </Styled(Col)>
  <Styled(Row)
    fullBleed={true}
  >
    <Styled(Col)
      className="elem-mb-LRG"
      colSize={
        Object {
          "large": 12,
          "medium": 8,
          "small": 6,
        }
      }
    >
      <Field
        component={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-ifAKCX",
              "isStatic": false,
              "rules": Array [
                "
  ",
                "
  display: block;
  align-items: ",
                [Function],
                ";

  & .CheckBox__input {
    flex: 0 0 auto;
    position: relative;
    top: 0;
    appearance: none;
    outline: 0;
    border: 0;
    height: ",
                "25px",
                ";
    width: ",
                "25px",
                ";
    margin: 0;
    margin-right: ",
                [Function],
                ";
    display: inline-block;
    vertical-align: top;
  }

  & .CheckBox__input:before {
    content: '';
    position: absolute;
    height: 100%;
    width: 100%;
    left: 0;
    border: 1px solid ",
                [Function],
                ";
  }

  & .CheckBox__input:checked:before {
    background: ",
                [Function],
                ";
    border: 1px solid ",
                [Function],
                ";
  }

  & .CheckBox__input:checked:after {
    transform: rotate(225deg);
    content: '';
    border: 2px solid ",
                [Function],
                ";
    font-size: ",
                [Function],
                "px;
    width: ",
                [Function],
                ";
    height: 10px;
    border-right: 0;
    border-bottom: 0;
    left: 10px;
    top: 5px;
    position: absolute;
  }

  & .CheckBox__text {
    width: calc(100% - 45px);
    display: inline-block;
  }

  & .CheckBox__text a {
    color: ",
                [Function],
                ";
  }

  & .disabled {
    opacity: ",
                [Function],
                ";
  }

  & .Checkbox__error {
    display: flex;
    flex-direction: row;
    padding-left: ",
                [Function],
                ";
  }
  & .warning-icon {
    background: transparent url('/static/images/circle-alert-fill.svg') no-repeat 0 0;
    background-size: contain;
    border: none;
    height: ",
                [Function],
                ";
    width: ",
                [Function],
                ";
    margin-right: 4px;
    margin-top: 2px;
  }
",
                ";
",
              ],
            },
            "displayName": "Styled(InputCheckbox)",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-ifAKCX",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        name="saveToAddressBook"
        onChange={[Function]}
        showDefaultCheckbox={false}
      >
        <Styled(BodyCopy)
          className={null}
          color="text.primary"
          component="p"
          dataLocator="saveaddress-chk"
          fontFamily="secondary"
          fontSize="fs16"
          fontWeight="regular"
          letterSpacing="normal"
          lineHeight="normal"
          link={null}
          textAlign="left"
        >
          lbl_shipping_saveToAccount
        </Styled(BodyCopy)>
      </Field>
    </Styled(Col)>
    <Styled(Col)
      className="default-shipping"
      colSize={
        Object {
          "large": 12,
          "medium": 8,
          "small": 6,
        }
      }
      isEditing={null}
    >
      <Field
        component={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-ifAKCX",
              "isStatic": false,
              "rules": Array [
                "
  ",
                "
  display: block;
  align-items: ",
                [Function],
                ";

  & .CheckBox__input {
    flex: 0 0 auto;
    position: relative;
    top: 0;
    appearance: none;
    outline: 0;
    border: 0;
    height: ",
                "25px",
                ";
    width: ",
                "25px",
                ";
    margin: 0;
    margin-right: ",
                [Function],
                ";
    display: inline-block;
    vertical-align: top;
  }

  & .CheckBox__input:before {
    content: '';
    position: absolute;
    height: 100%;
    width: 100%;
    left: 0;
    border: 1px solid ",
                [Function],
                ";
  }

  & .CheckBox__input:checked:before {
    background: ",
                [Function],
                ";
    border: 1px solid ",
                [Function],
                ";
  }

  & .CheckBox__input:checked:after {
    transform: rotate(225deg);
    content: '';
    border: 2px solid ",
                [Function],
                ";
    font-size: ",
                [Function],
                "px;
    width: ",
                [Function],
                ";
    height: 10px;
    border-right: 0;
    border-bottom: 0;
    left: 10px;
    top: 5px;
    position: absolute;
  }

  & .CheckBox__text {
    width: calc(100% - 45px);
    display: inline-block;
  }

  & .CheckBox__text a {
    color: ",
                [Function],
                ";
  }

  & .disabled {
    opacity: ",
                [Function],
                ";
  }

  & .Checkbox__error {
    display: flex;
    flex-direction: row;
    padding-left: ",
                [Function],
                ";
  }
  & .warning-icon {
    background: transparent url('/static/images/circle-alert-fill.svg') no-repeat 0 0;
    background-size: contain;
    border: none;
    height: ",
                [Function],
                ";
    width: ",
                [Function],
                ";
    margin-right: 4px;
    margin-top: 2px;
  }
",
                ";
",
              ],
            },
            "displayName": "Styled(InputCheckbox)",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-ifAKCX",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        disabled={true}
        name="defaultShipping"
        showDefaultCheckbox={false}
      >
        <Styled(BodyCopy)
          className={null}
          color="text.primary"
          component="p"
          dataLocator="shippingDefault-chk"
          fontFamily="secondary"
          fontSize="fs16"
          fontWeight="regular"
          letterSpacing="normal"
          lineHeight="normal"
          link={null}
          textAlign="left"
        >
          lbl_shipping_defaultShipping
        </Styled(BodyCopy)>
      </Field>
    </Styled(Col)>
  </Styled(Row)>
  <Styled(AddEditShippingAddress)
    actionButtons={[Function]}
    addressFields={[Function]}
    defaultOptions={[Function]}
    modalState={false}
    modalType={null}
    toggleAddEditModal={
      [MockFunction] {
        "calls": Array [
          Array [
            Object {
              "type": "add",
            },
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
  />
</div>
`;

exports[`RegisteredShippingFormVanilla should render correctly with no addresses and call toggleAddNewAddress 1`] = `
<div
  className=""
  data-locator="shipping-details"
  isEditing={null}
>
  <Styled(Col)
    colSize={
      Object {
        "large": 12,
        "medium": 8,
        "small": 6,
      }
    }
  >
    <div
      className="address-form"
    >
      <FormSection
        name="address"
      >
        <Styled(AddressFields)
          addressPhoneNo={null}
          dispatch={
            [MockFunction] {
              "calls": Array [
                Array [
                  Object {
                    "meta": Object {
                      "field": "address.phoneNumber",
                      "form": "checkoutShipping",
                      "persistentSubmitErrors": undefined,
                      "touch": undefined,
                    },
                    "payload": "",
                    "type": "@@redux-form/CHANGE",
                  },
                ],
                Array [
                  Object {
                    "meta": Object {
                      "field": "defaultShipping",
                      "form": "checkoutShipping",
                      "persistentSubmitErrors": undefined,
                      "touch": undefined,
                    },
                    "payload": true,
                    "type": "@@redux-form/CHANGE",
                  },
                ],
                Array [
                  Object {
                    "meta": Object {
                      "field": "defaultShipping",
                      "form": "checkoutShipping",
                      "persistentSubmitErrors": undefined,
                      "touch": undefined,
                    },
                    "payload": false,
                    "type": "@@redux-form/CHANGE",
                  },
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": undefined,
                },
                Object {
                  "type": "return",
                  "value": undefined,
                },
                Object {
                  "type": "return",
                  "value": undefined,
                },
              ],
            }
          }
          formName="checkoutShipping"
          formSection="address"
          isGuest={false}
          showDefaultCheckbox={false}
          variation="secondary"
        />
      </FormSection>
    </div>
  </Styled(Col)>
  <Styled(Row)
    fullBleed={true}
  >
    <Styled(Col)
      className="elem-mb-LRG"
      colSize={
        Object {
          "large": 12,
          "medium": 8,
          "small": 6,
        }
      }
    >
      <Field
        component={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-ifAKCX",
              "isStatic": false,
              "rules": Array [
                "
  ",
                "
  display: block;
  align-items: ",
                [Function],
                ";

  & .CheckBox__input {
    flex: 0 0 auto;
    position: relative;
    top: 0;
    appearance: none;
    outline: 0;
    border: 0;
    height: ",
                "25px",
                ";
    width: ",
                "25px",
                ";
    margin: 0;
    margin-right: ",
                [Function],
                ";
    display: inline-block;
    vertical-align: top;
  }

  & .CheckBox__input:before {
    content: '';
    position: absolute;
    height: 100%;
    width: 100%;
    left: 0;
    border: 1px solid ",
                [Function],
                ";
  }

  & .CheckBox__input:checked:before {
    background: ",
                [Function],
                ";
    border: 1px solid ",
                [Function],
                ";
  }

  & .CheckBox__input:checked:after {
    transform: rotate(225deg);
    content: '';
    border: 2px solid ",
                [Function],
                ";
    font-size: ",
                [Function],
                "px;
    width: ",
                [Function],
                ";
    height: 10px;
    border-right: 0;
    border-bottom: 0;
    left: 10px;
    top: 5px;
    position: absolute;
  }

  & .CheckBox__text {
    width: calc(100% - 45px);
    display: inline-block;
  }

  & .CheckBox__text a {
    color: ",
                [Function],
                ";
  }

  & .disabled {
    opacity: ",
                [Function],
                ";
  }

  & .Checkbox__error {
    display: flex;
    flex-direction: row;
    padding-left: ",
                [Function],
                ";
  }
  & .warning-icon {
    background: transparent url('/static/images/circle-alert-fill.svg') no-repeat 0 0;
    background-size: contain;
    border: none;
    height: ",
                [Function],
                ";
    width: ",
                [Function],
                ";
    margin-right: 4px;
    margin-top: 2px;
  }
",
                ";
",
              ],
            },
            "displayName": "Styled(InputCheckbox)",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-ifAKCX",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        name="saveToAddressBook"
        onChange={[Function]}
        showDefaultCheckbox={false}
      >
        <Styled(BodyCopy)
          className={null}
          color="text.primary"
          component="p"
          dataLocator="saveaddress-chk"
          fontFamily="secondary"
          fontSize="fs16"
          fontWeight="regular"
          letterSpacing="normal"
          lineHeight="normal"
          link={null}
          textAlign="left"
        >
          lbl_shipping_saveToAccount
        </Styled(BodyCopy)>
      </Field>
    </Styled(Col)>
    <Styled(Col)
      className="default-shipping"
      colSize={
        Object {
          "large": 12,
          "medium": 8,
          "small": 6,
        }
      }
      isEditing={null}
    >
      <Field
        component={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-ifAKCX",
              "isStatic": false,
              "rules": Array [
                "
  ",
                "
  display: block;
  align-items: ",
                [Function],
                ";

  & .CheckBox__input {
    flex: 0 0 auto;
    position: relative;
    top: 0;
    appearance: none;
    outline: 0;
    border: 0;
    height: ",
                "25px",
                ";
    width: ",
                "25px",
                ";
    margin: 0;
    margin-right: ",
                [Function],
                ";
    display: inline-block;
    vertical-align: top;
  }

  & .CheckBox__input:before {
    content: '';
    position: absolute;
    height: 100%;
    width: 100%;
    left: 0;
    border: 1px solid ",
                [Function],
                ";
  }

  & .CheckBox__input:checked:before {
    background: ",
                [Function],
                ";
    border: 1px solid ",
                [Function],
                ";
  }

  & .CheckBox__input:checked:after {
    transform: rotate(225deg);
    content: '';
    border: 2px solid ",
                [Function],
                ";
    font-size: ",
                [Function],
                "px;
    width: ",
                [Function],
                ";
    height: 10px;
    border-right: 0;
    border-bottom: 0;
    left: 10px;
    top: 5px;
    position: absolute;
  }

  & .CheckBox__text {
    width: calc(100% - 45px);
    display: inline-block;
  }

  & .CheckBox__text a {
    color: ",
                [Function],
                ";
  }

  & .disabled {
    opacity: ",
                [Function],
                ";
  }

  & .Checkbox__error {
    display: flex;
    flex-direction: row;
    padding-left: ",
                [Function],
                ";
  }
  & .warning-icon {
    background: transparent url('/static/images/circle-alert-fill.svg') no-repeat 0 0;
    background-size: contain;
    border: none;
    height: ",
                [Function],
                ";
    width: ",
                [Function],
                ";
    margin-right: 4px;
    margin-top: 2px;
  }
",
                ";
",
              ],
            },
            "displayName": "Styled(InputCheckbox)",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-ifAKCX",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        disabled={true}
        name="defaultShipping"
        showDefaultCheckbox={false}
      >
        <Styled(BodyCopy)
          className={null}
          color="text.primary"
          component="p"
          dataLocator="shippingDefault-chk"
          fontFamily="secondary"
          fontSize="fs16"
          fontWeight="regular"
          letterSpacing="normal"
          lineHeight="normal"
          link={null}
          textAlign="left"
        >
          lbl_shipping_defaultShipping
        </Styled(BodyCopy)>
      </Field>
    </Styled(Col)>
  </Styled(Row)>
  <Styled(AddEditShippingAddress)
    actionButtons={[Function]}
    addressFields={[Function]}
    defaultOptions={[Function]}
    modalState={false}
    modalType={null}
  />
</div>
`;

exports[`RegisteredShippingFormVanilla should render correctly with no addresses and call toggleIsEditing 1`] = `
<div
  className=""
  data-locator="shipping-details"
  isEditing={null}
>
  <Styled(Col)
    colSize={
      Object {
        "large": 12,
        "medium": 8,
        "small": 6,
      }
    }
  >
    <div
      className="address-form"
    >
      <FormSection
        name="address"
      >
        <Styled(AddressFields)
          addressPhoneNo={null}
          dispatch={
            [MockFunction] {
              "calls": Array [
                Array [
                  Object {
                    "meta": Object {
                      "field": "address.phoneNumber",
                      "form": "checkoutShipping",
                      "persistentSubmitErrors": undefined,
                      "touch": undefined,
                    },
                    "payload": "",
                    "type": "@@redux-form/CHANGE",
                  },
                ],
                Array [
                  Object {
                    "meta": Object {
                      "field": "defaultShipping",
                      "form": "checkoutShipping",
                      "persistentSubmitErrors": undefined,
                      "touch": undefined,
                    },
                    "payload": true,
                    "type": "@@redux-form/CHANGE",
                  },
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": undefined,
                },
                Object {
                  "type": "return",
                  "value": undefined,
                },
              ],
            }
          }
          formName="checkoutShipping"
          formSection="address"
          isGuest={false}
          showDefaultCheckbox={false}
          variation="secondary"
        />
      </FormSection>
    </div>
  </Styled(Col)>
  <Styled(Row)
    fullBleed={true}
  >
    <Styled(Col)
      className="elem-mb-LRG"
      colSize={
        Object {
          "large": 12,
          "medium": 8,
          "small": 6,
        }
      }
    >
      <Field
        component={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-ifAKCX",
              "isStatic": false,
              "rules": Array [
                "
  ",
                "
  display: block;
  align-items: ",
                [Function],
                ";

  & .CheckBox__input {
    flex: 0 0 auto;
    position: relative;
    top: 0;
    appearance: none;
    outline: 0;
    border: 0;
    height: ",
                "25px",
                ";
    width: ",
                "25px",
                ";
    margin: 0;
    margin-right: ",
                [Function],
                ";
    display: inline-block;
    vertical-align: top;
  }

  & .CheckBox__input:before {
    content: '';
    position: absolute;
    height: 100%;
    width: 100%;
    left: 0;
    border: 1px solid ",
                [Function],
                ";
  }

  & .CheckBox__input:checked:before {
    background: ",
                [Function],
                ";
    border: 1px solid ",
                [Function],
                ";
  }

  & .CheckBox__input:checked:after {
    transform: rotate(225deg);
    content: '';
    border: 2px solid ",
                [Function],
                ";
    font-size: ",
                [Function],
                "px;
    width: ",
                [Function],
                ";
    height: 10px;
    border-right: 0;
    border-bottom: 0;
    left: 10px;
    top: 5px;
    position: absolute;
  }

  & .CheckBox__text {
    width: calc(100% - 45px);
    display: inline-block;
  }

  & .CheckBox__text a {
    color: ",
                [Function],
                ";
  }

  & .disabled {
    opacity: ",
                [Function],
                ";
  }

  & .Checkbox__error {
    display: flex;
    flex-direction: row;
    padding-left: ",
                [Function],
                ";
  }
  & .warning-icon {
    background: transparent url('/static/images/circle-alert-fill.svg') no-repeat 0 0;
    background-size: contain;
    border: none;
    height: ",
                [Function],
                ";
    width: ",
                [Function],
                ";
    margin-right: 4px;
    margin-top: 2px;
  }
",
                ";
",
              ],
            },
            "displayName": "Styled(InputCheckbox)",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-ifAKCX",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        name="saveToAddressBook"
        onChange={[Function]}
        showDefaultCheckbox={false}
      >
        <Styled(BodyCopy)
          className={null}
          color="text.primary"
          component="p"
          dataLocator="saveaddress-chk"
          fontFamily="secondary"
          fontSize="fs16"
          fontWeight="regular"
          letterSpacing="normal"
          lineHeight="normal"
          link={null}
          textAlign="left"
        >
          lbl_shipping_saveToAccount
        </Styled(BodyCopy)>
      </Field>
    </Styled(Col)>
    <Styled(Col)
      className="default-shipping"
      colSize={
        Object {
          "large": 12,
          "medium": 8,
          "small": 6,
        }
      }
      isEditing={null}
    >
      <Field
        component={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-ifAKCX",
              "isStatic": false,
              "rules": Array [
                "
  ",
                "
  display: block;
  align-items: ",
                [Function],
                ";

  & .CheckBox__input {
    flex: 0 0 auto;
    position: relative;
    top: 0;
    appearance: none;
    outline: 0;
    border: 0;
    height: ",
                "25px",
                ";
    width: ",
                "25px",
                ";
    margin: 0;
    margin-right: ",
                [Function],
                ";
    display: inline-block;
    vertical-align: top;
  }

  & .CheckBox__input:before {
    content: '';
    position: absolute;
    height: 100%;
    width: 100%;
    left: 0;
    border: 1px solid ",
                [Function],
                ";
  }

  & .CheckBox__input:checked:before {
    background: ",
                [Function],
                ";
    border: 1px solid ",
                [Function],
                ";
  }

  & .CheckBox__input:checked:after {
    transform: rotate(225deg);
    content: '';
    border: 2px solid ",
                [Function],
                ";
    font-size: ",
                [Function],
                "px;
    width: ",
                [Function],
                ";
    height: 10px;
    border-right: 0;
    border-bottom: 0;
    left: 10px;
    top: 5px;
    position: absolute;
  }

  & .CheckBox__text {
    width: calc(100% - 45px);
    display: inline-block;
  }

  & .CheckBox__text a {
    color: ",
                [Function],
                ";
  }

  & .disabled {
    opacity: ",
                [Function],
                ";
  }

  & .Checkbox__error {
    display: flex;
    flex-direction: row;
    padding-left: ",
                [Function],
                ";
  }
  & .warning-icon {
    background: transparent url('/static/images/circle-alert-fill.svg') no-repeat 0 0;
    background-size: contain;
    border: none;
    height: ",
                [Function],
                ";
    width: ",
                [Function],
                ";
    margin-right: 4px;
    margin-top: 2px;
  }
",
                ";
",
              ],
            },
            "displayName": "Styled(InputCheckbox)",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-ifAKCX",
            "target": [Function],
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          }
        }
        disabled={true}
        name="defaultShipping"
        showDefaultCheckbox={false}
      >
        <Styled(BodyCopy)
          className={null}
          color="text.primary"
          component="p"
          dataLocator="shippingDefault-chk"
          fontFamily="secondary"
          fontSize="fs16"
          fontWeight="regular"
          letterSpacing="normal"
          lineHeight="normal"
          link={null}
          textAlign="left"
        >
          lbl_shipping_defaultShipping
        </Styled(BodyCopy)>
      </Field>
    </Styled(Col)>
  </Styled(Row)>
  <Styled(AddEditShippingAddress)
    actionButtons={[Function]}
    addressFields={[Function]}
    defaultOptions={[Function]}
    modalState={false}
    modalType={null}
  />
</div>
`;
