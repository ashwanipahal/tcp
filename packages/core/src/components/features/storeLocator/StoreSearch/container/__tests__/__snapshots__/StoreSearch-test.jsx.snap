// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`StoreSearch component StoreSearch component renders correctly 1`] = `
<Styled(Grid)>
  <Styled(Row)
    fullBleed={true}
  >
    <Styled(Col)
      colSize={
        Object {
          "large": 6,
          "medium": 8,
          "small": 6,
        }
      }
      ignoreGutter={
        Object {
          "small": true,
        }
      }
    >
      <div
        className="test-class"
      >
        <h3
          className="storeLocatorHeading"
        />
        <Styled(Row)
          fullBleed={true}
        >
          <Styled(Col)
            colSize={
              Object {
                "large": 6.5,
                "medium": 4,
                "small": 6,
              }
            }
          >
            <div
              className="currentLocationWrapper"
            >
              <Styled(Anchor)
                asPath="/"
                className=""
                to="/"
              >
                <Styled(Image)
                  alt="location"
                  className="location-image icon-small"
                  data-locator="marker-icon"
                  height="16px"
                />
                <span
                  className="currentLocation"
                />
              </Styled(Anchor)>
            </div>
            <form
              className="searchForm"
              noValidate={true}
            >
              <div
                className="searchBar"
              >
                <Field
                  className="store-locator-field"
                  component={[Function]}
                  componentRestrictions={
                    Object {
                      "country": Array [
                        undefined,
                      ],
                    }
                  }
                  dataLocator="storeAddressLocator"
                  enableSuccessCheck={false}
                  id="storeAddressLocator"
                  name="storeAddressLocator"
                  onPlaceSelected={[Function]}
                />
                <Styled(Button)
                  className="button-search-store"
                  title="search"
                  type="submit"
                >
                  <Styled(Image)
                    alt="search"
                    className="search-image icon-small"
                    data-locator="search-icon"
                    height="25px"
                  />
                </Styled(Button)>
              </div>
            </form>
          </Styled(Col)>
          <Styled(Col)
            colSize={
              Object {
                "large": 12,
                "medium": 4,
                "small": 6,
              }
            }
          >
            <div
              className="searchFormBody"
            >
              <ul
                className="storeOptionList"
              >
                <li
                  className="storeOptions"
                >
                  <Field
                    checked={false}
                    component={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-gZMcBi",
                          "isStatic": false,
                          "rules": Array [
                            "
  ",
                            "
  display: block;
  align-items: ",
                            [Function],
                            ";

  & .CheckBox__input {
    flex: 0 0 auto;
    position: relative;
    top: 0;
    appearance: none;
    outline: 0;
    border: 0;
    height: ",
                            "25px",
                            ";
    width: ",
                            "25px",
                            ";
    margin: 0;
    margin-right: ",
                            [Function],
                            ";
    display: inline-block;
    vertical-align: top;
  }

  & .CheckBox__input:before {
    content: '';
    position: absolute;
    height: 100%;
    width: 100%;
    left: 0;
    border: 1px solid ",
                            [Function],
                            ";
  }

  & .CheckBox__input:checked:before {
    background: ",
                            [Function],
                            ";
    border: 1px solid ",
                            [Function],
                            ";
  }

  & .CheckBox__input:checked:after {
    transform: rotate(225deg);
    content: '';
    border: 2px solid ",
                            [Function],
                            ";
    font-size: ",
                            [Function],
                            "px;
    width: ",
                            [Function],
                            ";
    height: 10px;
    border-right: 0;
    border-bottom: 0;
    left: 10px;
    top: 5px;
    position: absolute;
  }

  & .CheckBox__text {
    width: calc(100% - 45px);
    display: inline-block;
  }

  & .CheckBox__text a {
    color: ",
                            [Function],
                            ";
  }

  & .disabled {
    opacity: ",
                            [Function],
                            ";
  }

  & .Checkbox__error {
    display: flex;
    flex-direction: row;
    padding-left: ",
                            [Function],
                            ";
  }
  & .warning-icon {
    background: transparent url('/static/images/circle-alert-fill.svg') no-repeat 0 0;
    background-size: contain;
    border: none;
    height: ",
                            [Function],
                            ";
    width: ",
                            [Function],
                            ";
    margin-right: 4px;
    margin-top: 2px;
  }
",
                            ";
",
                          ],
                        },
                        "displayName": "Styled(InputCheckbox)",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-gZMcBi",
                        "target": [Function],
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    dataLocator="gymboree-store-option"
                    enableSuccessCheck={false}
                    name="gymboreeStoreOption"
                    onChange={[Function]}
                  >
                    <Styled(BodyCopy)
                      className={null}
                      color="text.primary"
                      component="p"
                      fontFamily="secondary"
                      fontSize={
                        Array [
                          "fs12",
                          "fs12",
                          "fs12",
                        ]
                      }
                      fontWeight="regular"
                      letterSpacing="normal"
                      lineHeight="normal"
                      textAlign="left"
                    />
                  </Field>
                </li>
                <li
                  className="storeOptions"
                >
                  <Field
                    checked={false}
                    component={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "attrs": Array [],
                        "componentStyle": ComponentStyle {
                          "componentId": "sc-gZMcBi",
                          "isStatic": false,
                          "rules": Array [
                            "
  ",
                            "
  display: block;
  align-items: ",
                            [Function],
                            ";

  & .CheckBox__input {
    flex: 0 0 auto;
    position: relative;
    top: 0;
    appearance: none;
    outline: 0;
    border: 0;
    height: ",
                            "25px",
                            ";
    width: ",
                            "25px",
                            ";
    margin: 0;
    margin-right: ",
                            [Function],
                            ";
    display: inline-block;
    vertical-align: top;
  }

  & .CheckBox__input:before {
    content: '';
    position: absolute;
    height: 100%;
    width: 100%;
    left: 0;
    border: 1px solid ",
                            [Function],
                            ";
  }

  & .CheckBox__input:checked:before {
    background: ",
                            [Function],
                            ";
    border: 1px solid ",
                            [Function],
                            ";
  }

  & .CheckBox__input:checked:after {
    transform: rotate(225deg);
    content: '';
    border: 2px solid ",
                            [Function],
                            ";
    font-size: ",
                            [Function],
                            "px;
    width: ",
                            [Function],
                            ";
    height: 10px;
    border-right: 0;
    border-bottom: 0;
    left: 10px;
    top: 5px;
    position: absolute;
  }

  & .CheckBox__text {
    width: calc(100% - 45px);
    display: inline-block;
  }

  & .CheckBox__text a {
    color: ",
                            [Function],
                            ";
  }

  & .disabled {
    opacity: ",
                            [Function],
                            ";
  }

  & .Checkbox__error {
    display: flex;
    flex-direction: row;
    padding-left: ",
                            [Function],
                            ";
  }
  & .warning-icon {
    background: transparent url('/static/images/circle-alert-fill.svg') no-repeat 0 0;
    background-size: contain;
    border: none;
    height: ",
                            [Function],
                            ";
    width: ",
                            [Function],
                            ";
    margin-right: 4px;
    margin-top: 2px;
  }
",
                            ";
",
                          ],
                        },
                        "displayName": "Styled(InputCheckbox)",
                        "foldedComponentIds": Array [],
                        "render": [Function],
                        "styledComponentId": "sc-gZMcBi",
                        "target": [Function],
                        "toString": [Function],
                        "warnTooManyClasses": [Function],
                        "withComponent": [Function],
                      }
                    }
                    dataLocator="only-outlet-option"
                    enableSuccessCheck={false}
                    name="outletOption"
                    onChange={[Function]}
                  >
                    <Styled(BodyCopy)
                      className={null}
                      color="text.primary"
                      component="p"
                      fontFamily="secondary"
                      fontSize={
                        Array [
                          "fs12",
                          "fs12",
                          "fs12",
                        ]
                      }
                      fontWeight="regular"
                      letterSpacing="normal"
                      lineHeight="normal"
                      textAlign="left"
                    />
                  </Field>
                </li>
              </ul>
              <ul
                className="storeLinksList"
              >
                <li
                  className="mapLink storeLinks"
                >
                  <Styled(Anchor)
                    asPath=""
                    className=""
                    to=""
                  />
                </li>
                <li
                  className=" storeLinks"
                >
                  <Styled(Anchor)
                    asPath=""
                    className=""
                    to=""
                  />
                </li>
                <li
                  className=" storeLinks"
                >
                  <Styled(Anchor)
                    asPath=""
                    className=""
                    to=""
                  />
                </li>
              </ul>
            </div>
          </Styled(Col)>
        </Styled(Row)>
      </div>
    </Styled(Col)>
  </Styled(Row)>
</Styled(Grid)>
`;
