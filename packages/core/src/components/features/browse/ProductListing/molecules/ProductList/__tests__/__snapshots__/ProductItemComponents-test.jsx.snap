// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ProductItemComponents component BadgeItem render Text 1`] = `
<div
  className=""
>
  <ForwardRef(Styled(BodyCopy))
    className={null}
    color="text.primary"
    component="p"
    dataLocator="global-productbadge-txt"
    fontFamily="secondary"
    fontSize={12}
    fontWeight="semibold"
    letterSpacing="normal"
    lineHeight="normal"
    link={null}
    textAlign="left"
  >
    
  </ForwardRef(Styled(BodyCopy))>
</div>
`;

exports[`ProductItemComponents component ProductPricesSection called correctly 1`] = `
<div
  className="container-price"
>
  <ForwardRef(Styled(BodyCopy))
    className={null}
    color="red.500"
    component="p"
    dataLocator="global-Price-text"
    fontFamily="secondary"
    fontSize={
      Array [
        "fs15",
        "fs18",
        "fs20",
      ]
    }
    fontWeight="extrabold"
    letterSpacing="normal"
    lineHeight="normal"
    link={null}
    textAlign="left"
  >
    12.00
  </ForwardRef(Styled(BodyCopy))>
  <ForwardRef(Styled(BodyCopy))
    className="merchant-tag"
    color="red.500"
    component="span"
    fontFamily="secondary"
    fontSize={
      Array [
        "fs10",
        "fs12",
        "fs14",
      ]
    }
    fontWeight="semibold"
    letterSpacing="normal"
    lineHeight="normal"
    link={null}
    textAlign="left"
  >
    Badge2
  </ForwardRef(Styled(BodyCopy))>
</div>
`;

exports[`ProductItemComponents component ProductTitle called correctly 1`] = `
<div
  className="product-title-container"
>
  <ForwardRef(Styled(Anchor))
    asPath=""
    handleLinkClick={[Function]}
    inheritedStyles="product-title-content"
    to="/p?pid=undefined"
  >
    <Dotdotdot
      clamp={2}
      tagName="div"
      truncationChar="â€¦"
      useNativeClamp={false}
    >
      <ForwardRef(Styled(BodyCopy))
        className={null}
        color="text.primary"
        component="p"
        fontFamily="secondary"
        fontSize={
          Array [
            "fs12",
            "fs13",
            "fs14",
          ]
        }
        fontWeight="regular"
        letterSpacing="normal"
        lineHeight="normal"
        link={null}
        textAlign="left"
      >
        
      </ForwardRef(Styled(BodyCopy))>
    </Dotdotdot>
  </ForwardRef(Styled(Anchor))>
  Object {}
</div>
`;

exports[`ProductItemComponents component ProductWishlistIcon render Image 1`] = `
<Styled(BodyCopy)
  className="fav-icon-wrapper"
  color="text.primary"
  component="div"
  fontFamily="primary"
  fontSize={12}
  fontWeight="regular"
  isDisabled={true}
  letterSpacing="normal"
  lineHeight="normal"
  link={null}
  onClick={[MockFunction]}
  role="button"
  textAlign="left"
>
  <button
    className="clear-button"
  >
    <Styled(Image)
      alt="Add-to-favorite"
      data-locator="global-favorite-button"
      src="/static/images/add-to-favorite.svg"
      title="addToFavorite"
    />
  </button>
</Styled(BodyCopy)>
`;

exports[`ProductItemComponents component ProductWishlistIcon render Text 1`] = `
<Styled(BodyCopy)
  className="fav-icon-wrapper"
  color="text.primary"
  component="div"
  fontFamily="primary"
  fontSize={12}
  fontWeight="regular"
  isDisabled={true}
  letterSpacing="normal"
  lineHeight="normal"
  link={null}
  onClick={[MockFunction]}
  role="button"
  textAlign="left"
>
  <div
    className="information-remove"
  >
    <p
      className="information-remove-message"
    >
      <strong
        className="remove-title"
      >
        Click to Remove
      </strong>
      <br />
      Remove this item from your Favorites List by clicking the heart icon again.
    </p>
  </div>
</Styled(BodyCopy)>
`;

exports[`ProductItemComponents component PromotionalMessage render Text 1`] = `null`;

exports[`ProductItemComponents component productLink called correctly 1`] = `undefined`;
