// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DropDown Test should render correctly 1`] = `
<View
  style={null}
>
  <Styled(Text)
    isFocused={true}
  >
    foo
  </Styled(Text)>
  <Styled(TouchableOpacity)
    arrowImageStyle={null}
    bounces={true}
    data={
      Array [
        Object {
          "label": "foo",
          "value": "foo",
        },
      ]
    }
    dropDownItemFontWeight="semibold"
    dropDownStyle={null}
    heading="foo"
    isAnimateList={true}
    itemStyle={
      Object {
        "color": "foo",
      }
    }
    onPress={[Function]}
    onValueChange={[MockFunction]}
    openDropdownOnLoad={false}
    pointerEvents="auto"
    selectedItemFontWeight="semibold"
    selectedValue="foo"
    variation="primary"
  >
    <Styled(View)>
      <Styled(BodyCopy)
        accessibilityText=""
        color="gray.800"
        dataLocator=""
        fontSize="fs13"
        fontWeight="semibold"
        margin={null}
        mobileFontFamily="secondary"
        numberOfLines={null}
        text="foo"
        textAlign="center"
        textDecoration={null}
      />
    </Styled(View)>
    <Image
      source={
        Object {
          "testUri": "../../../../core/src/assets/carrot-small-down.png",
        }
      }
      style={null}
    />
  </Styled(TouchableOpacity)>
  <Component
    hardwareAccelerated={false}
    transparent={true}
    visible={false}
  >
    <TouchableOpacity
      accessibilityLabel="Tap to close it"
      accessibilityRole="none"
      accessible={true}
      activeOpacity={1}
      onPress={[Function]}
      style={
        Object {
          "height": 1334,
          "left": 0,
          "paddingTop": 0,
        }
      }
    >
      <Styled(View)
        style={
          Object {
            "top": 0,
            "width": 0,
          }
        }
      >
        <Styled(View)
          height={0}
          width={0}
        />
      </Styled(View)>
    </TouchableOpacity>
  </Component>
</View>
`;

exports[`DropDown Test should render with dropdown open state 1`] = `
<View
  style={null}
>
  <Styled(Text)
    isFocused={true}
  >
    foo
  </Styled(Text)>
  <Styled(TouchableOpacity)
    arrowImageStyle={null}
    bounces={true}
    data={
      Array [
        Object {
          "label": "foo",
          "value": "foo",
        },
      ]
    }
    dropDownItemFontWeight="semibold"
    dropDownStyle={null}
    heading="foo"
    isAnimateList={true}
    itemStyle={
      Object {
        "color": "foo",
      }
    }
    onPress={[Function]}
    onValueChange={[MockFunction]}
    openDropdownOnLoad={false}
    pointerEvents="auto"
    selectedItemFontWeight="semibold"
    selectedValue="foo"
    variation="primary"
  >
    <Styled(View)>
      <Styled(BodyCopy)
        accessibilityText=""
        color="gray.800"
        dataLocator=""
        fontSize="fs13"
        fontWeight="semibold"
        margin={null}
        mobileFontFamily="secondary"
        numberOfLines={null}
        text="foo"
        textAlign="center"
        textDecoration={null}
      />
    </Styled(View)>
    <Image
      source={
        Object {
          "testUri": "../../../../core/src/assets/carrot-small-up.png",
        }
      }
      style={null}
    />
  </Styled(TouchableOpacity)>
  <Component
    hardwareAccelerated={false}
    transparent={true}
    visible={true}
  >
    <TouchableOpacity
      accessibilityLabel="Tap to close it"
      accessibilityRole="none"
      accessible={true}
      activeOpacity={1}
      onPress={[Function]}
      style={
        Object {
          "height": 1334,
          "left": 0,
          "paddingTop": 0,
        }
      }
    >
      <Styled(View)
        style={
          Object {
            "top": 0,
            "width": 0,
          }
        }
      >
        <Styled(View)
          height={0}
          width={0}
        >
          <Styled(FlatList)
            ItemSeparatorComponent={[Function]}
            bounces={true}
            data={
              Array [
                Object {
                  "label": "foo",
                  "value": "foo",
                },
              ]
            }
            keyExtractor={[Function]}
            renderItem={[Function]}
            style={
              Object {
                "height": 0,
              }
            }
          />
        </Styled(View)>
      </Styled(View)>
    </TouchableOpacity>
  </Component>
</View>
`;
