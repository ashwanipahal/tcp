// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ProductAddToBagVanilla native should render correctly should match snapshot 1`] = `
<View
  colorList={Array []}
  currentProduct={
    Object {
      "generalProductId": "",
    }
  }
  fitList={Array []}
  fromBagPage={true}
  handleFormSubmit={null}
  isBundleProduct={false}
  isErrorMessageDisplayed={false}
  isFromBagProductSfl={false}
  plpLabels={Object {}}
  quantityList={Array []}
  selectedColor={null}
  selectedColorProductId={123}
  selectedFit={null}
  selectedQuantity={1}
  selectedSize={null}
  showAddToBagCTA={true}
  sizeList={Array []}
  toastMessage={[Function]}
>
  <Field
    component={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "_foldedDefaultProps": Object {
          "componentWidth": 80,
          "data": Array [],
          "error": null,
          "input": null,
          "isDisableZeroInventoryEntries": true,
          "isGiftCard": false,
          "itemNameKey": "",
          "itemValue": "",
          "keepAlive": false,
          "keyExtractor": null,
          "locators": null,
          "renderColorItem": false,
          "selectColor": null,
          "selectItem": null,
          "selectedColor": "",
          "selectedItem": null,
          "separatorWidth": 8,
        },
        "attrs": Array [],
        "displayName": "Styled(ProductVariantSelector)",
        "inlineStyle": InlineStyle {
          "rules": Array [
            "
    ",
            "
  margin-bottom: 33px;
",
            ";
  ",
          ],
        },
        "render": [Function],
        "styledComponentId": "StyledNativeComponent",
        "target": [Function],
        "withComponent": [Function],
      }
    }
    data={Array []}
    id="fit"
    itemNameKey="displayName"
    itemValue=""
    locators={
      Object {
        "key": "pdp_fit_label",
        "value": "pdp_fit_value",
      }
    }
    name="Fit"
    selectedItem=""
  />
  <Styled(View)>
    <Field
      component={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "_foldedDefaultProps": Object {
            "componentWidth": 80,
            "data": Array [],
            "error": null,
            "input": null,
            "isDisableZeroInventoryEntries": true,
            "isGiftCard": false,
            "itemNameKey": "",
            "itemValue": "",
            "keepAlive": false,
            "keyExtractor": null,
            "locators": null,
            "renderColorItem": false,
            "selectColor": null,
            "selectItem": null,
            "selectedColor": "",
            "selectedItem": null,
            "separatorWidth": 8,
          },
          "attrs": Array [],
          "displayName": "Styled(ProductVariantSelector)",
          "inlineStyle": InlineStyle {
            "rules": Array [
              "
    ",
              "
  margin-bottom: 33px;
",
              ";
  ",
            ],
          },
          "render": [Function],
          "styledComponentId": "StyledNativeComponent",
          "target": [Function],
          "withComponent": [Function],
        }
      }
      data={Array []}
      id="size"
      itemNameKey="displayName"
      itemValue=""
      locators={
        Object {
          "key": "pdp_size_label",
          "value": "pdp_size_value",
        }
      }
      name="Size"
      selectedItem=""
    />
  </Styled(View)>
  <Connect(ProductPickupContainer)
    formName="ProductAddToBag-"
    isAnchor={true}
    miscInfo={null}
    productInfo={
      Object {
        "generalProductId": "",
      }
    }
    sizeUnavailable=""
  />
  <Styled(View)
    margins="16px 0 16px 0"
    style={
      Object {
        "width": 200,
      }
    }
  >
    <Styled(BodyCopy)
      accessibilityText=""
      color="gray.900"
      dataLocator=""
      fontFamily="secondary"
      fontSize="fs14"
      fontWeight="black"
      margin={null}
      numberOfLines={null}
      text="undefined: "
      textDecoration={null}
    />
    <Field
      component={[Function]}
      data={Array []}
      heading="undefined: "
      id="quantity"
      lightGrayColor={true}
      name="Quantity"
      onValueChange={[Function]}
      selectedValue={1}
      textAlignLeft={true}
    />
  </Styled(View)>
  <Styled(CustomButton)
    accessibilityLabel="Add to Bag"
    active={false}
    buttonVariation="fixed-width"
    color="white"
    customStyle={Object {}}
    customTextStyle={null}
    disableButton={false}
    fill="BLUE"
    fontFamily="secondary"
    fontSize="fs10"
    fontWeight="extrabold"
    fullWidth=""
    iconColor="gray.800"
    iconName="chevron-down"
    iconSize="fs12"
    locator="pdp_color_swatch"
    margin="16px 0 0 0"
    navigation={Object {}}
    onPress={[Function]}
    paddings="12px 32px 12px 32px"
    selected={false}
    selectedIcon="chevron-up"
    showIcon={false}
    text=""
    theme={Object {}}
    url=""
    withNoLineHeight={false}
  />
</View>
`;
