// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`EmailSignupModal component renders correctly 1`] = `
<Fragment>
  <Styled(Modal)
    aria={
      Object {
        "describedby": "sign-up-modal-form-intro-view",
      }
    }
    className=""
    closeIconDataLocator="email_signup_modal_close_btn"
    colSet={
      Object {
        "large": 8,
        "medium": 6,
        "small": 6,
      }
    }
    contentLabel="undefined undefined"
    contentRef={[Function]}
    heightConfig={
      Object {
        "height": "645px",
        "maxHeight": "645px",
        "minHeight": "500px",
      }
    }
    isOpen={false}
    noPadding={true}
    onRequestClose={[Function]}
    overlayClassName="TCPModal__Overlay"
    widthConfig={
      Object {
        "large": "851px",
        "medium": "458px",
        "small": "100%",
      }
    }
  >
    <Styled(ReduxForm)
      buttonConfig={Object {}}
      className=""
      closeModal={[Function]}
      colProps={
        Object {
          "left": Object {
            "large": 4,
            "medium": 4,
            "small": 4,
          },
          "right": Object {
            "large": 8,
            "medium": 8,
            "small": 6,
          },
        }
      }
      destroyOnUnmount={true}
      enableReinitialize={false}
      forceUnregisterOnUnmount={false}
      form="EmailSignupForm"
      formViewConfig={Object {}}
      getFormState={[Function]}
      initialValues={
        Object {
          "signup": "",
        }
      }
      isEmailValid={false}
      isModalOpen={false}
      keepDirtyOnReinitialize={false}
      persistentSubmitErrors={false}
      pure={true}
      reset={[Function]}
      shouldAsyncValidate={[Function]}
      shouldError={[Function]}
      shouldValidate={[Function]}
      shouldWarn={[Function]}
      submitAsSideEffect={false}
      subscription={
        Object {
          "success": false,
        }
      }
      touchOnBlur={true}
      touchOnChange={false}
      updateUnregisteredFields={false}
    />
  </Styled(Modal)>
</Fragment>
`;

exports[`EmailSignupModal component renders correctly when button is clicked 1`] = `
<Fragment>
  <Styled(Modal)
    aria={
      Object {
        "describedby": "sign-up-modal-form-intro-view",
      }
    }
    className=""
    closeIconDataLocator="email_signup_modal_close_btn"
    colSet={
      Object {
        "large": 8,
        "medium": 6,
        "small": 6,
      }
    }
    contentLabel="undefined undefined"
    contentRef={[Function]}
    heightConfig={
      Object {
        "height": "645px",
        "maxHeight": "645px",
        "minHeight": "500px",
      }
    }
    isOpen={true}
    noPadding={true}
    onRequestClose={[Function]}
    overlayClassName="TCPModal__Overlay"
    widthConfig={
      Object {
        "large": "851px",
        "medium": "458px",
        "small": "100%",
      }
    }
  >
    <Styled(ReduxForm)
      buttonConfig={Object {}}
      className=""
      closeModal={[Function]}
      colProps={
        Object {
          "left": Object {
            "large": 4,
            "medium": 4,
            "small": 4,
          },
          "right": Object {
            "large": 8,
            "medium": 8,
            "small": 6,
          },
        }
      }
      destroyOnUnmount={true}
      enableReinitialize={false}
      forceUnregisterOnUnmount={false}
      form="EmailSignupForm"
      formViewConfig={Object {}}
      getFormState={[Function]}
      initialValues={
        Object {
          "signup": "",
        }
      }
      isEmailValid="invalid"
      isModalOpen={true}
      isSubscriptionValid={
        Object {
          "success": true,
        }
      }
      keepDirtyOnReinitialize={false}
      persistentSubmitErrors={false}
      pure={true}
      reset={[Function]}
      shouldAsyncValidate={[Function]}
      shouldError={[Function]}
      shouldValidate={[Function]}
      shouldWarn={[Function]}
      submitAsSideEffect={false}
      subscription={Object {}}
      touchOnBlur={true}
      touchOnChange={false}
      updateUnregisteredFields={false}
    />
  </Styled(Modal)>
</Fragment>
`;

exports[`EmailSignupModal component renders correctly when button is clicked 2`] = `
<Fragment>
  <Styled(Modal)
    aria={
      Object {
        "describedby": "sign-up-modal-form-intro-view",
      }
    }
    className=""
    closeIconDataLocator="email_signup_modal_close_btn"
    colSet={
      Object {
        "large": 8,
        "medium": 6,
        "small": 6,
      }
    }
    contentLabel="undefined undefined"
    contentRef={[Function]}
    heightConfig={
      Object {
        "height": "645px",
        "maxHeight": "645px",
        "minHeight": "500px",
      }
    }
    isOpen={true}
    noPadding={true}
    onRequestClose={[Function]}
    overlayClassName="TCPModal__Overlay"
    widthConfig={
      Object {
        "large": "851px",
        "medium": "458px",
        "small": "100%",
      }
    }
  >
    <Styled(ReduxForm)
      buttonConfig={Object {}}
      className=""
      closeModal={[Function]}
      colProps={
        Object {
          "left": Object {
            "large": 4,
            "medium": 4,
            "small": 4,
          },
          "right": Object {
            "large": 8,
            "medium": 8,
            "small": 6,
          },
        }
      }
      destroyOnUnmount={true}
      enableReinitialize={false}
      forceUnregisterOnUnmount={false}
      form="EmailSignupForm"
      formViewConfig={Object {}}
      getFormState={[Function]}
      initialValues={
        Object {
          "signup": "",
        }
      }
      isEmailValid="valid"
      isModalOpen={true}
      isSubscriptionValid={
        Object {
          "success": false,
        }
      }
      keepDirtyOnReinitialize={false}
      persistentSubmitErrors={false}
      pure={true}
      reset={[Function]}
      shouldAsyncValidate={[Function]}
      shouldError={[Function]}
      shouldValidate={[Function]}
      shouldWarn={[Function]}
      submitAsSideEffect={false}
      subscription={Object {}}
      touchOnBlur={true}
      touchOnChange={false}
      updateUnregisteredFields={false}
    />
  </Styled(Modal)>
</Fragment>
`;
