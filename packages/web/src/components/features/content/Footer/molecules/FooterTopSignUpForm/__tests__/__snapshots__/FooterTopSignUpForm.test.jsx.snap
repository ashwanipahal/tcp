// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FooterTopSignUpFormVanilla component renders correctly 1`] = `
<form
  className="footer_top__signup_form"
>
  <Styled(Grid)>
    <Styled(Row)
      className="footer_top__signup_form_row"
      fullBleed={true}
    >
      <Styled(Col)
        className=""
        colSize={
          Object {
            "large": 8,
            "medium": 4,
            "small": 4,
          }
        }
        ignoreGutter={
          Object {
            "small": false,
          }
        }
      >
        <Field
          component={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-dnqmqq",
                "isStatic": false,
                "rules": Array [
                  "
  ",
                  "
  position: relative;
  display: block;

  .TextBox__label {
    font-size: ",
                  [Function],
                  "px;
    padding: 0;
    position: absolute;
    top: ",
                  [Function],
                  ";
    ",
                  [Function],
                  "
  }

  .TextBox__input {
    margin: 0;
    outline: 0;
    font-size: ",
                  [Function],
                  "px;
    color: ",
                  [Function],
                  ";
    width: 100%;
    background-position: left top;
    background-repeat: no-repeat;
    background-size: contain;
    border: 0 solid transparent;
    border-bottom: 1px solid ",
                  [Function],
                  ";
    padding-bottom: ",
                  [Function],
                  ";
    margin-bottom: ",
                  [Function],
                  ";
    padding-top: ",
                  [Function],
                  ";

    ",
                  [Function],
                  "

    ",
                  [Function],
                  ";

    &:focus + .TextBox__label {
      font-size: ",
                  [Function],
                  "px;
      font-weight: ",
                  [Function],
                  ";
      top: ",
                  [Function],
                  ";
    }
  }
  .success__checkmark {
    display: none;
  }
  &.textbox_validation_success .TextBox__input {
    border-bottom: 1px solid ",
                  [Function],
                  ";
  }

  &.textbox_validation_success .success__checkmark {
    display: ",
                  [Function],
                  ";
    width: 15px;
    height: 8px;
    margin-left: ",
                  [Function],
                  ";
    transform: rotate(-45deg);
    transform-origin: left;
    position: absolute;
    right: 0;
    top: 30px;

    &:before {
      content: '';
      position: absolute;
      width: 3px;
      height: 100%;
      background-color: ",
                  [Function],
                  ";
    }

    &:after {
      content: '';
      position: absolute;
      width: 100%;
      height: 3px;
      background-color: ",
                  [Function],
                  ";
      bottom: 0;
    }
  }

  ",
                  [Function],
                  ";

  .TextBox__error {
    display: flex;
    flex-direction: row;
    padding-bottom: ",
                  [Function],
                  ";
  }
  .warning-icon {
    background: transparent url('/static/images/circle-alert-fill.svg') no-repeat 0 0;
    background-size: contain;
    border: none;
    height: 14px;
    width: 16px;
    margin-right: 7px;
  }
",
                  ";
",
                ],
              },
              "displayName": "Styled(TextBox)",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-dnqmqq",
              "target": [Function],
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          dataLocator="enter_email_text_field"
          enableSuccessCheck={false}
          id="signup"
          name="signup"
          placeholder="Enter email address"
          type="text"
        />
      </Styled(Col)>
      <Styled(Col)
        className="candidate_a_inline_container_button"
        colSize={
          Object {
            "large": 4,
            "medium": 4,
            "small": 2,
          }
        }
        ignoreGutter={
          Object {
            "small": true,
          }
        }
      >
        <Styled(Button)
          buttonVariation="fixed-width"
          className="candidate_a_form_button"
          data-locator="email_submit_btn"
          disabled={false}
          type="submit"
        >
          Submit
        </Styled(Button)>
      </Styled(Col)>
    </Styled(Row)>
    <Styled(Row)
      className="footer_top__signup_form_row"
      fullBleed={true}
    >
      <Styled(Col)
        colSize={
          Object {
            "large": 12,
            "medium": 12,
            "small": 12,
          }
        }
        ignoreGutter={
          Object {
            "small": false,
          }
        }
      >
        <Field
          component={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-jTzLTM",
                "isStatic": false,
                "rules": Array [
                  "
  ",
                  "
  display: block;
  align-items: ",
                  [Function],
                  ";

  & .CheckBox__input {
    flex: 0 0 auto;
    position: relative;
    top: 0;
    appearance: none;
    outline: 0;
    border: 0;
    height: ",
                  "25px",
                  ";
    width: ",
                  "25px",
                  ";
    margin: 0;
    margin-right: ",
                  [Function],
                  ";
    display: inline-block;
    vertical-align: top;
  }

  & .CheckBox__input:before {
    content: '';
    position: absolute;
    height: 100%;
    width: 100%;
    left: 0;
    border: 1px solid ",
                  [Function],
                  ";
  }

  & .CheckBox__input:checked:before {
    background: ",
                  [Function],
                  ";
    border: 1px solid ",
                  [Function],
                  ";
  }

  & .CheckBox__input:checked:after {
    transform: rotate(225deg);
    content: '';
    border: 2px solid ",
                  [Function],
                  ";
    font-size: ",
                  [Function],
                  "px;
    width: ",
                  [Function],
                  ";
    height: 10px;
    border-right: 0;
    border-bottom: 0;
    left: 10px;
    top: 5px;
    position: absolute;
  }

  & .CheckBox__text {
    width: calc(100% - 45px);
    display: inline-block;
    ",
                  [Function],
                  "
  }

  & .CheckBox__text a {
    color: ",
                  [Function],
                  ";
  }

  & .disabled {
    opacity: ",
                  [Function],
                  ";
  }

  & .Checkbox__error {
    display: flex;
    flex-direction: row;
    padding-left: ",
                  [Function],
                  ";
  }
  & .warning-icon {
    background: transparent url('/static/images/circle-alert-fill.svg') no-repeat 0 0;
    background-size: contain;
    border: none;
    height: ",
                  [Function],
                  ";
    width: ",
                  [Function],
                  ";
    margin-right: 4px;
    margin-top: 2px;
  }
  & #checkbox__error__iAgree {
    margin-top: 4px;
  }
",
                  ";
",
                ],
              },
              "displayName": "Styled(InputCheckbox)",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-jTzLTM",
              "target": [Function],
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          dataLocator=""
          id=""
          name=""
          type="checkbox"
        />
      </Styled(Col)>
    </Styled(Row)>
  </Styled(Grid)>
</form>
`;
