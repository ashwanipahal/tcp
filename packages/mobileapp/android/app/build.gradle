apply plugin: "com.android.application"

import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"],
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
    entryFile: "index.js",
    enableHermes: false
]

apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"


/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and mirrored here.  If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */
def enableHermes = project.ext.react.get("enableHermes", false);




def getTCPAppType() {
    return "tcp";
}

def getGymboreeAppType() {
    return "gymboree";
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "com.childrensplace"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        resValue "string", "build_config_package", "com.mobileapp"
        missingDimensionStrategy 'react-native-camera', 'general'
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }
    // signingConfigs {
    //     debug {
    //         if (project.hasProperty('MYAPP_UPLOAD_STORE_FILE')) {
    //             storeFile file(MYAPP_UPLOAD_STORE_FILE)
    //             storePassword MYAPP_UPLOAD_STORE_PASSWORD
    //             keyAlias MYAPP_UPLOAD_KEY_ALIAS
    //             keyPassword MYAPP_UPLOAD_KEY_PASSWORD
    //         }
    //     }
    //     release {
    //         if (project.hasProperty('MYAPP_UPLOAD_STORE_FILE')) {
    //             storeFile file(MYAPP_UPLOAD_STORE_FILE)
    //             storePassword MYAPP_UPLOAD_STORE_PASSWORD
    //             keyAlias MYAPP_UPLOAD_KEY_ALIAS
    //             keyPassword MYAPP_UPLOAD_KEY_PASSWORD
    //         }
    //     }
    // }

    buildTypes {
        // debug {
        //     signingConfig signingConfigs.debug
        //     buildConfigField "String", "CODEPUSH_KEY", '""'
        // }
        release {
            // signingConfig signingConfigs.release

            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            // buildConfigField "String", "CODEPUSH_KEY", 'spClHqj4L07OjWqQEy1iPmC4RMZ5SkveJ0SIQQ'
        }
    }

    // Specifies one flavor dimension.
    flavorDimensions "version"
    productFlavors {

        tcp {
            // Assigns this product flavor to the "version" flavor dimension.
            // This property is optional if you are using only one dimension.
            dimension "version"
            applicationIdSuffix ".tcp.dev"
            versionNameSuffix "-tcpDEV"
            versionName = '1.0.0'
            buildConfigField "String", "APP_TYPE", "\""+getTCPAppType()+"\""
            buildConfigField "String", "CODEPUSH_KEY", '""'

        }

        gymboree {
            dimension "version"
            applicationIdSuffix ".gymboree.dev"
            versionNameSuffix "-gymboreeDEV"
            versionName = '1.0.0'
            buildConfigField "String", "APP_TYPE", "\""+getGymboreeAppType()+"\""
            buildConfigField "String", "CODEPUSH_KEY", '""'
        }

        tcpInt {
            // Assigns this product flavor to the "version" flavor dimension.
            // This property is optional if you are using only one dimension.
            dimension "version"
            applicationIdSuffix ".tcp.int"
            versionNameSuffix "-tcpINT"
            versionName = '1.0.0'
            buildConfigField "String", "APP_TYPE", "\""+getTCPAppType()+"\""
            buildConfigField "String", "CODEPUSH_KEY", '""'

        }

        tcpIntPreview {
            // Assigns this product flavor to the "version" flavor dimension.
            // This property is optional if you are using only one dimension.
            dimension "version"
            applicationIdSuffix ".tcp.int"
            versionNameSuffix "-tcpINTPreview"
            versionName = '1.0.0'
            buildConfigField "String", "APP_TYPE", "\""+getTCPAppType()+"\""
            buildConfigField "String", "CODEPUSH_KEY", '""'

        }

        gymboreeInt {
            dimension "version"
            applicationIdSuffix ".gym.int"
            versionNameSuffix "-gymboreeINT"
            versionName = '1.0.0'
            buildConfigField "String", "APP_TYPE", "\""+getGymboreeAppType()+"\""
            buildConfigField "String", "CODEPUSH_KEY", '""'
        }

        gymboreeIntPreview {
            dimension "version"
            applicationIdSuffix ".gym.int"
            versionNameSuffix "-gymboreeINTPreview"
            versionName = '1.0.0'
            buildConfigField "String", "APP_TYPE", "\""+getGymboreeAppType()+"\""
            buildConfigField "String", "CODEPUSH_KEY", '""'
        }

        tcpQA {
            // Assigns this product flavor to the "version" flavor dimension.
            // This property is optional if you are using only one dimension.
            dimension "version"
            applicationIdSuffix ".tcp.qa"
            versionNameSuffix "-tcpQA"
            versionName = '1.0.0'
            buildConfigField "String", "APP_TYPE", "\""+getTCPAppType()+"\""
            buildConfigField "String", "CODEPUSH_KEY", '""'

        }

        tcpQAPreview {
            // Assigns this product flavor to the "version" flavor dimension.
            // This property is optional if you are using only one dimension.
            dimension "version"
            applicationIdSuffix ".tcp.qa"
            versionNameSuffix "-tcpQAPreview"
            versionName = '1.0.0'
            buildConfigField "String", "APP_TYPE", "\""+getTCPAppType()+"\""
            buildConfigField "String", "CODEPUSH_KEY", '""'

        }

        gymboreeQA {
            dimension "version"
            applicationIdSuffix ".gym.qa"
            versionNameSuffix "-gymboreeQA"
            versionName = '1.0.0'
            buildConfigField "String", "APP_TYPE", "\""+getGymboreeAppType()+"\""
            buildConfigField "String", "CODEPUSH_KEY", '""'
        }

        gymboreeQAPreview {
            dimension "version"
            applicationIdSuffix ".gym.qa"
            versionNameSuffix "-gymboreeQAPreview"
            versionName = '1.0.0'
            buildConfigField "String", "APP_TYPE", "\""+getGymboreeAppType()+"\""
            buildConfigField "String", "CODEPUSH_KEY", '""'
        }

        tcpUat {
            // Assigns this product flavor to the "version" flavor dimension.
            // This property is optional if you are using only one dimension.
            dimension "version"
            applicationIdSuffix ".tcp.uat"
            versionNameSuffix "-tcpUAT"
            versionName = '1.0.0'
            buildConfigField "String", "APP_TYPE", "\""+getTCPAppType()+"\""
            buildConfigField "String", "CODEPUSH_KEY", "\"Ma4vZhh6IG1dyvr1mVOG_mcvY_9dKqgXdfO2y\""
        }

        tcpUatPreview {
            // Assigns this product flavor to the "version" flavor dimension.
            // This property is optional if you are using only one dimension.
            dimension "version"
            applicationIdSuffix ".tcp.uat"
            versionNameSuffix "-tcpUATPreview"
            versionName = '1.0.0'
            buildConfigField "String", "APP_TYPE", "\""+getTCPAppType()+"\""
            buildConfigField "String", "CODEPUSH_KEY", "\"Ma4vZhh6IG1dyvr1mVOG_mcvY_9dKqgXdfO2y\""
        }

        gymboreeUat {
            dimension "version"
            applicationIdSuffix ".gym.uat"
            versionNameSuffix "-gymboreeUAT"
            versionName = '1.0.0'
            buildConfigField "String", "APP_TYPE", "\""+getGymboreeAppType()+"\""
            buildConfigField "String", "CODEPUSH_KEY", "\"IuwYFq2BgvHOFvTDnvBDLeLUVxeTwEFmhlCSX\""
        }

        gymboreeUatPreview {
            dimension "version"
            applicationIdSuffix ".gym.uat"
            versionNameSuffix "-gymboreeUATPreview"
            versionName = '1.0.0'
            buildConfigField "String", "APP_TYPE", "\""+getGymboreeAppType()+"\""
            buildConfigField "String", "CODEPUSH_KEY", "\"IuwYFq2BgvHOFvTDnvBDLeLUVxeTwEFmhlCSX\""
        }

        tcpProd {
            // Assigns this product flavor to the "version" flavor dimension.
            // This property is optional if you are using only one dimension.
            dimension "version"
            applicationIdSuffix ".tcp.prod"
            versionNameSuffix ""
            versionName = '1.0.0'
            buildConfigField "String", "APP_TYPE", "\""+getTCPAppType()+"\""
            buildConfigField "String", "CODEPUSH_KEY", '""'
        }

        tcpProdPreview {
            // Assigns this product flavor to the "version" flavor dimension.
            // This property is optional if you are using only one dimension.
            dimension "version"
            applicationIdSuffix ".tcp.prod"
            versionNameSuffix ""
            versionName = '1.0.0'
            buildConfigField "String", "APP_TYPE", "\""+getTCPAppType()+"\""
            buildConfigField "String", "CODEPUSH_KEY", '""'
        }

        gymboreeProd {
            dimension "version"
            applicationIdSuffix ".gym.prod"
            versionNameSuffix ""
            versionName = '1.0.0'
            buildConfigField "String", "APP_TYPE", "\""+getGymboreeAppType()+"\""
            buildConfigField "String", "CODEPUSH_KEY", '""'
        }

        gymboreeProdPreview {
            dimension "version"
            applicationIdSuffix ".gym.prod"
            versionNameSuffix ""
            versionName = '1.0.0'
            buildConfigField "String", "APP_TYPE", "\""+getGymboreeAppType()+"\""
            buildConfigField "String", "CODEPUSH_KEY", '""'
        }
    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // https://developer.android.com/studio/build/configure-apk-splits.html
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }

    sourceSets {
        gymboree {
            res.srcDirs = ['src/gymboree/res']
        }

        gymboreeInt {
            res.srcDirs = ['src/gymboree/res']
        }

        gymboreeIntPreview {
            res.srcDirs = ['src/gymboree/res']
        }

        gymboreeQA {
            res.srcDirs = ['src/gymboree/res']
        }

        gymboreeQAPreview {
            res.srcDirs = ['src/gymboree/res']
        }

        gymboreeUat {
            res.srcDirs = ['src/gymboree/res']
        }

        gymboreeUatPreview {
            res.srcDirs = ['src/gymboree/res']
        }

        gymboreeProd {
            res.srcDirs = ['src/gymboree/res']
        }

        gymboreeProdPreview {
            res.srcDirs = ['src/gymboree/res']
        }
    }
}

dependencies {
    implementation project(':react-native-camera')
    implementation project(':react-native-permissions')
    implementation project(':react-native-gesture-handler')
    implementation project(':@react-native-community_datetimepicker')
    implementation project(':react-native-webview')
    compile project(':react-native-code-push')
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "com.facebook.react:react-native:+"  // From node_modules
    implementation 'com.braintreepayments.api:braintree:2.22.0'
    implementation 'com.google.code.gson:gson:2.8.2'
    if (enableHermes) {
        def hermesPath = "../../node_modules/hermes-engine/android/";
        debugImplementation files(hermesPath + "hermes-debug.aar")
        releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
        implementation jscFlavor
    }
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

project.ext.vectoricons = [
    iconFontNames: [ 'FontAwesome.ttf', 'icomoon.ttf' ] // Name of the font files you want to copy
]

apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"


project.ext.envConfigFiles = [
    tcpdebug: "src/env/.env.dev",
    gymboreedebug: "src/env/.env.dev",
    tcprelease: "src/env/.env.local",
    gymboreerelease: "src/env/.env.local",

    tcpintdebug: "src/env/.env.int",
    tcpintrelease: "src/env/.env.int",
    gymboreeintdebug: "src/env/.env.int",
    gymboreeintrelease: "src/env/.env.int",

    tcpintpreviewdebug: "src/env/.env.int",
    tcpintpreviewrelease: "src/env/.env.int",
    gymboreeintpreviewdebug: "src/env/.env.int",
    gymboreeintpreviewrelease: "src/env/.env.int",

    tcpqadebug: "src/env/.env.int",
    tcpqarelease: "src/env/.env.int",
    gymboreeqadebug: "src/env/.env.int",
    gymboreeqarelease: "src/env/.env.int",

    tcpqapreviewdebug: "src/env/.env.int",
    tcpqapreviewrelease: "src/env/.env.int",
    gymboreeqapreviewdebug: "src/env/.env.int",
    gymboreeqapreviewrelease: "src/env/.env.int",

    tcpuatdebug: "src/env/.env.uat",
    tcpuatrelease: "src/env/.env.uat",
    gymboreeuatdebug: "src/env/.env.uat",
    gymboreeuatrelease: "src/env/.env.uat",

    tcpuatpreviewdebug: "src/env/.env.uat",
    tcpuatpreviewrelease: "src/env/.env.uat",
    gymboreeuatpreviewdebug: "src/env/.env.uat",
    gymboreeuatpreviewrelease: "src/env/.env.uat",

    tcpproddebug: "src/env/.env.prod",
    tcpprodrelease: "src/env/.env.prod",
    gymboreeproddebug: "src/env/.env.prod",
    gymboreeprodrelease: "src/env/.env.prod",

    tcpprodpreviewdebug: "src/env/.env.preview",
    tcpprodpreviewrelease: "src/env/.env.preview",
    gymboreeprodpreviewdebug: "src/env/.env.preview",
    gymboreeprodpreviewrelease: "src/env/.env.preview",

]

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle");
applyNativeModulesAppBuildGradle(project)
apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"
